(()=>{"use strict";var e={28:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(537),r=n.n(o),i=n(645),a=n.n(i)()(r());a.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Nunito:wght@300&family=Righteous&family=Staatliches&family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,0,0&family=Material+Symbols+Sharp:opsz,wght,FILL,GRAD@48,700,1,0&display=swap);"]),a.push([e.id,'/* Fonts */\n\n:root {\n    --nunito-font-family: Nunito, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    --righteous-font-family: Righteous, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    font-size: 20px;\n}\n\n.no-select {\n    -webkit-touch-callout: none;    /* iOS Safari */\n    -webkit-user-select: none;      /* Safari */\n    -khtml-user-select: none;       /* Konqueror HTML */\n    -moz-user-select: none;         /* Old versions of Firefox */\n    -ms-user-select: none;          /* Internet Explorer/Edge */\n    user-select: none;              /* Non-prefixed version, currently\n                                       supported by Chrome, Edge, Opera and Firefox */\n}\n\nh1, h2, h3, h4, h5, h6 {\n    padding: 0px;\n    margin: 0px;\n}\n\nbody {\n    font-family: Nunito, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    font-family: var(--nunito-font-family);\n    margin: 0;\n    justify-content: center;\n    min-width: 100vw;\n    min-height: 100vh;\n    height: 100vh;\n}\n\n.page {\n    display: grid;\n    grid-template-rows: auto 1fr;\n    width: inherit;\n    height: 100vh;\n}\n\n.header {\n    grid-area: 1 / 1 / 2 / -1;\n    background-color: #ffffff;\n    padding: 30px 10px;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    z-index: 0;\n    height: 2.8rem;\n}\n\n.content {\n    grid-area: 2 / 1 / -1 / -1;\n    padding: 20px;\n    background-color: #e4e4e4;\n}',"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA,UAAU;;AAGV;IACI;4EACwE;IACxE;4EACwE;IACxE,eAAe;AACnB;;AAEA;IACI,2BAA2B,KAAK,eAAe;IAC/C,yBAAyB,OAAO,WAAW;IAC3C,wBAAwB,QAAQ,mBAAmB;IACnD,sBAAsB,UAAU,4BAA4B;IAC5D,qBAAqB,WAAW,2BAA2B;IAC3D,iBAAiB,eAAe;qFACiD;AACrF;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI;4EACwE;IACxE,sCAAsC;IACtC,SAAS;IACT,uBAAuB;IACvB,gBAAgB;IAChB,iBAAiB;IACjB,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,4BAA4B;IAC5B,cAAc;IACd,aAAa;AACjB;;AAEA;IACI,yBAAyB;IACzB,yBAAyB;IACzB,kBAAkB;IAClB,qDAAqD;IACrD,UAAU;IACV,cAAc;AAClB;;AAEA;IACI,0BAA0B;IAC1B,aAAa;IACb,yBAAyB;AAC7B",sourcesContent:['/* Fonts */\n@import url(\'https://fonts.googleapis.com/css2?family=Nunito:wght@300&family=Righteous&family=Staatliches&family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,0,0&family=Material+Symbols+Sharp:opsz,wght,FILL,GRAD@48,700,1,0&display=swap\');\n\n:root {\n    --nunito-font-family: Nunito, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    --righteous-font-family: Righteous, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    font-size: 20px;\n}\n\n.no-select {\n    -webkit-touch-callout: none;    /* iOS Safari */\n    -webkit-user-select: none;      /* Safari */\n    -khtml-user-select: none;       /* Konqueror HTML */\n    -moz-user-select: none;         /* Old versions of Firefox */\n    -ms-user-select: none;          /* Internet Explorer/Edge */\n    user-select: none;              /* Non-prefixed version, currently\n                                       supported by Chrome, Edge, Opera and Firefox */\n}\n\nh1, h2, h3, h4, h5, h6 {\n    padding: 0px;\n    margin: 0px;\n}\n\nbody {\n    font-family: Nunito, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    font-family: var(--nunito-font-family);\n    margin: 0;\n    justify-content: center;\n    min-width: 100vw;\n    min-height: 100vh;\n    height: 100vh;\n}\n\n.page {\n    display: grid;\n    grid-template-rows: auto 1fr;\n    width: inherit;\n    height: 100vh;\n}\n\n.header {\n    grid-area: 1 / 1 / 2 / -1;\n    background-color: #ffffff;\n    padding: 30px 10px;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    z-index: 0;\n    height: 2.8rem;\n}\n\n.content {\n    grid-area: 2 / 1 / -1 / -1;\n    padding: 20px;\n    background-color: #e4e4e4;\n}'],sourceRoot:""}]);const s=a},719:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(537),r=n.n(o),i=n(645),a=n.n(i)()(r());a.push([e.id,'.header {\n    display: flex;\n    flex-direction: row-reverse;\n    justify-content: center;\n}\n\n.project-name-label {\n    font-size: 1.8rem;\n    align-self: center;\n}\n.project-name-label::before {\n    position: absolute;\n    font-size: 0.6rem;\n    white-space: nowrap;\n    color: transparent;\n    content: attr(help);\n    font-weight: normal;\n    top: 1.4rem;\n}\n.project-name-input {\n    text-align: center;\n    vertical-align: middle;\n    font-family: var(--nunito-font-family);\n    font-size: 1.2rem;\n    color: rgb(50, 50, 50);\n    background-color: transparent;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    outline: 1px solid rgb(70, 70, 70);\n    border: none;\n    border-radius: 0.2rem;\n    width: min(500px, calc(100% - 2rem));\n    margin-left: 0.3rem;\n}\n.project-name-input:hover {\n    outline: 2px solid rgb(70, 70, 70);\n}\n.project-name-input:focus {\n    background-color: rgba(0, 0, 0, 0.04);\n    outline: 2px solid rgb(70, 70, 70);\n}\n.project-name-input:focus:invalid,\n.project-name-input:not(:placeholder-shown):invalid,\n.project-name-input.name-taken {\n    outline-color: red;\n    background-color: rgba(255, 106, 106, 0.18);\n    border-color: red;\n}\n.project-name-label {\n    position: relative;\n}\n.project-name-label::before {\n    font-family: var(--nunito-font-family);\n    position: absolute;\n    font-size: 0.7rem;\n    font-weight: normal;\n    white-space: nowrap;\n    color: transparent;\n    content: attr(help);\n    top: 2.7rem;\n    left: 2.0rem;\n}\n.project-name-input:not(:placeholder-shown).name-taken + .project-name-label::before {\n    color: red;\n}\n\n.to-do-list-container {\n    display: grid;\n    justify-content: center;\n    grid-template-rows: auto 1fr auto;\n    grid-template-columns: minmax(900px, 1280px);\n    gap: 20px;\n}\n\n.project-buttons-container {\n    display: grid;\n    grid-template-columns: auto 1fr repeat(3, auto);\n    gap: 10px;\n    height: 2.4rem; /* Set manual height so sort drop-down menu will overflow vertically while retaining horizontal position */\n}\n\n.project-buttons-container > button {\n    font-size: 1.4rem;\n    text-align: center;\n    width: 2.4rem;\n    height: 2.4rem;\n    border: none;\n    border-radius: 9999px;\n    color: rgb(122, 122, 122);\n    background-color: #ffffff;\n}\n\n.project-buttons-return-to-list:hover {\n    color: rgb(236, 236, 236);\n    background-color: #3ea4d3;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-return-to-list:active {\n    color: rgb(236, 236, 236);\n    background-color: #2082af;\n}\n.project-buttons-new-to-do-item:hover {\n    color: rgb(236, 236, 236);\n    background-color: #47d147;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-new-to-do-item:active {\n    color: rgb(236, 236, 236);\n    background-color: #22ad22;\n}\n.project-buttons-sort-to-do-items:hover {\n    color: rgb(236, 236, 236);\n    background-color: #ecc825;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-sort-to-do-items:active {\n    color: rgb(236, 236, 236);\n    background-color: #d1af15;\n}\n.project-buttons-refresh-to-do-items:hover {\n    color: rgb(236, 236, 236);\n    background-color: #fa8bde;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-refresh-to-do-items:active {\n    color: rgb(236, 236, 236);\n    background-color: #d64ab3;\n}\n.project-buttons-save-project:hover {\n    color: rgb(236, 236, 236);\n    background-color: #907ef5;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-save-project:active {\n    color: rgb(236, 236, 236);\n    background-color: #5f46ee;\n}\n\n.project-buttons-sort-to-do-items,\n.to-do-items-sort-menu {\n    grid-area: 1 / 5 / 2 / 6;\n}\n.to-do-items-sort-menu {\n    display: none;\n}\n.to-do-items-sort-menu.open {\n    display: grid;\n    grid-template-rows: auto;\n    font-family: var(--nunito-font-family);     \n    font-size: 1.1rem;\n    font-weight: bold;\n    text-align: center;                        \n    border-radius: 1rem;\n    background-color: white;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    padding: 0.5rem 0.7rem;\n    z-index: 1;\n}\n.to-do-items-sort-menu-order-list {\n    display: grid;\n    grid-template-rows: auto;\n    gap: 0.1rem;\n}\n.to-do-items-sort-menu-order-list-item.not-sorting {\n    display: none;\n}\n.to-do-items-sort-menu-order-list-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-family: var(--nunito-font-family);                            \n    font-size: 0.7rem;\n    outline: none;\n    border: none;\n    border-radius: 9999px;\n    background-color: rgb(219, 219, 219);\n    padding: 0.1rem 0.3rem;\n}\n.to-do-items-sort-menu-order-list-item-remove-button {\n    font-size: 0.7rem;\n    font-weight: bold;\n    color: white;\n    background-color: #6e6e6e;\n    outline: none;\n    border: none;\n    border-radius: 9999px;\n    width: 0.8rem;\n    height: 0.8rem;\n    padding: 0px;\n}\n.to-do-items-sort-menu-order-list-item-remove-button:hover {\n    background-color: #f54e4e;\n}\n.to-do-items-sort-menu-order-list-item-remove-button:active {\n    background-color: #c51717;\n}\n.to-do-items-sort-menu-separator {\n    justify-self: center;\n    border-radius: 9999px;\n    width: 104%;\n    height: 2px;\n    background-color: #dadada;\n    margin-bottom: 4px;\n}\n.to-do-items-sort-menu-options {\n    display: grid;\n    grid-template-rows: auto;\n}\n.to-do-items-sort-menu-group {\n    font-family: var(--nunito-font-family);                            \n    font-size: 0.7rem;\n    text-align: center;\n    font-weight: bold;\n    text-decoration: underline;\n    padding-top: 0.4rem;\n}\n.to-do-items-sort-menu-type {\n    font-family: var(--nunito-font-family);                            \n    font-size: 0.8rem;\n    text-align: center;\n    outline: none;\n    border: none;\n    border-radius: 9999px;\n    background-color: transparent;\n    padding: 0.1rem 0.5rem;\n}\n.to-do-items-sort-menu-type.current-sort {\n    background-color: #df9d24;\n}\n.to-do-items-sort-menu-type:hover {\n    background-color: #ecc825;\n}\n.to-do-items-sort-menu-type:active {\n    background-color: #d1af15;\n}\n\n.project-to-do-items-container {\n    display: grid;\n    grid-template-rows: auto;\n    align-content: start;\n    gap: 10px;\n}\n\n.to-do-item-prompt {\n    text-align: center;\n    outline: 2px dashed #6d6d6d;\n    padding: 0.4rem 0.4rem;\n}\n\n.to-do-item {\n    display: grid;\n    grid-template-rows: auto;\n    grid-template-columns: auto 1fr;\n    gap: 0.4rem 0.4rem;\n}\n\n.overdue > .to-do-item-top-bar-information,\n.overdue > .to-do-item-expanded-information {\n    background-color: #fce1e1;\n}\n.to-do-item.newly-created-item > .to-do-item-top-bar-information,\n.to-do-item.newly-created-item > .to-do-item-expanded-information {\n    background-color: #e1f3c4;\n}\n.completed-item > .to-do-item-top-bar-information,\n.completed-item > .to-do-item-expanded-information {\n    background-color: #eeeeee;\n}\n\n.to-do-item-expand-collapse-button,\n.to-do-item-confirm-button {\n    grid-area: 1 / 1 / 2 / 2;\n}\n.to-do-item-completed-item-button {\n    grid-area: 2 / 1 / 3 / 2;\n}\n.to-do-item-delete-button {\n    grid-area: 3 / 1 / 4 / 2;\n}\n.to-do-item-expand-collapse-button,\n.to-do-item-confirm-button,\n.to-do-item-completed-item-button,\n.to-do-item-delete-button {\n    font-size: 1.9rem;\n    width: 2.4rem;\n    height: 2.4rem;\n    border: none;\n    color: rgb(160, 160, 160);\n    background-color: #ffffff;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    margin: 0px;\n    padding: 0px;\n}\n.to-do-item-expand-collapse-button:hover,\n.to-do-item-confirm-button:hover,\n.to-do-item-completed-item-button:hover,\n.to-do-item-delete-button:hover {\n    color: rgb(146, 146, 146);\n    background-color: #eeeeee;\n}\n.to-do-item-expand-collapse-button:active,\n.to-do-item-confirm-button:active,\n.to-do-item-completed-item-button:active,\n.to-do-item-delete-button:active {\n    color: rgb(110, 110, 110);\n    background-color: #cfcfcf;\n}\n\n.to-do-item-top-bar-information {\n    grid-area: 1 / 2 / 2 / -1;\n    align-items: center;\n    display: grid;\n    grid-template-columns: 1fr repeat(3, auto);\n    background-color: #ffffff;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    height: 2.4rem;\n    gap: 10px;\n    padding: 0.0rem 0.4rem;\n}\n\n.to-do-item-edit-name {\n    color: rgb(122, 122, 122);\n    align-self: center;\n    vertical-align: middle;\n    width: 100%;\n    height: 1.7rem;\n    line-height: 1.7rem;\n}\n\n.to-do-item-name {\n    vertical-align: middle;\n    font-family: var(--nunito-font-family);\n    font-size: 1.2rem;\n    color: rgb(50, 50, 50);\n    background-color: transparent;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    border: none;\n    border-radius: 0.2rem;\n    width: min(500px, calc(100% - 2rem));\n    margin-left: 0.3rem;\n}\n.to-do-item-name:hover {\n    outline: 1px solid rgb(128, 128, 128);\n}\n.to-do-item-name:focus {\n    outline: 2px solid rgb(70, 70, 70);\n}\n.to-do-item-name:placeholder-shown {\n    font-size: 0.9rem;\n}\n\n.to-do-item-due-date {\n    grid-area: 1 / 2 / 2 / 3;\n    justify-self: end;\n    text-align: right;\n    font-size: 0.8rem;\n    font-weight: normal;\n    color: rgb(70, 70, 70);\n    white-space: nowrap;\n}\n::-webkit-datetime-edit {\n    display: none;\n}\n::-webkit-calendar-picker-indicator {\n    font-size: 1rem;\n    appearance: none;\n    border: none;\n    outline: none;\n    padding: 0px;\n    margin: 0px;\n}\n.to-do-item-due-date-picker {\n    grid-area: 1 / 3 / 2 / 4;\n    border: none;\n    outline: none;\n    padding: 0.1rem;\n    margin: 0px;\n    background-color: transparent;\n}\n.to-do-item-due-date-picker:hover {\n    outline: 1px solid rgb(128, 128, 128);\n    border-radius: 0.2rem;\n}\n.to-do-item-due-date-picker:focus {\n    outline: 2px solid rgb(70, 70, 70);\n    border-radius: 0.2rem;\n}\n\n.to-do-item-priority {\n    grid-area: 1 / 4 / 2 / 5;\n    justify-self: end;\n    display: flex;\n    flex-wrap: nowrap;\n}\n.to-do-item-priority-star {\n    color: rgb(70, 70, 70);\n    font-size: 1.0rem;\n}\n/* Using sibling selectors to access all 5 priority stars */\n.to-do-item-priority:not(:hover) .to-do-item-priority-star-on,\n.to-do-item-priority-star:hover,\n.to-do-item-priority-star:hover + .to-do-item-priority-star,\n.to-do-item-priority-star:hover + .to-do-item-priority-star + .to-do-item-priority-star,\n.to-do-item-priority-star:hover + .to-do-item-priority-star + .to-do-item-priority-star + .to-do-item-priority-star,\n.to-do-item-priority-star:hover + .to-do-item-priority-star + .to-do-item-priority-star + .to-do-item-priority-star + .to-do-item-priority-star {\n    color: rgb(255, 202, 56);\n}\n\n.to-do-item-expanded-information {\n    margin-top: -0.4rem;\n    grid-area: 2 / 2 / 5 / -1;\n    display: grid;\n    grid-template-rows: auto 1fr;\n    grid-template-columns: repeat(2, 1fr);\n    background-color: #ffffff;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    padding: 0.0rem 0.4rem 0.4rem 0.4rem;\n    gap: 0.5rem;\n}\n\n.to-do-item-description {\n    grid-area: 1 / 1 / 2 / 3;\n    display: block;\n}\n.to-do-item-description-label {\n    display: flex;\n    font-size: 0.85rem;\n    color: rgb(122, 122, 122);\n    gap: 0.3rem;\n}\n.to-do-item-description-input {\n    resize: none;\n    font-family: var(--nunito-font-family);\n    font-size: 0.8rem;\n    font-style: italic;\n    color: rgb(50, 50, 50);\n    background-color: transparent;\n    border: none;\n    border-radius: 0.2rem;\n    width: 100%;\n}\n.to-do-item-description-input:hover {\n    outline: 1px solid rgb(128, 128, 128);\n    border-radius: 0.2rem;\n}\n.to-do-item-description-input:focus {\n    outline: 2px solid rgb(70, 70, 70);\n    border-radius: 0.2rem;\n}\n\n.to-do-item-notes::before {\n    content: "Notes";\n}.to-do-item-checklist::before {\n    content: "Checklist";\n}\n.to-do-item-notes::before,\n.to-do-item-checklist::before {\n    font-size: 0.8rem;\n    color: rgb(66, 66, 66);\n}\n.to-do-item-notes {\n    grid-area: 2 / 1 / 3 / 2;\n}\n.to-do-item-checklist {\n    grid-area: 2 / 2 / 3 / 3;\n}\n.to-do-item-notes,\n.to-do-item-checklist {\n    display: grid;\n    grid-template-rows: repeat(2, auto);\n    align-self: start;\n}\n.to-do-item-notes-list,\n.to-do-item-checklist-list {\n    display: grid;\n    grid-template-rows: auto;\n    list-style: none;\n    padding: 0px;\n    margin: 0px;\n}\n.to-do-item-notes-list-item {\n    grid-template-columns: 1fr auto;\n}\n.to-do-item-checklist-list-item {\n    grid-template-columns: auto 1fr auto;\n}\n.to-do-item-notes-list-item,\n.to-do-item-checklist-list-item {\n    display: grid;\n    gap: 0.2rem;\n    margin-bottom: 0.3rem;\n}\n.to-do-item-checklist-list-item-checkbox {\n    appearance: none;\n    align-self: center;\n    outline: 1px solid rgb(180, 180, 180);\n    border: none;\n    border-radius: 0.2rem;\n    width: 1rem;\n    height: 1rem;\n}\n.to-do-item-checklist-list-item-checkbox:hover:not(:checked) {\n    outline: 1px solid rgb(114, 114, 114);\n}\n.to-do-item-checklist-list-item-checkbox:checked {\n    outline: none;\n    background-color: #47d147;\n}\n.to-do-item-checklist-list-item-checkbox:hover:checked {\n    outline: 1px solid rgb(70, 70, 70);\n    background-color: #47d147;\n}\n.to-do-item-checklist-list-item-checkbox:active:not(:checked),\n.to-do-item-checklist-list-item-checkbox:active:checked {\n    outline: 2px solid rgb(70, 70, 70);\n    background-color: #47d147;\n}\n.to-do-item-notes-list-item-input,\n.to-do-item-checklist-list-item-input {\n    resize: none;\n    font-family: var(--nunito-font-family);\n    font-size: 0.8rem;\n    color: rgb(50, 50, 50);\n    background-color: transparent;\n    outline: 1px solid rgb(180, 180, 180);\n    border: none;\n    border-radius: 0.2rem;\n    color: rgb(50, 50, 50);\n}\n.to-do-item-notes-list-item-input:hover,\n.to-do-item-checklist-list-item-input:hover {\n    outline: 1px solid rgb(114, 114, 114);\n    border-radius: 0.2rem;\n}\n.to-do-item-notes-list-item-input:focus,\n.to-do-item-checklist-list-item-input:focus {\n    outline: 2px solid rgb(70, 70, 70);\n    border-radius: 0.2rem;\n}\n.to-do-item-notes-list-item-input:placeholder-shown,\n.to-do-item-checklist-list-item-input:placeholder-shown {\n    font-style: italic;\n}\n.to-do-item-checklist-list-item-checkbox:checked + .to-do-item-checklist-list-item-input {\n    background-color: rgba(98, 223, 49, 0.15);\n}\n.to-do-item-notes-list-item-delete-button,\n.to-do-item-checklist-list-item-delete-button {\n    align-self: center;\n    color: rgb(66, 66, 66);\n    background-color: transparent;\n    font-size: 0.8rem;\n    font-weight: normal;\n    outline: 1px solid rgb(180, 180, 180);\n    border: none;\n    border-radius: 0.2rem;\n    width: 1rem;\n    height: 1rem;\n    padding: 0px;\n}\n.to-do-item-notes-list-item-delete-button:hover,\n.to-do-item-checklist-list-item-delete-button:hover {\n    color: rgb(236, 236, 236);\n    background-color: #f54e4e;\n    outline: none;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.to-do-item-notes-list-item-delete-button:active,\n.to-do-item-checklist-list-item-delete-button:active {\n    color: rgb(236, 236, 236);\n    background-color: #c51717;\n}\n.to-do-item-notes-new-note-button,\n.to-do-item-checklist-new-checklist-item-button {\n    color: rgb(66, 66, 66);\n    background-color: transparent;\n    font-size: 0.8rem;\n    font-weight: normal;\n    outline: 1px solid rgb(180, 180, 180);\n    border: none;\n    border-radius: 0.2rem;\n    height: 1.2rem;\n}\n.to-do-item-notes-new-note-button:hover,\n.to-do-item-checklist-new-checklist-item-button:hover {\n    color: rgb(236, 236, 236);\n    background-color: #47d147;\n    outline: none;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.to-do-item-notes-new-note-button:active,\n.to-do-item-checklist-new-checklist-item-button:active {\n    color: rgb(236, 236, 236);\n    background-color: #22ad22;\n}\n',"",{version:3,sources:["webpack://./src/styles/styles-tab-project.lazy.css"],names:[],mappings:"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",sourcesContent:['.header {\n    display: flex;\n    flex-direction: row-reverse;\n    justify-content: center;\n}\n\n.project-name-label {\n    font-size: 1.8rem;\n    align-self: center;\n}\n.project-name-label::before {\n    position: absolute;\n    font-size: 0.6rem;\n    white-space: nowrap;\n    color: transparent;\n    content: attr(help);\n    font-weight: normal;\n    top: 1.4rem;\n}\n.project-name-input {\n    text-align: center;\n    vertical-align: middle;\n    font-family: var(--nunito-font-family);\n    font-size: 1.2rem;\n    color: rgb(50, 50, 50);\n    background-color: transparent;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    outline: 1px solid rgb(70, 70, 70);\n    border: none;\n    border-radius: 0.2rem;\n    width: min(500px, calc(100% - 2rem));\n    margin-left: 0.3rem;\n}\n.project-name-input:hover {\n    outline: 2px solid rgb(70, 70, 70);\n}\n.project-name-input:focus {\n    background-color: rgba(0, 0, 0, 0.04);\n    outline: 2px solid rgb(70, 70, 70);\n}\n.project-name-input:focus:invalid,\n.project-name-input:not(:placeholder-shown):invalid,\n.project-name-input.name-taken {\n    outline-color: red;\n    background-color: rgba(255, 106, 106, 0.18);\n    border-color: red;\n}\n.project-name-label {\n    position: relative;\n}\n.project-name-label::before {\n    font-family: var(--nunito-font-family);\n    position: absolute;\n    font-size: 0.7rem;\n    font-weight: normal;\n    white-space: nowrap;\n    color: transparent;\n    content: attr(help);\n    top: 2.7rem;\n    left: 2.0rem;\n}\n.project-name-input:not(:placeholder-shown).name-taken + .project-name-label::before {\n    color: red;\n}\n\n.to-do-list-container {\n    display: grid;\n    justify-content: center;\n    grid-template-rows: auto 1fr auto;\n    grid-template-columns: minmax(900px, 1280px);\n    gap: 20px;\n}\n\n.project-buttons-container {\n    display: grid;\n    grid-template-columns: auto 1fr repeat(3, auto);\n    gap: 10px;\n    height: 2.4rem; /* Set manual height so sort drop-down menu will overflow vertically while retaining horizontal position */\n}\n\n.project-buttons-container > button {\n    font-size: 1.4rem;\n    text-align: center;\n    width: 2.4rem;\n    height: 2.4rem;\n    border: none;\n    border-radius: 9999px;\n    color: rgb(122, 122, 122);\n    background-color: #ffffff;\n}\n\n.project-buttons-return-to-list:hover {\n    color: rgb(236, 236, 236);\n    background-color: #3ea4d3;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-return-to-list:active {\n    color: rgb(236, 236, 236);\n    background-color: #2082af;\n}\n.project-buttons-new-to-do-item:hover {\n    color: rgb(236, 236, 236);\n    background-color: #47d147;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-new-to-do-item:active {\n    color: rgb(236, 236, 236);\n    background-color: #22ad22;\n}\n.project-buttons-sort-to-do-items:hover {\n    color: rgb(236, 236, 236);\n    background-color: #ecc825;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-sort-to-do-items:active {\n    color: rgb(236, 236, 236);\n    background-color: #d1af15;\n}\n.project-buttons-refresh-to-do-items:hover {\n    color: rgb(236, 236, 236);\n    background-color: #fa8bde;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-refresh-to-do-items:active {\n    color: rgb(236, 236, 236);\n    background-color: #d64ab3;\n}\n.project-buttons-save-project:hover {\n    color: rgb(236, 236, 236);\n    background-color: #907ef5;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-save-project:active {\n    color: rgb(236, 236, 236);\n    background-color: #5f46ee;\n}\n\n.project-buttons-sort-to-do-items,\n.to-do-items-sort-menu {\n    grid-area: 1 / 5 / 2 / 6;\n}\n.to-do-items-sort-menu {\n    display: none;\n}\n.to-do-items-sort-menu.open {\n    display: grid;\n    grid-template-rows: auto;\n    font-family: var(--nunito-font-family);     \n    font-size: 1.1rem;\n    font-weight: bold;\n    text-align: center;                        \n    border-radius: 1rem;\n    background-color: white;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    padding: 0.5rem 0.7rem;\n    z-index: 1;\n}\n.to-do-items-sort-menu-order-list {\n    display: grid;\n    grid-template-rows: auto;\n    gap: 0.1rem;\n}\n.to-do-items-sort-menu-order-list-item.not-sorting {\n    display: none;\n}\n.to-do-items-sort-menu-order-list-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-family: var(--nunito-font-family);                            \n    font-size: 0.7rem;\n    outline: none;\n    border: none;\n    border-radius: 9999px;\n    background-color: rgb(219, 219, 219);\n    padding: 0.1rem 0.3rem;\n}\n.to-do-items-sort-menu-order-list-item-remove-button {\n    font-size: 0.7rem;\n    font-weight: bold;\n    color: white;\n    background-color: #6e6e6e;\n    outline: none;\n    border: none;\n    border-radius: 9999px;\n    width: 0.8rem;\n    height: 0.8rem;\n    padding: 0px;\n}\n.to-do-items-sort-menu-order-list-item-remove-button:hover {\n    background-color: #f54e4e;\n}\n.to-do-items-sort-menu-order-list-item-remove-button:active {\n    background-color: #c51717;\n}\n.to-do-items-sort-menu-separator {\n    justify-self: center;\n    border-radius: 9999px;\n    width: 104%;\n    height: 2px;\n    background-color: #dadada;\n    margin-bottom: 4px;\n}\n.to-do-items-sort-menu-options {\n    display: grid;\n    grid-template-rows: auto;\n}\n.to-do-items-sort-menu-group {\n    font-family: var(--nunito-font-family);                            \n    font-size: 0.7rem;\n    text-align: center;\n    font-weight: bold;\n    text-decoration: underline;\n    padding-top: 0.4rem;\n}\n.to-do-items-sort-menu-type {\n    font-family: var(--nunito-font-family);                            \n    font-size: 0.8rem;\n    text-align: center;\n    outline: none;\n    border: none;\n    border-radius: 9999px;\n    background-color: transparent;\n    padding: 0.1rem 0.5rem;\n}\n.to-do-items-sort-menu-type.current-sort {\n    background-color: #df9d24;\n}\n.to-do-items-sort-menu-type:hover {\n    background-color: #ecc825;\n}\n.to-do-items-sort-menu-type:active {\n    background-color: #d1af15;\n}\n\n.project-to-do-items-container {\n    display: grid;\n    grid-template-rows: auto;\n    align-content: start;\n    gap: 10px;\n}\n\n.to-do-item-prompt {\n    text-align: center;\n    outline: 2px dashed #6d6d6d;\n    padding: 0.4rem 0.4rem;\n}\n\n.to-do-item {\n    display: grid;\n    grid-template-rows: auto;\n    grid-template-columns: auto 1fr;\n    gap: 0.4rem 0.4rem;\n}\n\n.overdue > .to-do-item-top-bar-information,\n.overdue > .to-do-item-expanded-information {\n    background-color: #fce1e1;\n}\n.to-do-item.newly-created-item > .to-do-item-top-bar-information,\n.to-do-item.newly-created-item > .to-do-item-expanded-information {\n    background-color: #e1f3c4;\n}\n.completed-item > .to-do-item-top-bar-information,\n.completed-item > .to-do-item-expanded-information {\n    background-color: #eeeeee;\n}\n\n.to-do-item-expand-collapse-button,\n.to-do-item-confirm-button {\n    grid-area: 1 / 1 / 2 / 2;\n}\n.to-do-item-completed-item-button {\n    grid-area: 2 / 1 / 3 / 2;\n}\n.to-do-item-delete-button {\n    grid-area: 3 / 1 / 4 / 2;\n}\n.to-do-item-expand-collapse-button,\n.to-do-item-confirm-button,\n.to-do-item-completed-item-button,\n.to-do-item-delete-button {\n    font-size: 1.9rem;\n    width: 2.4rem;\n    height: 2.4rem;\n    border: none;\n    color: rgb(160, 160, 160);\n    background-color: #ffffff;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    margin: 0px;\n    padding: 0px;\n}\n.to-do-item-expand-collapse-button:hover,\n.to-do-item-confirm-button:hover,\n.to-do-item-completed-item-button:hover,\n.to-do-item-delete-button:hover {\n    color: rgb(146, 146, 146);\n    background-color: #eeeeee;\n}\n.to-do-item-expand-collapse-button:active,\n.to-do-item-confirm-button:active,\n.to-do-item-completed-item-button:active,\n.to-do-item-delete-button:active {\n    color: rgb(110, 110, 110);\n    background-color: #cfcfcf;\n}\n\n.to-do-item-top-bar-information {\n    grid-area: 1 / 2 / 2 / -1;\n    align-items: center;\n    display: grid;\n    grid-template-columns: 1fr repeat(3, auto);\n    background-color: #ffffff;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    height: 2.4rem;\n    gap: 10px;\n    padding: 0.0rem 0.4rem;\n}\n\n.to-do-item-edit-name {\n    color: rgb(122, 122, 122);\n    align-self: center;\n    vertical-align: middle;\n    width: 100%;\n    height: 1.7rem;\n    line-height: 1.7rem;\n}\n\n.to-do-item-name {\n    vertical-align: middle;\n    font-family: var(--nunito-font-family);\n    font-size: 1.2rem;\n    color: rgb(50, 50, 50);\n    background-color: transparent;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    border: none;\n    border-radius: 0.2rem;\n    width: min(500px, calc(100% - 2rem));\n    margin-left: 0.3rem;\n}\n.to-do-item-name:hover {\n    outline: 1px solid rgb(128, 128, 128);\n}\n.to-do-item-name:focus {\n    outline: 2px solid rgb(70, 70, 70);\n}\n.to-do-item-name:placeholder-shown {\n    font-size: 0.9rem;\n}\n\n.to-do-item-due-date {\n    grid-area: 1 / 2 / 2 / 3;\n    justify-self: end;\n    text-align: right;\n    font-size: 0.8rem;\n    font-weight: normal;\n    color: rgb(70, 70, 70);\n    white-space: nowrap;\n}\n::-webkit-datetime-edit {\n    display: none;\n}\n::-webkit-calendar-picker-indicator {\n    font-size: 1rem;\n    appearance: none;\n    border: none;\n    outline: none;\n    padding: 0px;\n    margin: 0px;\n}\n.to-do-item-due-date-picker {\n    grid-area: 1 / 3 / 2 / 4;\n    border: none;\n    outline: none;\n    padding: 0.1rem;\n    margin: 0px;\n    background-color: transparent;\n}\n.to-do-item-due-date-picker:hover {\n    outline: 1px solid rgb(128, 128, 128);\n    border-radius: 0.2rem;\n}\n.to-do-item-due-date-picker:focus {\n    outline: 2px solid rgb(70, 70, 70);\n    border-radius: 0.2rem;\n}\n\n.to-do-item-priority {\n    grid-area: 1 / 4 / 2 / 5;\n    justify-self: end;\n    display: flex;\n    flex-wrap: nowrap;\n}\n.to-do-item-priority-star {\n    color: rgb(70, 70, 70);\n    font-size: 1.0rem;\n}\n/* Using sibling selectors to access all 5 priority stars */\n.to-do-item-priority:not(:hover) .to-do-item-priority-star-on,\n.to-do-item-priority-star:hover,\n.to-do-item-priority-star:hover + .to-do-item-priority-star,\n.to-do-item-priority-star:hover + .to-do-item-priority-star + .to-do-item-priority-star,\n.to-do-item-priority-star:hover + .to-do-item-priority-star + .to-do-item-priority-star + .to-do-item-priority-star,\n.to-do-item-priority-star:hover + .to-do-item-priority-star + .to-do-item-priority-star + .to-do-item-priority-star + .to-do-item-priority-star {\n    color: rgb(255, 202, 56);\n}\n\n.to-do-item-expanded-information {\n    margin-top: -0.4rem;\n    grid-area: 2 / 2 / 5 / -1;\n    display: grid;\n    grid-template-rows: auto 1fr;\n    grid-template-columns: repeat(2, 1fr);\n    background-color: #ffffff;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    padding: 0.0rem 0.4rem 0.4rem 0.4rem;\n    gap: 0.5rem;\n}\n\n.to-do-item-description {\n    grid-area: 1 / 1 / 2 / 3;\n    display: block;\n}\n.to-do-item-description-label {\n    display: flex;\n    font-size: 0.85rem;\n    color: rgb(122, 122, 122);\n    gap: 0.3rem;\n}\n.to-do-item-description-input {\n    resize: none;\n    font-family: var(--nunito-font-family);\n    font-size: 0.8rem;\n    font-style: italic;\n    color: rgb(50, 50, 50);\n    background-color: transparent;\n    border: none;\n    border-radius: 0.2rem;\n    width: 100%;\n}\n.to-do-item-description-input:hover {\n    outline: 1px solid rgb(128, 128, 128);\n    border-radius: 0.2rem;\n}\n.to-do-item-description-input:focus {\n    outline: 2px solid rgb(70, 70, 70);\n    border-radius: 0.2rem;\n}\n\n.to-do-item-notes::before {\n    content: "Notes";\n}.to-do-item-checklist::before {\n    content: "Checklist";\n}\n.to-do-item-notes::before,\n.to-do-item-checklist::before {\n    font-size: 0.8rem;\n    color: rgb(66, 66, 66);\n}\n.to-do-item-notes {\n    grid-area: 2 / 1 / 3 / 2;\n}\n.to-do-item-checklist {\n    grid-area: 2 / 2 / 3 / 3;\n}\n.to-do-item-notes,\n.to-do-item-checklist {\n    display: grid;\n    grid-template-rows: repeat(2, auto);\n    align-self: start;\n}\n.to-do-item-notes-list,\n.to-do-item-checklist-list {\n    display: grid;\n    grid-template-rows: auto;\n    list-style: none;\n    padding: 0px;\n    margin: 0px;\n}\n.to-do-item-notes-list-item {\n    grid-template-columns: 1fr auto;\n}\n.to-do-item-checklist-list-item {\n    grid-template-columns: auto 1fr auto;\n}\n.to-do-item-notes-list-item,\n.to-do-item-checklist-list-item {\n    display: grid;\n    gap: 0.2rem;\n    margin-bottom: 0.3rem;\n}\n.to-do-item-checklist-list-item-checkbox {\n    appearance: none;\n    align-self: center;\n    outline: 1px solid rgb(180, 180, 180);\n    border: none;\n    border-radius: 0.2rem;\n    width: 1rem;\n    height: 1rem;\n}\n.to-do-item-checklist-list-item-checkbox:hover:not(:checked) {\n    outline: 1px solid rgb(114, 114, 114);\n}\n.to-do-item-checklist-list-item-checkbox:checked {\n    outline: none;\n    background-color: #47d147;\n}\n.to-do-item-checklist-list-item-checkbox:hover:checked {\n    outline: 1px solid rgb(70, 70, 70);\n    background-color: #47d147;\n}\n.to-do-item-checklist-list-item-checkbox:active:not(:checked),\n.to-do-item-checklist-list-item-checkbox:active:checked {\n    outline: 2px solid rgb(70, 70, 70);\n    background-color: #47d147;\n}\n.to-do-item-notes-list-item-input,\n.to-do-item-checklist-list-item-input {\n    resize: none;\n    font-family: var(--nunito-font-family);\n    font-size: 0.8rem;\n    color: rgb(50, 50, 50);\n    background-color: transparent;\n    outline: 1px solid rgb(180, 180, 180);\n    border: none;\n    border-radius: 0.2rem;\n    color: rgb(50, 50, 50);\n}\n.to-do-item-notes-list-item-input:hover,\n.to-do-item-checklist-list-item-input:hover {\n    outline: 1px solid rgb(114, 114, 114);\n    border-radius: 0.2rem;\n}\n.to-do-item-notes-list-item-input:focus,\n.to-do-item-checklist-list-item-input:focus {\n    outline: 2px solid rgb(70, 70, 70);\n    border-radius: 0.2rem;\n}\n.to-do-item-notes-list-item-input:placeholder-shown,\n.to-do-item-checklist-list-item-input:placeholder-shown {\n    font-style: italic;\n}\n.to-do-item-checklist-list-item-checkbox:checked + .to-do-item-checklist-list-item-input {\n    background-color: rgba(98, 223, 49, 0.15);\n}\n.to-do-item-notes-list-item-delete-button,\n.to-do-item-checklist-list-item-delete-button {\n    align-self: center;\n    color: rgb(66, 66, 66);\n    background-color: transparent;\n    font-size: 0.8rem;\n    font-weight: normal;\n    outline: 1px solid rgb(180, 180, 180);\n    border: none;\n    border-radius: 0.2rem;\n    width: 1rem;\n    height: 1rem;\n    padding: 0px;\n}\n.to-do-item-notes-list-item-delete-button:hover,\n.to-do-item-checklist-list-item-delete-button:hover {\n    color: rgb(236, 236, 236);\n    background-color: #f54e4e;\n    outline: none;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.to-do-item-notes-list-item-delete-button:active,\n.to-do-item-checklist-list-item-delete-button:active {\n    color: rgb(236, 236, 236);\n    background-color: #c51717;\n}\n.to-do-item-notes-new-note-button,\n.to-do-item-checklist-new-checklist-item-button {\n    color: rgb(66, 66, 66);\n    background-color: transparent;\n    font-size: 0.8rem;\n    font-weight: normal;\n    outline: 1px solid rgb(180, 180, 180);\n    border: none;\n    border-radius: 0.2rem;\n    height: 1.2rem;\n}\n.to-do-item-notes-new-note-button:hover,\n.to-do-item-checklist-new-checklist-item-button:hover {\n    color: rgb(236, 236, 236);\n    background-color: #47d147;\n    outline: none;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.to-do-item-notes-new-note-button:active,\n.to-do-item-checklist-new-checklist-item-button:active {\n    color: rgb(236, 236, 236);\n    background-color: #22ad22;\n}\n'],sourceRoot:""}]);const s=a},806:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(537),r=n.n(o),i=n(645),a=n.n(i)()(r());a.push([e.id,".header {\n    display: flex;\n    justify-content: center;\n}\n\n.title {\n    align-self: center;\n    font-size: 1.7rem;\n    font-weight: bold;\n    white-space: nowrap;\n}\n\n.content .project-container {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 240px);\n    justify-content: center;\n    align-content: start;\n    gap: 20px;\n    padding: 20px;\n}\n\n.content .project-panel,\n.content .new-project-panel {\n    display: grid;\n    grid-template-rows: 1fr repeat(2, auto);\n    text-align: center;\n    border-radius: 0.6rem;\n    height: 280px;\n    padding: 16px 18px 14px 18px;\n    gap: 6px;\n}\n.content .project-panel {\n    outline: 1px solid #6d6d6d;\n    grid-template-rows: 1fr repeat(2, auto);\n    background-image: linear-gradient(180deg, rgb(30, 148, 216), rgb(30, 148, 216) 8px, rgb(255, 255, 255) 8px);\n}\n.content .new-project-panel {\n    grid-template-rows: auto 1fr;\n    background-color: transparent;\n    outline: 2px dashed #6d6d6d;\n}\n.content .project-panel:hover {\n    background-image: linear-gradient(180deg, rgb(30, 148, 216), rgb(30, 148, 216) 8px, rgb(255, 255, 255) 8px);\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.content .new-project-panel:hover {\n    outline: 2px dashed #080808;\n}\n.content .new-project-panel:active {\n    background-color: rgba(128, 128, 128, 0.07);\n}\n.content .new-project-panel-name,\n.content .project-panel-name {\n    font-size: 1.4rem;\n}\n.content .project-panel-number-of-items {\n    font-size: 0.6rem;\n}\n.content .project-panel-date-created {\n    font-size: 0.8rem;\n}\n.content .new-project-panel-plus {\n    align-self: center;\n    color: rgb(46, 46, 46);\n    font-size: 5rem;\n    font-weight: normal;\n}\n.content .project-panel-separator {\n    justify-self: center;\n    border-radius: 9999px;\n    width: 104%;\n    height: 2px;\n    background-color: #dadada;\n    margin-bottom: 6px;\n}\n.content .project-panel-buttons-container {\n    display: flex;\n    justify-content: space-between;\n    flex-wrap: wrap;\n    gap: 6px;\n}\n.content .project-panel-buttons-edit,\n.content .project-panel-buttons-delete {\n    width: 40px;\n    height: 40px;\n    border: none;\n    border-radius: 9999px;\n    color: white;\n    text-align: center;\n}\n.content .project-panel-buttons-edit {\n    background-color: #31c22c;\n}\n.content .project-panel-buttons-edit:hover {\n    background-color: #4bdb46;\n}\n.content .project-panel-buttons-edit:active {\n    background-color: #23aa1f;\n}\n.content .project-panel-buttons-delete {\n    background-color: #e73333;\n}\n.content .project-panel-buttons-delete:hover {\n    background-color: #f54e4e;\n}\n.content .project-panel-buttons-delete:active {\n    background-color: #c51717;\n}\n\n.new-project-form-cover {\n    display: grid;\n    place-content: center;\n    position: fixed;\n    top: 0px;\n    left: 0px;\n    width: 100vw;\n    height: 100vh;\n    background-color: rgba(0, 0, 0, 0.6);\n}\n\n.new-project-form {\n    display: grid;\n    grid-template-rows: auto;\n    border-radius: 1.2rem;\n    background-color: #fff;\n    padding: 14px;\n    gap: 10px;\n}\n\n.new-project-form-close-button,\n.new-project-form-create-project-button {\n    width: 30px;\n    height: 30px;\n    border: none;\n    border-radius: 9999px;\n    color: white;\n    text-align: center;\n    font-size: 1rem;\n    padding: 0px;\n}\n.new-project-form-close-button {\n    justify-self: end;\n    background-color: #e73333;\n    margin-bottom: 1rem;\n}\n.new-project-form-close-button:hover {\n    background-color: #f54e4e;\n}\n.new-project-form-close-button:active {\n    background-color: #c51717;\n}\n.new-project-form-create-project-button {\n    justify-self: center;\n    background-color: #31c22c;\n    margin-top: 1rem;\n}\n.new-project-form-create-project-button:hover {\n    background-color: #4bdb46;\n}\n.new-project-form-create-project-button:active {\n    background-color: #23aa1f;\n}\n\n.new-project-form > li {\n    display: flex;\n    justify-content: space-between;\n    flex-direction: row-reverse;\n    gap: 10px;\n}\n.new-project-form > li > input[required]:valid {\n    outline-color: rgb(31, 187, 0);\n    background-color: rgba(123, 255, 106, 0.18);\n    border-color: rgb(31, 187, 0);\n}\n.new-project-form > li > input[required]:focus:invalid,\n.new-project-form > li > input[required]:not(:placeholder-shown):invalid,\n.new-project-form > li > input[required].name-taken {\n    outline-color: red;\n    background-color: rgba(255, 106, 106, 0.18);\n    border-color: red;\n}\n\n.new-project-form-name > label {\n    position: relative;\n    font-size: 0.9rem;\n    white-space: nowrap;\n}\n.new-project-form > li > label::before {\n    position: absolute;\n    font-size: 0.6rem;\n    white-space: nowrap;\n    color: transparent;\n    content: attr(help);\n    font-weight: normal;\n    top: 1.4rem;\n}\n.new-project-form-name > input:not(:placeholder-shown).name-taken + label::before {\n    color: red;\n}\n\n.new-project-form-name > input {\n    font-size: 0.7rem;\n    border-radius: 6px;\n    border: 1px solid #000;\n    min-width: 80px;\n    width: 320px;\n}","",{version:3,sources:["webpack://./src/styles/styles-tab-projectlist.lazy.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,iBAAiB;IACjB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,8CAA8C;IAC9C,uBAAuB;IACvB,oBAAoB;IACpB,SAAS;IACT,aAAa;AACjB;;AAEA;;IAEI,aAAa;IACb,uCAAuC;IACvC,kBAAkB;IAClB,qBAAqB;IACrB,aAAa;IACb,4BAA4B;IAC5B,QAAQ;AACZ;AACA;IACI,0BAA0B;IAC1B,uCAAuC;IACvC,2GAA2G;AAC/G;AACA;IACI,4BAA4B;IAC5B,6BAA6B;IAC7B,2BAA2B;AAC/B;AACA;IACI,2GAA2G;IAC3G,qDAAqD;AACzD;AACA;IACI,2BAA2B;AAC/B;AACA;IACI,2CAA2C;AAC/C;AACA;;IAEI,iBAAiB;AACrB;AACA;IACI,iBAAiB;AACrB;AACA;IACI,iBAAiB;AACrB;AACA;IACI,kBAAkB;IAClB,sBAAsB;IACtB,eAAe;IACf,mBAAmB;AACvB;AACA;IACI,oBAAoB;IACpB,qBAAqB;IACrB,WAAW;IACX,WAAW;IACX,yBAAyB;IACzB,kBAAkB;AACtB;AACA;IACI,aAAa;IACb,8BAA8B;IAC9B,eAAe;IACf,QAAQ;AACZ;AACA;;IAEI,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,qBAAqB;IACrB,YAAY;IACZ,kBAAkB;AACtB;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,qBAAqB;IACrB,eAAe;IACf,QAAQ;IACR,SAAS;IACT,YAAY;IACZ,aAAa;IACb,oCAAoC;AACxC;;AAEA;IACI,aAAa;IACb,wBAAwB;IACxB,qBAAqB;IACrB,sBAAsB;IACtB,aAAa;IACb,SAAS;AACb;;AAEA;;IAEI,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,qBAAqB;IACrB,YAAY;IACZ,kBAAkB;IAClB,eAAe;IACf,YAAY;AAChB;AACA;IACI,iBAAiB;IACjB,yBAAyB;IACzB,mBAAmB;AACvB;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,oBAAoB;IACpB,yBAAyB;IACzB,gBAAgB;AACpB;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,2BAA2B;IAC3B,SAAS;AACb;AACA;IACI,8BAA8B;IAC9B,2CAA2C;IAC3C,6BAA6B;AACjC;AACA;;;IAGI,kBAAkB;IAClB,2CAA2C;IAC3C,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,mBAAmB;AACvB;AACA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,mBAAmB;IACnB,kBAAkB;IAClB,mBAAmB;IACnB,mBAAmB;IACnB,WAAW;AACf;AACA;IACI,UAAU;AACd;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;IAClB,sBAAsB;IACtB,eAAe;IACf,YAAY;AAChB",sourcesContent:[".header {\n    display: flex;\n    justify-content: center;\n}\n\n.title {\n    align-self: center;\n    font-size: 1.7rem;\n    font-weight: bold;\n    white-space: nowrap;\n}\n\n.content .project-container {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 240px);\n    justify-content: center;\n    align-content: start;\n    gap: 20px;\n    padding: 20px;\n}\n\n.content .project-panel,\n.content .new-project-panel {\n    display: grid;\n    grid-template-rows: 1fr repeat(2, auto);\n    text-align: center;\n    border-radius: 0.6rem;\n    height: 280px;\n    padding: 16px 18px 14px 18px;\n    gap: 6px;\n}\n.content .project-panel {\n    outline: 1px solid #6d6d6d;\n    grid-template-rows: 1fr repeat(2, auto);\n    background-image: linear-gradient(180deg, rgb(30, 148, 216), rgb(30, 148, 216) 8px, rgb(255, 255, 255) 8px);\n}\n.content .new-project-panel {\n    grid-template-rows: auto 1fr;\n    background-color: transparent;\n    outline: 2px dashed #6d6d6d;\n}\n.content .project-panel:hover {\n    background-image: linear-gradient(180deg, rgb(30, 148, 216), rgb(30, 148, 216) 8px, rgb(255, 255, 255) 8px);\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.content .new-project-panel:hover {\n    outline: 2px dashed #080808;\n}\n.content .new-project-panel:active {\n    background-color: rgba(128, 128, 128, 0.07);\n}\n.content .new-project-panel-name,\n.content .project-panel-name {\n    font-size: 1.4rem;\n}\n.content .project-panel-number-of-items {\n    font-size: 0.6rem;\n}\n.content .project-panel-date-created {\n    font-size: 0.8rem;\n}\n.content .new-project-panel-plus {\n    align-self: center;\n    color: rgb(46, 46, 46);\n    font-size: 5rem;\n    font-weight: normal;\n}\n.content .project-panel-separator {\n    justify-self: center;\n    border-radius: 9999px;\n    width: 104%;\n    height: 2px;\n    background-color: #dadada;\n    margin-bottom: 6px;\n}\n.content .project-panel-buttons-container {\n    display: flex;\n    justify-content: space-between;\n    flex-wrap: wrap;\n    gap: 6px;\n}\n.content .project-panel-buttons-edit,\n.content .project-panel-buttons-delete {\n    width: 40px;\n    height: 40px;\n    border: none;\n    border-radius: 9999px;\n    color: white;\n    text-align: center;\n}\n.content .project-panel-buttons-edit {\n    background-color: #31c22c;\n}\n.content .project-panel-buttons-edit:hover {\n    background-color: #4bdb46;\n}\n.content .project-panel-buttons-edit:active {\n    background-color: #23aa1f;\n}\n.content .project-panel-buttons-delete {\n    background-color: #e73333;\n}\n.content .project-panel-buttons-delete:hover {\n    background-color: #f54e4e;\n}\n.content .project-panel-buttons-delete:active {\n    background-color: #c51717;\n}\n\n.new-project-form-cover {\n    display: grid;\n    place-content: center;\n    position: fixed;\n    top: 0px;\n    left: 0px;\n    width: 100vw;\n    height: 100vh;\n    background-color: rgba(0, 0, 0, 0.6);\n}\n\n.new-project-form {\n    display: grid;\n    grid-template-rows: auto;\n    border-radius: 1.2rem;\n    background-color: #fff;\n    padding: 14px;\n    gap: 10px;\n}\n\n.new-project-form-close-button,\n.new-project-form-create-project-button {\n    width: 30px;\n    height: 30px;\n    border: none;\n    border-radius: 9999px;\n    color: white;\n    text-align: center;\n    font-size: 1rem;\n    padding: 0px;\n}\n.new-project-form-close-button {\n    justify-self: end;\n    background-color: #e73333;\n    margin-bottom: 1rem;\n}\n.new-project-form-close-button:hover {\n    background-color: #f54e4e;\n}\n.new-project-form-close-button:active {\n    background-color: #c51717;\n}\n.new-project-form-create-project-button {\n    justify-self: center;\n    background-color: #31c22c;\n    margin-top: 1rem;\n}\n.new-project-form-create-project-button:hover {\n    background-color: #4bdb46;\n}\n.new-project-form-create-project-button:active {\n    background-color: #23aa1f;\n}\n\n.new-project-form > li {\n    display: flex;\n    justify-content: space-between;\n    flex-direction: row-reverse;\n    gap: 10px;\n}\n.new-project-form > li > input[required]:valid {\n    outline-color: rgb(31, 187, 0);\n    background-color: rgba(123, 255, 106, 0.18);\n    border-color: rgb(31, 187, 0);\n}\n.new-project-form > li > input[required]:focus:invalid,\n.new-project-form > li > input[required]:not(:placeholder-shown):invalid,\n.new-project-form > li > input[required].name-taken {\n    outline-color: red;\n    background-color: rgba(255, 106, 106, 0.18);\n    border-color: red;\n}\n\n.new-project-form-name > label {\n    position: relative;\n    font-size: 0.9rem;\n    white-space: nowrap;\n}\n.new-project-form > li > label::before {\n    position: absolute;\n    font-size: 0.6rem;\n    white-space: nowrap;\n    color: transparent;\n    content: attr(help);\n    font-weight: normal;\n    top: 1.4rem;\n}\n.new-project-form-name > input:not(:placeholder-shown).name-taken + label::before {\n    color: red;\n}\n\n.new-project-form-name > input {\n    font-size: 0.7rem;\n    border-radius: 6px;\n    border: 1px solid #000;\n    min-width: 80px;\n    width: 320px;\n}"],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(a[d]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);o&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),t.push(c))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},a=[],s=0;s<e.length;s++){var d=e[s],l=o.base?d[0]+o.base:d[0],c=i[l]||0,A="".concat(l," ").concat(c);i[l]=c+1;var u=n(A),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var p=r(m,o);o.byIndex=s,t.splice(s,0,{identifier:A,updater:p,references:1})}a.push(A)}return a}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var d=o(e,r),l=0;l<i.length;l++){var c=n(i[l]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=d}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),o=n(795),r=n.n(o),i=n(569),a=n.n(i),s=n(565),d=n.n(s),l=n(216),c=n.n(l),A=n(589),u=n.n(A),m=n(28),p={};p.styleTagTransform=u(),p.setAttributes=d(),p.insert=a().bind(null,"head"),p.domAPI=r(),p.insertStyleElement=c(),t()(m.Z,p),m.Z&&m.Z.locals&&m.Z.locals;const g=(e,t,n)=>Math.max(Math.min(e,Math.max(t,n)),Math.min(t,n)),h=()=>{let e="New Item",t="",n=new Date,o=new Date,r=0,i=[],a=[],s=!1,d=0;n.setDate(n.getDate()+1);const l=t=>{"string"==typeof t&&(t.length>75&&(t=t.slice(0,75)),e=t)},c=e=>{"string"==typeof e&&(e.length>500&&(e=e.slice(0,500)),t=e)},A=e=>{"number"==typeof e&&(e=g(e,0,5),r=Math.floor(e))},u=e=>{"boolean"==typeof e&&(s=e)};return{setName:l,getName:()=>e,setDescription:c,getDescription:()=>t,setDueDateYear:e=>{"number"==typeof e&&(new Date,n.setFullYear(Math.floor(e)))},setDueDateMonth:e=>{"number"==typeof e&&(e=g(e,1,12),n.setMonth(Math.floor(e-1)))},setDueDateDay:e=>{"number"==typeof e&&(e=((e,t,n)=>{if("number"!=typeof t||"number"!=typeof n)return 1;switch(t){case 1:case 3:case 5:case 7:case 8:case 10:case 12:return g(n,1,31);case 4:case 6:case 9:case 11:return g(n,1,30);case 2:return g(n,1,e%400==0?29:e%100==0?28:e%4==0?29:28);default:return 1}})(n.getFullYear(),n.getMonth()+1,e),n.setDate(Math.floor(e)))},setDueDateHour:e=>{"number"==typeof e&&(e=g(e,0,23),n.setHours(Math.floor(e)))},setDueDateMinute:e=>{"number"==typeof e&&(e=g(e,0,59),n.setMinutes(Math.floor(e)))},getDueDate:()=>n,getDateCreated:()=>o,setPriority:A,getPriority:()=>r,newNote:e=>{if(i.length<10){if("string"!=typeof e)return;e.length>500&&(e=e.slice(0,500)),i.push(e)}},setNote:(e,t)=>{"number"!=typeof e||e<0||e>=i.length||"string"==typeof t&&(t.length>500&&(t=t.slice(0,500)),i[e]=t)},getNotes:()=>i,removeNote:e=>{"number"!=typeof e||e<0||e>=i.length||i.splice(e,1)},newChecklistItem:(e,t)=>{a.length<10&&a.push({name:e,state:t})},setChecklistItemName:(e,t)=>{"number"!=typeof e||e<0||e>=a.length||"string"==typeof t&&(t.length>75&&(t=t.slice(0,75)),a[e].name=t)},getChecklistItemName:e=>{if(!("number"!=typeof e||e<0||e>=a.length))return a[e].name},setChecklistItemState:(e,t)=>{"number"!=typeof e||e<0||e>=a.length||"boolean"==typeof t&&(a[e].state=t)},getChecklistItemState:e=>{if(!("number"!=typeof e||e<0||e>=a.length))return a[e].state},getChecklistLength:()=>a.length,removeChecklistItem:e=>{"number"!=typeof e||e<0||e>=a.length||a.splice(e,1)},setCompleted:u,getCompleted:()=>s,setUniqueID:e=>{d=e},getUniqueID:()=>d,toJSON:()=>JSON.stringify({name:e,description:t,dueDate:n,dateCreated:o,priority:r,notes:i,checklist:a,completed:s,uniqueID:d}),fromJSON:e=>{const t=JSON.parse(e);l(t.name),c(t.description),n=new Date(t.dueDate),o=new Date(t.dateCreated),A(t.priority),i=t.notes,a=t.checklist,u(t.completed),d=t.uniqueID}}},C=(e="Project Name")=>{let t="Project Name";"string"==typeof e&&(t=e);let n={DATE_ADDED:"NONE",DUE_BY:"SOONER",PRIORITY:"NONE",STATUS:"INCOMPLETE",ALPHABETICAL:"NONE"},o=["STATUS","DUE_BY"],r=[],i=0,a=new Date;const s=e=>{"string"==typeof e&&(e.length>75&&(e=e.slice(0,75)),t=e)};return{setName:s,getName:()=>t,setSort:(e,t)=>{switch(e){case"DATE_ADDED":switch(t){case"NONE":n.DATE_ADDED="NONE";break;case"NEWEST":n.DATE_ADDED="NEWEST";break;case"OLDEST":n.DATE_ADDED="OLDEST"}break;case"DUE_BY":switch(t){case"NONE":n.DUE_BY="NONE";break;case"SOONER":n.DUE_BY="SOONER";break;case"LATER":n.DUE_BY="LATER"}break;case"PRIORITY":switch(t){case"NONE":n.PRIORITY="NONE";break;case"HIGH":n.PRIORITY="HIGH";break;case"LOW":n.PRIORITY="LOW"}break;case"STATUS":switch(t){case"NONE":n.STATUS="NONE";break;case"INCOMPLETE":n.STATUS="INCOMPLETE";break;case"COMPLETE":n.STATUS="COMPLETE"}break;case"ALPHABETICAL":switch(t){case"NONE":n.ALPHABETICAL="NONE";break;case"NORMAL":n.ALPHABETICAL="NORMAL";break;case"REVERSED":n.ALPHABETICAL="REVERSED"}break;default:return""}},getSort:e=>{switch(e){case"DATE_ADDED":return n.DATE_ADDED;case"DUE_BY":return n.DUE_BY;case"PRIORITY":return n.PRIORITY;case"STATUS":return n.STATUS;case"ALPHABETICAL":return n.ALPHABETICAL}},setSortOrder:e=>{o=e},getSortOrder:()=>o,addToDoItem:()=>{if(r.length<100){const e=h();return e.setUniqueID(i),i++,e.toJSON(),r.push(e),e}return null},getNewUniqueID:()=>{const e=i;return i++,e},setToDoItem:(e,t)=>{"number"==typeof e&&(e<0||e>=r.length||(r[e]=t))},appendExistingToDoItem:e=>{r.length<100&&r.push(e)},removeToDoItem:e=>{"number"==typeof e&&(e<0||e>=r.length||r.splice(e,1))},getToDoItem:e=>{if("number"==typeof e&&!(e<0||e>=r.length))return r[e]},getToDoItems:()=>(r.sort(((e,t)=>{for(let r=0;r<o.length;r++){const i=o[r],a=JSON.parse(e),s=JSON.parse(t),d=new Date(a.dateCreated),l=new Date(s.dateCreated),c=new Date(a.dueDate),A=new Date(s.dueDate);switch(i){case"DATE_ADDED":if("NONE"===n.DATE_ADDED||d===l)break;return"NEWEST"===n.DATE_ADDED?d-l:l-d;case"DUE_BY":if("NONE"===n.DUE_BY||c===A)break;return"SOONER"===n.DUE_BY?c-A:A-c;case"PRIORITY":if("NONE"===n.PRIORITY||a.priority===s.priority)break;return"LOW"===n.PRIORITY?a.priority-s.priority:s.priority-a.priority;case"STATUS":if("NONE"===n.STATUS||a.completed===s.completed)break;return"INCOMPLETE"===n.STATUS?a.completed-s.completed:s.completed-a.completed;case"ALPHABETICAL":if("NONE"===n.ALPHABETICAL||0===a.name.localeCompare(s.name))break;return"NORMAL"===n.ALPHABETICAL?a.name.localeCompare(s.name):s.name.localeCompare(a.name);default:return 0}}return 0})),r),getDateCreated:()=>a,getMaxItemsAllowance:()=>100,toJSON:()=>JSON.stringify({name:t,sorts:n,sortOrder:o,items:r,dateCreated:a,itemUniqueID:i}),fromJSON:e=>{const t=JSON.parse(e);s(t.name),n=t.sorts,o=t.sortOrder,r=t.items,a=new Date(t.dateCreated),i=t.itemUniqueID}}};function f(e){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f(e)}function b(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function B(e){b(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===f(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function I(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function y(e){b(1,arguments);var t=B(e),n=t.getUTCDay(),o=(n<1?7:0)+n-1;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function v(e){b(1,arguments);var t=B(e),n=t.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(n+1,0,4),o.setUTCHours(0,0,0,0);var r=y(o),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var a=y(i);return t.getTime()>=r.getTime()?n+1:t.getTime()>=a.getTime()?n:n-1}var w={};function x(){return w}function k(e,t){var n,o,r,i,a,s,d,l;b(1,arguments);var c=x(),A=I(null!==(n=null!==(o=null!==(r=null!==(i=null==t?void 0:t.weekStartsOn)&&void 0!==i?i:null==t||null===(a=t.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==r?r:c.weekStartsOn)&&void 0!==o?o:null===(d=c.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==n?n:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=B(e),m=u.getUTCDay(),p=(m<A?7:0)+m-A;return u.setUTCDate(u.getUTCDate()-p),u.setUTCHours(0,0,0,0),u}function E(e,t){var n,o,r,i,a,s,d,l;b(1,arguments);var c=B(e),A=c.getUTCFullYear(),u=x(),m=I(null!==(n=null!==(o=null!==(r=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(a=t.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==r?r:u.firstWeekContainsDate)&&void 0!==o?o:null===(d=u.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==n?n:1);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var p=new Date(0);p.setUTCFullYear(A+1,0,m),p.setUTCHours(0,0,0,0);var g=k(p,t),h=new Date(0);h.setUTCFullYear(A,0,m),h.setUTCHours(0,0,0,0);var C=k(h,t);return c.getTime()>=g.getTime()?A+1:c.getTime()>=C.getTime()?A:A-1}function j(e,t){for(var n=e<0?"-":"",o=Math.abs(e).toString();o.length<t;)o="0"+o;return n+o}const D=function(e,t){var n=e.getUTCFullYear(),o=n>0?n:1-n;return j("yy"===t?o%100:o,t.length)},S=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):j(n+1,2)},T=function(e,t){return j(e.getUTCDate(),t.length)},L=function(e,t){return j(e.getUTCHours()%12||12,t.length)},N=function(e,t){return j(e.getUTCHours(),t.length)},M=function(e,t){return j(e.getUTCMinutes(),t.length)},q=function(e,t){return j(e.getUTCSeconds(),t.length)},z=function(e,t){var n=t.length,o=e.getUTCMilliseconds();return j(Math.floor(o*Math.pow(10,n-3)),t.length)};var O={G:function(e,t,n){var o=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(o,{width:"abbreviated"});case"GGGGG":return n.era(o,{width:"narrow"});default:return n.era(o,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var o=e.getUTCFullYear(),r=o>0?o:1-o;return n.ordinalNumber(r,{unit:"year"})}return D(e,t)},Y:function(e,t,n,o){var r=E(e,o),i=r>0?r:1-r;return"YY"===t?j(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):j(i,t.length)},R:function(e,t){return j(v(e),t.length)},u:function(e,t){return j(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var o=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(o);case"QQ":return j(o,2);case"Qo":return n.ordinalNumber(o,{unit:"quarter"});case"QQQ":return n.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(o,{width:"narrow",context:"formatting"});default:return n.quarter(o,{width:"wide",context:"formatting"})}},q:function(e,t,n){var o=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(o);case"qq":return j(o,2);case"qo":return n.ordinalNumber(o,{unit:"quarter"});case"qqq":return n.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(o,{width:"narrow",context:"standalone"});default:return n.quarter(o,{width:"wide",context:"standalone"})}},M:function(e,t,n){var o=e.getUTCMonth();switch(t){case"M":case"MM":return S(e,t);case"Mo":return n.ordinalNumber(o+1,{unit:"month"});case"MMM":return n.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(o,{width:"narrow",context:"formatting"});default:return n.month(o,{width:"wide",context:"formatting"})}},L:function(e,t,n){var o=e.getUTCMonth();switch(t){case"L":return String(o+1);case"LL":return j(o+1,2);case"Lo":return n.ordinalNumber(o+1,{unit:"month"});case"LLL":return n.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(o,{width:"narrow",context:"standalone"});default:return n.month(o,{width:"wide",context:"standalone"})}},w:function(e,t,n,o){var r=function(e,t){b(1,arguments);var n=B(e),o=k(n,t).getTime()-function(e,t){var n,o,r,i,a,s,d,l;b(1,arguments);var c=x(),A=I(null!==(n=null!==(o=null!==(r=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(a=t.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==r?r:c.firstWeekContainsDate)&&void 0!==o?o:null===(d=c.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==n?n:1),u=E(e,t),m=new Date(0);return m.setUTCFullYear(u,0,A),m.setUTCHours(0,0,0,0),k(m,t)}(n,t).getTime();return Math.round(o/6048e5)+1}(e,o);return"wo"===t?n.ordinalNumber(r,{unit:"week"}):j(r,t.length)},I:function(e,t,n){var o=function(e){b(1,arguments);var t=B(e),n=y(t).getTime()-function(e){b(1,arguments);var t=v(e),n=new Date(0);return n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0),y(n)}(t).getTime();return Math.round(n/6048e5)+1}(e);return"Io"===t?n.ordinalNumber(o,{unit:"week"}):j(o,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):T(e,t)},D:function(e,t,n){var o=function(e){b(1,arguments);var t=B(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var o=n-t.getTime();return Math.floor(o/864e5)+1}(e);return"Do"===t?n.ordinalNumber(o,{unit:"dayOfYear"}):j(o,t.length)},E:function(e,t,n){var o=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},e:function(e,t,n,o){var r=e.getUTCDay(),i=(r-o.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return j(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(e,t,n,o){var r=e.getUTCDay(),i=(r-o.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return j(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(e,t,n){var o=e.getUTCDay(),r=0===o?7:o;switch(t){case"i":return String(r);case"ii":return j(r,t.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},a:function(e,t,n){var o=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(e,t,n){var o,r=e.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(e,t,n){var o,r=e.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var o=e.getUTCHours()%12;return 0===o&&(o=12),n.ordinalNumber(o,{unit:"hour"})}return L(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):N(e,t)},K:function(e,t,n){var o=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(o,{unit:"hour"}):j(o,t.length)},k:function(e,t,n){var o=e.getUTCHours();return 0===o&&(o=24),"ko"===t?n.ordinalNumber(o,{unit:"hour"}):j(o,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):M(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):q(e,t)},S:function(e,t){return z(e,t)},X:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return U(r);case"XXXX":case"XX":return P(r);default:return P(r,":")}},x:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();switch(t){case"x":return U(r);case"xxxx":case"xx":return P(r);default:return P(r,":")}},O:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+Y(r,":");default:return"GMT"+P(r,":")}},z:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+Y(r,":");default:return"GMT"+P(r,":")}},t:function(e,t,n,o){var r=o._originalDate||e;return j(Math.floor(r.getTime()/1e3),t.length)},T:function(e,t,n,o){return j((o._originalDate||e).getTime(),t.length)}};function Y(e,t){var n=e>0?"-":"+",o=Math.abs(e),r=Math.floor(o/60),i=o%60;if(0===i)return n+String(r);var a=t||"";return n+String(r)+a+j(i,2)}function U(e,t){return e%60==0?(e>0?"-":"+")+j(Math.abs(e)/60,2):P(e,t)}function P(e,t){var n=t||"",o=e>0?"-":"+",r=Math.abs(e);return o+j(Math.floor(r/60),2)+n+j(r%60,2)}const W=O;var R=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},H=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const F={p:H,P:function(e,t){var n,o=e.match(/(P+)(p+)?/)||[],r=o[1],i=o[2];if(!i)return R(e,t);switch(r){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",R(r,t)).replace("{{time}}",H(i,t))}};function _(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var Z=["D","DD"],G=["YY","YYYY"];function J(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var X={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function Q(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}const $={date:Q({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:Q({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:Q({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var V={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function K(e){return function(t,n){var o;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,i=null!=n&&n.width?String(n.width):r;o=e.formattingValues[i]||e.formattingValues[r]}else{var a=e.defaultWidth,s=null!=n&&n.width?String(n.width):e.defaultWidth;o=e.values[s]||e.values[a]}return o[e.argumentCallback?e.argumentCallback(t):t]}}const ee={ordinalNumber:function(e,t){var n=Number(e),o=n%100;if(o>20||o<10)switch(o%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:K({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:K({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:K({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:K({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:K({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function te(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=n.width,r=o&&e.matchPatterns[o]||e.matchPatterns[e.defaultMatchWidth],i=t.match(r);if(!i)return null;var a,s=i[0],d=o&&e.parsePatterns[o]||e.parsePatterns[e.defaultParseWidth],l=Array.isArray(d)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(s))return n}(d):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(s))return n}(d);return a=e.valueCallback?e.valueCallback(l):l,{value:a=n.valueCallback?n.valueCallback(a):a,rest:t.slice(s.length)}}}var ne,oe={ordinalNumber:(ne={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(ne.matchPattern);if(!n)return null;var o=n[0],r=e.match(ne.parsePattern);if(!r)return null;var i=ne.valueCallback?ne.valueCallback(r[0]):r[0];return{value:i=t.valueCallback?t.valueCallback(i):i,rest:e.slice(o.length)}}),era:te({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:te({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:te({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:te({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:te({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const re={code:"en-US",formatDistance:function(e,t,n){var o,r=X[e];return o="string"==typeof r?r:1===t?r.one:r.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+o:o+" ago":o},formatLong:$,formatRelative:function(e,t,n,o){return V[e]},localize:ee,match:oe,options:{weekStartsOn:0,firstWeekContainsDate:1}};var ie=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ae=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,se=/^'([^]*?)'?$/,de=/''/g,le=/[a-zA-Z]/;function ce(e,t,n){var o,r,i,a,s,d,l,c,A,u,m,p,g,h,C,y,v,w;b(2,arguments);var k=String(t),E=x(),j=null!==(o=null!==(r=null==n?void 0:n.locale)&&void 0!==r?r:E.locale)&&void 0!==o?o:re,D=I(null!==(i=null!==(a=null!==(s=null!==(d=null==n?void 0:n.firstWeekContainsDate)&&void 0!==d?d:null==n||null===(l=n.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==s?s:E.firstWeekContainsDate)&&void 0!==a?a:null===(A=E.locale)||void 0===A||null===(u=A.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==i?i:1);if(!(D>=1&&D<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var S=I(null!==(m=null!==(p=null!==(g=null!==(h=null==n?void 0:n.weekStartsOn)&&void 0!==h?h:null==n||null===(C=n.locale)||void 0===C||null===(y=C.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==g?g:E.weekStartsOn)&&void 0!==p?p:null===(v=E.locale)||void 0===v||null===(w=v.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==m?m:0);if(!(S>=0&&S<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!j.localize)throw new RangeError("locale must contain localize property");if(!j.formatLong)throw new RangeError("locale must contain formatLong property");var T=B(e);if(!function(e){if(b(1,arguments),!function(e){return b(1,arguments),e instanceof Date||"object"===f(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var t=B(e);return!isNaN(Number(t))}(T))throw new RangeError("Invalid time value");var L=function(e,t){return b(2,arguments),function(e,t){b(2,arguments);var n=B(e).getTime(),o=I(t);return new Date(n+o)}(e,-I(t))}(T,_(T)),N={firstWeekContainsDate:D,weekStartsOn:S,locale:j,_originalDate:T};return k.match(ae).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,F[t])(e,j.formatLong):e})).join("").match(ie).map((function(o){if("''"===o)return"'";var r,i,a=o[0];if("'"===a)return(i=(r=o).match(se))?i[1].replace(de,"'"):r;var s,d=W[a];if(d)return null!=n&&n.useAdditionalWeekYearTokens||(s=o,-1===G.indexOf(s))||J(o,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!function(e){return-1!==Z.indexOf(e)}(o)||J(o,t,String(e)),d(L,o,j.localize,N);if(a.match(le))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return o})).join("")}const Ae=e=>{const t=e.getToDoItems();let n=document.createElement("div");n.classList.add("project-panel");let o=document.createElement("h2");o.classList.add("project-panel-name","no-select"),o.textContent=e.getName(),n.appendChild(o);let r=document.createElement("h6");r.classList.add("project-panel-number-of-items","no-select"),r.textContent=`Number of Items: ${t.length}`,n.appendChild(r);let i=document.createElement("h4");i.classList.add("project-panel-date-created","no-select"),i.textContent=`Created ${ce(e.getDateCreated(),"do MMMM yyyy")}`,n.appendChild(i);let a=document.createElement("div");a.classList.add("project-panel-separator"),n.appendChild(a);let s=document.createElement("div");s.classList.add("project-panel-buttons-container");let d=document.createElement("button");d.classList.add("project-panel-buttons-edit","material-symbols-rounded","no-select"),d.textContent="Edit",s.appendChild(d);let l=document.createElement("button");return l.classList.add("project-panel-buttons-delete","material-symbols-rounded","no-select"),l.textContent="Delete",s.appendChild(l),n.appendChild(s),{panel:n,editButton:d,deleteButton:l}};function ue(e,t){b(2,arguments);var n=B(e),o=B(t),r=n.getTime()-o.getTime();return r<0?-1:r>0?1:r}function me(e,t){if(b(2,arguments),!t||"object"!==f(t))return new Date(NaN);var n=t.years?I(t.years):0,o=t.months?I(t.months):0,r=t.weeks?I(t.weeks):0,i=t.days?I(t.days):0,a=t.hours?I(t.hours):0,s=t.minutes?I(t.minutes):0,d=t.seconds?I(t.seconds):0,l=B(e),c=o||n?function(e,t){b(2,arguments);var n=B(e),o=I(t);if(isNaN(o))return new Date(NaN);if(!o)return n;var r=n.getDate(),i=new Date(n.getTime());return i.setMonth(n.getMonth()+o+1,0),r>=i.getDate()?i:(n.setFullYear(i.getFullYear(),i.getMonth(),r),n)}(l,o+12*n):l,A=i||r?function(e,t){b(2,arguments);var n=B(e),o=I(t);return isNaN(o)?new Date(NaN):o?(n.setDate(n.getDate()+o),n):n}(c,i+7*r):c,u=1e3*(d+60*(s+60*a));return new Date(A.getTime()+u)}function pe(e){b(1,arguments);var t=B(e);return t.setHours(0,0,0,0),t}var ge=864e5;function he(e,t){var n=e.getFullYear()-t.getFullYear()||e.getMonth()-t.getMonth()||e.getDate()-t.getDate()||e.getHours()-t.getHours()||e.getMinutes()-t.getMinutes()||e.getSeconds()-t.getSeconds()||e.getMilliseconds()-t.getMilliseconds();return n<0?-1:n>0?1:n}Math.pow(10,8);function Ce(e,t){return b(2,arguments),B(e).getTime()-B(t).getTime()}var fe={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(e){return e<0?Math.ceil(e):Math.floor(e)}},be="trunc";function Be(e){return e?fe[e]:fe[be]}function Ie(e,t){b(2,arguments);var n,o=B(e),r=B(t),i=ue(o,r),a=Math.abs(function(e,t){b(2,arguments);var n=B(e),o=B(t);return 12*(n.getFullYear()-o.getFullYear())+(n.getMonth()-o.getMonth())}(o,r));if(a<1)n=0;else{1===o.getMonth()&&o.getDate()>27&&o.setDate(30),o.setMonth(o.getMonth()-i*a);var s=ue(o,r)===-i;(function(e){b(1,arguments);var t=B(e);return function(e){b(1,arguments);var t=B(e);return t.setHours(23,59,59,999),t}(t).getTime()===function(e){b(1,arguments);var t=B(e),n=t.getMonth();return t.setFullYear(t.getFullYear(),n+1,0),t.setHours(23,59,59,999),t}(t).getTime()})(B(e))&&1===a&&1===ue(e,r)&&(s=!1),n=i*(a-Number(s))}return 0===n?0:n}function ye(e){b(1,arguments);var t=B(e.start),n=B(e.end);if(isNaN(t.getTime()))throw new RangeError("Start Date is invalid");if(isNaN(n.getTime()))throw new RangeError("End Date is invalid");var o={};o.years=Math.abs(function(e,t){b(2,arguments);var n=B(e),o=B(t),r=ue(n,o),i=Math.abs(function(e,t){b(2,arguments);var n=B(e),o=B(t);return n.getFullYear()-o.getFullYear()}(n,o));n.setFullYear(1584),o.setFullYear(1584);var a=ue(n,o)===-r,s=r*(i-Number(a));return 0===s?0:s}(n,t));var r=ue(n,t),i=me(t,{years:r*o.years});o.months=Math.abs(Ie(n,i));var a=me(i,{months:r*o.months});o.days=Math.abs(function(e,t){b(2,arguments);var n=B(e),o=B(t),r=he(n,o),i=Math.abs(function(e,t){b(2,arguments);var n=pe(e),o=pe(t),r=n.getTime()-_(n),i=o.getTime()-_(o);return Math.round((r-i)/ge)}(n,o));n.setDate(n.getDate()-r*i);var a=r*(i-Number(he(n,o)===-r));return 0===a?0:a}(n,a));var s=me(a,{days:r*o.days});o.hours=Math.abs(function(e,t,n){b(2,arguments);var o=Ce(e,t)/36e5;return Be(null==n?void 0:n.roundingMethod)(o)}(n,s));var d=me(s,{hours:r*o.hours});o.minutes=Math.abs(function(e,t,n){b(2,arguments);var o=Ce(e,t)/6e4;return Be(null==n?void 0:n.roundingMethod)(o)}(n,d));var l=me(d,{minutes:r*o.minutes});return o.seconds=Math.abs(function(e,t,n){b(2,arguments);var o=Ce(e,t)/1e3;return Be(null==n?void 0:n.roundingMethod)(o)}(n,l)),o}var ve=["years","months","weeks","days","hours","minutes","seconds"];const we=e=>{const t=e;let n,o=!1;const r=document.createElement("div");let i,a,s,d,l,c,A,u,m,p,g,h,C;r.classList.add("to-do-item");const f=()=>{for(;r.firstChild;)r.lastChild.remove();o?(r.classList.add("expanded"),r.classList.remove("collapsed")):(r.classList.add("collapsed"),r.classList.remove("expanded")),t.getCompleted()&&r.classList.add("completed-item"),b(),a=document.createElement("div"),a.classList.add("to-do-item-top-bar-information"),r.appendChild(a),B(),I(),y(),o&&(v(),w(),p=document.createElement("div"),p.classList.add("to-do-item-expanded-information"),r.appendChild(p),k(),E(),j())},b=()=>{i&&i.remove(),i=document.createElement("button"),i.classList.add("to-do-item-expand-collapse-button","material-symbols-rounded"),i.textContent=o?"Expand_Circle_Up":"Expand_Circle_Down",r.appendChild(i),i.addEventListener("click",(()=>{o=!o,f()}))},B=()=>{s&&s.remove(),s=document.createElement("label"),s.classList.add("to-do-item-edit-name","material-symbols-rounded"),s.textContent="Edit",a.appendChild(s),d&&d.remove(),d=document.createElement("input"),d.classList.add("to-do-item-name"),d.setAttribute("type","text"),d.setAttribute("minlength",1),d.setAttribute("maxlength",75),d.setAttribute("title","Please enter a name for your to-do item."),d.setAttribute("placeholder","Please Enter a Name"),d.value=t.getName(),d.addEventListener("input",(()=>t.setName(d.value))),s.appendChild(d)},I=()=>{l&&l.remove(),l=document.createElement("h4"),l.classList.add("to-do-item-due-date","no-select");const e=()=>{if(t.getCompleted())return void(l.textContent="Completed");const e=ye({start:new Date,end:t.getDueDate()}),n=Object.entries(e).filter((([e,t])=>t||!1)).map((([e,t])=>e)),o=function(e,t){var n,o,r,i,a;if(arguments.length<1)throw new TypeError("1 argument required, but only ".concat(arguments.length," present"));var s=x(),d=null!==(n=null!==(o=null==t?void 0:t.locale)&&void 0!==o?o:s.locale)&&void 0!==n?n:re,l=null!==(r=null==t?void 0:t.format)&&void 0!==r?r:ve,c=null!==(i=null==t?void 0:t.zero)&&void 0!==i&&i,A=null!==(a=null==t?void 0:t.delimiter)&&void 0!==a?a:" ";return d.formatDistance?l.reduce((function(t,n){var o="x".concat(n.replace(/(^.)/,(function(e){return e.toUpperCase()}))),r=e[n];return"number"==typeof r&&(c||e[n])?t.concat(d.formatDistance(o,r)):t}),[]).join(A):""}(e,{format:["years","months","weeks","days","hours","minutes","seconds"].filter((e=>new Set(n).has(e))).slice(0,2),delimiter:", "});let i="";t.getDueDate()>new Date?(r.classList.remove("overdue"),i=0===o.length?" right now":` in ${o}`,l.textContent=`Due on ${ce(t.getDueDate(),"do MMMM yyyy")}${i}`):(r.classList.add("overdue"),o.length>0&&(i=` for ${o}`),l.textContent=`Overdue${i}`)};e(),a.appendChild(l),c&&c.remove(),c=document.createElement("input"),c.classList.add("to-do-item-due-date-picker"),c.setAttribute("type","datetime-local"),c.value=t.getDueDate().toISOString().slice(0,16),c.addEventListener("input",(()=>{t.setDueDateYear(parseInt(c.value.slice(0,4))),t.setDueDateMonth(parseInt(c.value.slice(5,7))),t.setDueDateDay(parseInt(c.value.slice(8,10))),t.setDueDateHour(parseInt(c.value.slice(11,13))),t.setDueDateMinute(parseInt(c.value.slice(14,16))),e()})),a.appendChild(c)},y=()=>{if(A&&A.remove(),A=document.createElement("div"),A.classList.add("to-do-item-priority"),t)for(let e=4;e>=0;e--){const n=document.createElement("h4");n.classList.add("to-do-item-priority-star","material-symbols-sharp","no-select"),n.textContent="Star",e>=t.getPriority()?n.classList.add("to-do-item-priority-star-off"):n.classList.add("to-do-item-priority-star-on"),n.addEventListener("click",(()=>{t.setPriority(e+1),y()})),A.appendChild(n)}a.appendChild(A)},v=()=>{u&&u.remove(),u=document.createElement("button"),u.classList.add("to-do-item-completed-item-button","material-symbols-rounded"),u.textContent="Done",u.addEventListener("click",(()=>{t.getCompleted()?(t.setCompleted(!1),r.classList.remove("completed-item")):(t.setCompleted(!0),r.classList.add("completed-item")),I()})),r.appendChild(u)},w=()=>{m&&m.remove(),m=document.createElement("button"),m.classList.add("to-do-item-delete-button","material-symbols-rounded"),m.textContent="Delete",m.addEventListener("click",n),r.appendChild(m)},k=()=>{g&&g.remove(),g=document.createElement("div"),g.classList.add("to-do-item-description"),p.appendChild(g);const e=document.createElement("label");e.classList.add("to-do-item-description-label","material-symbols-rounded"),e.textContent="Edit",g.appendChild(e);const n=document.createElement("textarea");n.classList.add("to-do-item-description-input"),n.setAttribute("placeholder","No description."),n.value=t.getDescription(),n.addEventListener("input",(()=>{t.setDescription(n.value),n.value=t.getDescription(),n.style.height="5px",n.style.height=`${n.scrollHeight}px`})),e.appendChild(n),n.style.height="0px",n.style.height=`${n.scrollHeight}px`,""===n.value&&(n.style.height="0px",n.value="a",n.style.height=`${n.scrollHeight}px`,n.value="")},E=()=>{h&&h.remove(),h=document.createElement("div"),h.classList.add("to-do-item-notes"),p.appendChild(h);const e=document.createElement("ul");e.classList.add("to-do-item-notes-list"),h.appendChild(e);const n=(n="")=>{const o=document.createElement("li");o.classList.add("to-do-item-notes-list-item"),e.appendChild(o);const r=document.createElement("textarea");r.classList.add("to-do-item-notes-list-item-input"),r.setAttribute("placeholder","New Item"),r.value=n,r.addEventListener("input",(()=>{const n=Array.prototype.indexOf.call(e.children,o);t.setNote(n,r.value),r.value=t.getNotes()[n],r.style.height="5px",r.style.height=`${r.scrollHeight}px`})),o.appendChild(r),r.style.height="0px",r.style.height=`${r.scrollHeight}px`,""===r.value&&(r.style.height="0px",r.value="a",r.style.height=`${r.scrollHeight}px`,r.value="");const i=document.createElement("button");i.classList.add("to-do-item-notes-list-item-delete-button","material-symbols-rounded"),i.textContent="Delete",i.addEventListener("click",(()=>{const n=Array.prototype.indexOf.call(e.children,o);t.removeNote(n),o.remove()})),o.appendChild(i)};t.getNotes().forEach((e=>n(e)));const o=document.createElement("button");o.classList.add("to-do-item-notes-new-note-button","material-symbols-rounded"),o.textContent="Add",o.addEventListener("click",(()=>{t.newNote(""),n()})),h.appendChild(o)},j=()=>{C&&C.remove(),C=document.createElement("div"),C.classList.add("to-do-item-checklist"),p.appendChild(C);const e=document.createElement("ul");e.classList.add("to-do-item-checklist-list"),C.appendChild(e);const n=(n="",o=!1)=>{const r=document.createElement("li");r.classList.add("to-do-item-checklist-list-item"),e.appendChild(r);const i=document.createElement("input");i.classList.add("to-do-item-checklist-list-item-checkbox"),i.setAttribute("type","checkbox"),i.checked=o,i.addEventListener("click",(()=>{const n=Array.prototype.indexOf.call(e.children,r);t.setChecklistItemState(n,i.checked)})),r.appendChild(i);const a=document.createElement("textarea");a.classList.add("to-do-item-checklist-list-item-input"),a.setAttribute("placeholder","New Item"),a.value=n,a.addEventListener("input",(()=>{const n=Array.prototype.indexOf.call(e.children,r);t.setChecklistItemName(n,a.value),a.value=t.getChecklistItemName(n),a.style.height="5px",a.style.height=`${a.scrollHeight}px`})),r.appendChild(a),a.style.height="0px",a.style.height=`${a.scrollHeight}px`,""===a.value&&(a.style.height="0px",a.value="a",a.style.height=`${a.scrollHeight}px`,a.value="");const s=document.createElement("button");s.classList.add("to-do-item-checklist-list-item-delete-button","material-symbols-rounded"),s.textContent="Delete",s.addEventListener("click",(()=>{const n=Array.prototype.indexOf.call(e.children,r);t.removeChecklistItem(n),r.remove()})),r.appendChild(s)},o=t.getChecklistLength();for(let e=0;e<o;e++)n(t.getChecklistItemName(e),t.getChecklistItemState(e));const r=document.createElement("button");r.classList.add("to-do-item-checklist-new-checklist-item-button","material-symbols-rounded"),r.textContent="Add",r.addEventListener("click",(()=>{t.newChecklistItem("",!1),n()})),C.appendChild(r)};return f(),{e:r,setExpanded:e=>{"boolean"==typeof e&&(o=e),f()},setDeleteButtonFunction:e=>{n=e,m&&w()},refresh:()=>{I()},toJSON:()=>t.toJSON()}};var xe=n(806),ke={};xe.Z&&xe.Z.locals&&(ke.locals=xe.Z.locals);var Ee,je=0,De={};De.styleTagTransform=u(),De.setAttributes=d(),De.insert=a().bind(null,"head"),De.domAPI=r(),De.insertStyleElement=c(),ke.use=function(e){return De.options=e||{},je++||(Ee=t()(xe.Z,De)),ke},ke.unuse=function(){je>0&&!--je&&(Ee(),Ee=null)};const Se=ke;var Te=n(719),Le={};Te.Z&&Te.Z.locals&&(Le.locals=Te.Z.locals);var Ne,Me=0,qe={};qe.styleTagTransform=u(),qe.setAttributes=d(),qe.insert=a().bind(null,"head"),qe.domAPI=r(),qe.insertStyleElement=c(),Le.use=function(e){return qe.options=e||{},Me++||(Ne=t()(Te.Z,qe)),Le},Le.unuse=function(){Me>0&&!--Me&&(Ne(),Ne=null)};const ze=Le;(()=>{const e=document.createElement("div");e.classList.add("page"),document.querySelector("body").appendChild(e);const t=document.createElement("div");let n,o,r;t.classList.add("header"),e.appendChild(t);const i=document.createElement("div");let a;i.classList.add("content"),e.appendChild(i);let s=-1;const d=(()=>{let e=[];const t=n=>{if(e.length<100){for(let t=0;t<e.length;t++)if(JSON.parse(e[t]).name===n)return null;const r=C(n);return e.push(r.toJSON()),o(),t}return null},n=()=>{e=JSON.parse(localStorage.getItem("projects")||"[]")},o=()=>{localStorage.setItem("projects",JSON.stringify(e))};return function(e){let t;try{t=window.localStorage;const e="__storage_test__";return t.setItem(e,e),t.removeItem(e),!0}catch(e){return e instanceof DOMException&&(22===e.code||1014===e.code||"QuotaExceededError"===e.name||"NS_ERROR_DOM_QUOTA_REACHED"===e.name)&&t&&0!==t.length}}()&&(localStorage.getItem("projects")?n():(s=0,t("My New Project"))),{newProject:t,checkProjectNameIsAvailable:t=>{for(let n=0;n<e.length;n++){const o=C();if(o.fromJSON(e[n]),o.getName()===t)return!1}return!0},setProject:(t,n)=>{t<0||t>e.length||(e[t]=n)},getProjects:()=>e,removeProject:t=>{t<0||t>e.length||(e.splice(t,1),o())},loadProjectsFromLocalStorage:n,saveProjectsToLocalStorage:o}})(),l=()=>{if(i){for(;i.firstChild;)i.lastChild.remove();n&&n.remove(),o&&o.remove(),r&&r.remove(),u(),Se.unuse(),ze.unuse(),-1===s?(Se.use(),c()):(ze.use(),p())}},c=()=>{n=document.createElement("h1"),n.classList.add("title"),n.textContent="My Projects",t.appendChild(n);const e=document.createElement("div");e.classList.add("project-container"),i.appendChild(e);let o=0;const r=d.getProjects();for(let t=0;t<r.length;t++){const n=o,i=C();i.fromJSON(r[t]);const a=Ae(i);e.appendChild(a.panel),a.editButton.addEventListener("click",(()=>{s=n,l()})),a.deleteButton.addEventListener("click",(()=>{d.removeProject(a.panel.getAttribute("index")),a.panel.remove();for(let t=0;t<e.children.length;t++)e.children[t].setAttribute("index",t)})),o++}const a=document.createElement("div");a.classList.add("new-project-panel"),e.appendChild(a),a.addEventListener("click",A);const c=document.createElement("h2");c.classList.add("new-project-panel-name","no-select"),c.textContent="New Project",a.appendChild(c);const u=document.createElement("h2");u.classList.add("new-project-panel-plus","no-select"),u.textContent="+",a.appendChild(u)},A=()=>{a=document.createElement("div"),a.classList.add("new-project-form-cover"),i.appendChild(a);const e=document.createElement("form");e.classList.add("new-project-form"),e.addEventListener("submit",m),a.appendChild(e);const t=document.createElement("button");t.classList.add("new-project-form-close-button","material-symbols-rounded"),t.textContent="Close",t.addEventListener("click",u),e.appendChild(t);const n=document.createElement("li");n.classList.add("new-project-form-name"),g(),r.addEventListener("input",(()=>{d.checkProjectNameIsAvailable(r.value)?r.classList.remove("name-taken"):r.classList.add("name-taken")})),n.appendChild(r),n.appendChild(o),e.appendChild(n);const s=document.createElement("button");s.classList.add("new-project-form-create-project-button","material-symbols-rounded"),s.setAttribute("type","submit"),s.textContent="Done",e.appendChild(s)},u=()=>{a&&a.remove()},m=e=>{e.preventDefault();const t=Object.fromEntries(new FormData(e.target).entries());d.checkProjectNameIsAvailable(t["project-name"])&&(d.newProject(t["project-name"]),l())},p=()=>{const e=C();e.fromJSON(d.getProjects()[s]),g(),r.value=e.getName(),r.addEventListener("input",(()=>{d.checkProjectNameIsAvailable(r.value)||r.value===e.getName()?r.classList.remove("name-taken"):r.classList.add("name-taken")})),r.addEventListener("focusout",(()=>{d.checkProjectNameIsAvailable(r.value)&&r.checkValidity()&&e.setName(r.value)})),t.appendChild(r),o.classList.add("material-symbols-rounded"),o.textContent="Edit",t.appendChild(o);const n=document.createElement("div");n.classList.add("to-do-list-container"),i.appendChild(n);const a=document.createElement("div");a.classList.add("project-buttons-container"),n.appendChild(a);const c=document.createElement("button");c.classList.add("project-buttons-return-to-list","material-symbols-rounded","no-select"),c.textContent="Format_List_Bulleted",a.appendChild(c),c.addEventListener("click",(()=>{s=-1,l()}));const A=document.createElement("button");A.classList.add("project-buttons-save-project","material-symbols-rounded","no-select"),A.textContent="Save",a.appendChild(A),A.addEventListener("click",(()=>{x()}));const u=document.createElement("div");u.classList.add("project-to-do-items-container"),n.appendChild(u);const m=document.createElement("button");m.classList.add("project-buttons-new-to-do-item","material-symbols-rounded","no-select"),m.textContent="Add",m.addEventListener("click",(()=>{if(e.getToDoItems().length+u.children.length<e.getMaxItemsAllowance()){const t=h();t.setUniqueID(e.getNewUniqueID());const n=we(t);n.e.classList.add("newly-created-item"),u.appendChild(n.e),n.setExpanded(!0);const o=document.createElement("button");o.classList.add("to-do-item-confirm-button","material-symbols-rounded"),o.textContent="Add",o.addEventListener("click",(()=>{u.removeChild(n.e);const o=t.toJSON();e.appendExistingToDoItem(o),v()})),n.setDeleteButtonFunction((()=>{u.removeChild(n.e)})),n.e.appendChild(o)}})),a.appendChild(m);const p=document.createElement("button");p.classList.add("project-buttons-refresh-to-do-items","material-symbols-rounded","no-select"),p.textContent="Refresh",p.addEventListener("click",(()=>{v()})),a.appendChild(p);const b=document.createElement("button");b.classList.add("project-buttons-sort-to-do-items","material-symbols-rounded","no-select"),b.textContent="Sort",b.addEventListener("click",(e=>{I.classList.add("open"),f(I),e.stopPropagation()})),a.appendChild(b);let B,I=(e=>{let t=document.createElement("div");t.classList.add("to-do-items-sort-menu"),t.textContent="Sort Items";let n=document.createElement("div");n.classList.add("to-do-items-sort-menu-separator"),t.appendChild(n);let o=document.createElement("div");o.classList.add("to-do-items-sort-menu-order-list"),t.appendChild(o);const r=(e,t)=>{let n=document.createElement("div");n.classList.add("to-do-items-sort-menu-order-list-item",`to-do-items-sort-menu-order-list-item-${t}`),n.textContent=e,o.appendChild(n);let r=document.createElement("button");r.classList.add("to-do-items-sort-menu-order-list-item-remove-button","material-symbols-rounded"),r.textContent="Close",r.addEventListener("click",(()=>{l(t),c(t),i()})),n.appendChild(r)},i=()=>{const t=e.getSortOrder();o.querySelectorAll(".to-do-items-sort-menu-order-list-item").forEach((e=>{e.classList.remove("sorting"),e.classList.add("not-sorting")}));for(let e=0;e<t.length;e++){const n=t[e],r=o.querySelector(`.to-do-items-sort-menu-order-list-item-${n}`);r.classList.add("sorting"),r.classList.remove("not-sorting"),o.insertBefore(r,o.children[e])}};r("Date Added","DATE_ADDED"),r("Due By","DUE_BY"),r("Priority","PRIORITY"),r("Status","STATUS"),r("Alphabetical","ALPHABETICAL"),i();let a=document.createElement("div");for(a.classList.add("to-do-items-sort-menu-options"),t.appendChild(a);a.firstChild;)a.lastChild.remove();const s=e=>{let t=document.createElement("div");t.classList.add("to-do-items-sort-menu-group"),t.textContent=e,a.appendChild(t)},d=(t,n,o)=>{let r=e.getSortOrder(),s=document.createElement("button");s.classList.add("to-do-items-sort-menu-type",`to-do-items-sort-menu-type-${n}`),-1!==r.indexOf(n)&&e.getSort(n)===o&&s.classList.add("current-sort"),s.textContent=t,s.addEventListener("click",(()=>{if(e.getSort(n)===o)l(n),s.classList.remove("current-sort");else{let t=e.getSortOrder();e.setSort(n,o),-1===t.indexOf(n)&&(t.push(n),e.setSort(t)),c(n),e.getSort(n)===o&&s.classList.add("current-sort")}i()})),a.appendChild(s)};s("Date Added"),d("Newest First","DATE_ADDED","NEWEST"),d("Oldest First","DATE_ADDED","OLDEST"),s("Due By"),d("Sooner First","DUE_BY","SOONER"),d("Later First","DUE_BY","LATER"),s("Priority"),d("High to Low","PRIORITY","HIGH"),d("Low to High","PRIORITY","LOW"),s("Status"),d("Incomplete Items First","STATUS","INCOMPLETE"),d("Complete Items First","STATUS","COMPLETE"),s("Alphabetical"),d("Normal","ALPHABETICAL","NORMAL"),d("Reversed","ALPHABETICAL","REVERSED");const l=t=>{e.setSort(t,"NONE");let n=e.getSortOrder();n.splice(n.indexOf(t),1),e.setSortOrder(n)},c=e=>{a.querySelectorAll(`.to-do-items-sort-menu-type-${e}`).forEach((e=>{e.classList.remove("current-sort")}))};return t})(e);a.appendChild(I),I.querySelectorAll(".to-do-items-sort-menu-order-list-item").forEach((e=>{e.addEventListener("click",(()=>{I.classList.remove("open"),w(),v()}))})),I.querySelectorAll(".to-do-items-sort-menu-type").forEach((e=>{e.addEventListener("click",(()=>{I.classList.remove("open"),w(),v()}))}));let y=[];const v=()=>{B&&B.remove(),y=[];const t=e.getToDoItems();if(B=document.createElement("div"),B.classList.add("project-to-do-items-container"),n.appendChild(B),t.forEach((t=>{const n=h();n.fromJSON(t),y.push(n);const o=we(n);o.setDeleteButtonFunction((()=>{B.removeChild(o.e);for(let t=0;t<y.length;t++)n.getUniqueID()===y[t].getUniqueID()&&(y.splice(t,1),e.removeToDoItem(t));0===e.getToDoItems().length&&v()})),B.appendChild(o.e)})),0===t.length){const e=document.createElement("div");e.classList.add("to-do-item-prompt"),e.textContent="Press the '+' button to add a new to-do item to your project",B.appendChild(e)}};v();const w=()=>{y.forEach(((t,n)=>{e.setToDoItem(n,t.toJSON())}))},x=()=>{const t=e.toJSON();d.setProject(s,t),d.saveProjectsToLocalStorage()}},g=()=>{o=document.createElement("label"),o.classList.add("project-name-label"),o.setAttribute("for","project-name"),o.setAttribute("help","This name is already taken."),o.textContent="Project Name",r=document.createElement("input"),r.classList.add("project-name-input"),r.setAttribute("type","text"),r.setAttribute("name","project-name"),r.setAttribute("id","project-name"),r.setAttribute("minlength",1),r.setAttribute("maxlength",75),r.setAttribute("title","Please enter a name for your project using only alphanumeric characters, hyphens, underscores and spaces."),r.setAttribute("required",!0),r.setAttribute("placeholder"," "),r.setAttribute("pattern","[A-Za-z0-9 _\\-']+")},f=e=>{const t=n=>{e.contains(n.target)||(e.classList.remove("open"),document.removeEventListener("click",t))};document.addEventListener("click",t)};l()})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,