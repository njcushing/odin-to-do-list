(()=>{"use strict";var e={28:(e,t,n)=>{n.d(t,{Z:()=>d});var o=n(537),r=n.n(o),a=n(645),i=n.n(a)()(r());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Nunito:wght@300&family=Righteous&family=Staatliches&family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,0,0&family=Material+Symbols+Sharp:opsz,wght,FILL,GRAD@48,700,1,0&display=swap);"]),i.push([e.id,'/* Fonts */\n\n:root {\n    --nunito-font-family: Nunito, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    --righteous-font-family: Righteous, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    font-size: 20px;\n}\n\n.no-select {\n    -webkit-touch-callout: none;    /* iOS Safari */\n    -webkit-user-select: none;      /* Safari */\n    -khtml-user-select: none;       /* Konqueror HTML */\n    -moz-user-select: none;         /* Old versions of Firefox */\n    -ms-user-select: none;          /* Internet Explorer/Edge */\n    user-select: none;              /* Non-prefixed version, currently\n                                       supported by Chrome, Edge, Opera and Firefox */\n}\n\nh1, h2, h3, h4, h5, h6 {\n    padding: 0px;\n    margin: 0px;\n}\n\nbody {\n    font-family: Nunito, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    font-family: var(--nunito-font-family);\n    margin: 0;\n    justify-content: center;\n    min-width: 100vw;\n    min-height: 100vh;\n    height: 100vh;\n}\n\n.page {\n    display: grid;\n    grid-template-rows: auto 1fr;\n    width: inherit;\n    height: 100vh;\n}\n\n.header {\n    grid-area: 1 / 1 / 2 / -1;\n    background-color: #ffffff;\n    padding: 30px 10px;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    z-index: 0;\n    height: 2.8rem;\n}\n\n.content {\n    grid-area: 2 / 1 / -1 / -1;\n    padding: 20px;\n    background-color: #e4e4e4;\n}',"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA,UAAU;;AAGV;IACI;4EACwE;IACxE;4EACwE;IACxE,eAAe;AACnB;;AAEA;IACI,2BAA2B,KAAK,eAAe;IAC/C,yBAAyB,OAAO,WAAW;IAC3C,wBAAwB,QAAQ,mBAAmB;IACnD,sBAAsB,UAAU,4BAA4B;IAC5D,qBAAqB,WAAW,2BAA2B;IAC3D,iBAAiB,eAAe;qFACiD;AACrF;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI;4EACwE;IACxE,sCAAsC;IACtC,SAAS;IACT,uBAAuB;IACvB,gBAAgB;IAChB,iBAAiB;IACjB,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,4BAA4B;IAC5B,cAAc;IACd,aAAa;AACjB;;AAEA;IACI,yBAAyB;IACzB,yBAAyB;IACzB,kBAAkB;IAClB,qDAAqD;IACrD,UAAU;IACV,cAAc;AAClB;;AAEA;IACI,0BAA0B;IAC1B,aAAa;IACb,yBAAyB;AAC7B",sourcesContent:['/* Fonts */\n@import url(\'https://fonts.googleapis.com/css2?family=Nunito:wght@300&family=Righteous&family=Staatliches&family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,0,0&family=Material+Symbols+Sharp:opsz,wght,FILL,GRAD@48,700,1,0&display=swap\');\n\n:root {\n    --nunito-font-family: Nunito, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    --righteous-font-family: Righteous, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    font-size: 20px;\n}\n\n.no-select {\n    -webkit-touch-callout: none;    /* iOS Safari */\n    -webkit-user-select: none;      /* Safari */\n    -khtml-user-select: none;       /* Konqueror HTML */\n    -moz-user-select: none;         /* Old versions of Firefox */\n    -ms-user-select: none;          /* Internet Explorer/Edge */\n    user-select: none;              /* Non-prefixed version, currently\n                                       supported by Chrome, Edge, Opera and Firefox */\n}\n\nh1, h2, h3, h4, h5, h6 {\n    padding: 0px;\n    margin: 0px;\n}\n\nbody {\n    font-family: Nunito, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    font-family: var(--nunito-font-family);\n    margin: 0;\n    justify-content: center;\n    min-width: 100vw;\n    min-height: 100vh;\n    height: 100vh;\n}\n\n.page {\n    display: grid;\n    grid-template-rows: auto 1fr;\n    width: inherit;\n    height: 100vh;\n}\n\n.header {\n    grid-area: 1 / 1 / 2 / -1;\n    background-color: #ffffff;\n    padding: 30px 10px;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    z-index: 0;\n    height: 2.8rem;\n}\n\n.content {\n    grid-area: 2 / 1 / -1 / -1;\n    padding: 20px;\n    background-color: #e4e4e4;\n}'],sourceRoot:""}]);const d=i},719:(e,t,n)=>{n.d(t,{Z:()=>d});var o=n(537),r=n.n(o),a=n(645),i=n.n(a)()(r());i.push([e.id,'.header {\n    display: flex;\n    flex-direction: row-reverse;\n    justify-content: center;\n}\n\n.project-name-label {\n    font-size: 1.8rem;\n    align-self: center;\n}\n.project-name-label::before {\n    position: absolute;\n    font-size: 0.6rem;\n    white-space: nowrap;\n    color: transparent;\n    content: attr(help);\n    font-weight: normal;\n    top: 1.4rem;\n}\n.project-name-input {\n    text-align: center;\n    vertical-align: middle;\n    font-family: var(--nunito-font-family);\n    font-size: 1.2rem;\n    color: rgb(50, 50, 50);\n    background-color: transparent;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    outline: 1px solid rgb(70, 70, 70);\n    border: none;\n    border-radius: 0.2rem;\n    width: min(500px, calc(100% - 2rem));\n    margin-left: 0.3rem;\n}\n.project-name-input:hover {\n    outline: 2px solid rgb(70, 70, 70);\n}\n.project-name-input:focus {\n    background-color: rgba(0, 0, 0, 0.04);\n    outline: 2px solid rgb(70, 70, 70);\n}\n.project-name-input:focus:invalid,\n.project-name-input:not(:placeholder-shown):invalid,\n.project-name-input.name-taken {\n    outline-color: red;\n    background-color: rgba(255, 106, 106, 0.18);\n    border-color: red;\n}\n.project-name-input:not(:placeholder-shown).name-taken + .project-name-label::before {\n    color: red;\n}\n\n.to-do-list-container {\n    display: grid;\n    justify-content: center;\n    grid-template-rows: auto 1fr auto;\n    grid-template-columns: minmax(900px, 1280px);\n    gap: 20px;\n}\n\n.project-buttons-container {\n    display: grid;\n    grid-template-columns: 1fr repeat(3, auto);\n    gap: 10px;\n}\n\n.project-buttons-container > button {\n    font-size: 1.4rem;\n    text-align: center;\n    width: 2.4rem;\n    height: 2.4rem;\n    border: none;\n    border-radius: 9999px;\n    color: rgb(122, 122, 122);\n    background-color: #ffffff;\n}\n\n.project-buttons-return-to-list:hover {\n    color: rgb(236, 236, 236);\n    background-color: #3ea4d3;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-return-to-list:active {\n    color: rgb(236, 236, 236);\n    background-color: #2082af;\n}\n.project-buttons-new-to-do-item:hover {\n    color: rgb(236, 236, 236);\n    background-color: #47d147;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-new-to-do-item:active {\n    color: rgb(236, 236, 236);\n    background-color: #22ad22;\n}\n.project-buttons-sort-to-do-items:hover {\n    color: rgb(236, 236, 236);\n    background-color: #ecc825;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-sort-to-do-items:active {\n    color: rgb(236, 236, 236);\n    background-color: #d1af15;\n}\n.project-buttons-refresh-to-do-items:hover {\n    color: rgb(236, 236, 236);\n    background-color: #fa8bde;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-refresh-to-do-items:active {\n    color: rgb(236, 236, 236);\n    background-color: #d64ab3;\n}\n\n.project-to-do-items-container {\n    display: grid;\n    grid-template-rows: auto;\n    align-content: start;\n    gap: 10px;\n}\n\n.to-do-item {\n    display: grid;\n    grid-template-rows: auto;\n    grid-template-columns: auto 1fr;\n    gap: 0.4rem 0.4rem;\n}\n\n.overdue > .to-do-item-top-bar-information,\n.overdue > .to-do-item-expanded-information {\n    background-color: #f8d2d2;\n}\n.to-do-item.newly-created-item > .to-do-item-top-bar-information,\n.to-do-item.newly-created-item > .to-do-item-expanded-information {\n    background-color: #e1f3c4;\n}\n.completed-item > .to-do-item-top-bar-information,\n.completed-item > .to-do-item-expanded-information {\n    background-color: #eeeeee;\n}\n\n.to-do-item-expand-collapse-button,\n.to-do-item-confirm-button {\n    grid-area: 1 / 1 / 2 / 2;\n}\n.to-do-item-completed-item-button {\n    grid-area: 2 / 1 / 3 / 2;\n}\n.to-do-item-delete-button {\n    grid-area: 3 / 1 / 4 / 2;\n}\n.to-do-item-expand-collapse-button,\n.to-do-item-confirm-button,\n.to-do-item-completed-item-button,\n.to-do-item-delete-button {\n    font-size: 1.9rem;\n    width: 2.4rem;\n    height: 2.4rem;\n    border: none;\n    color: rgb(160, 160, 160);\n    background-color: #ffffff;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    margin: 0px;\n    padding: 0px;\n}\n.to-do-item-expand-collapse-button:hover,\n.to-do-item-confirm-button:hover,\n.to-do-item-completed-item-button:hover,\n.to-do-item-delete-button:hover {\n    color: rgb(146, 146, 146);\n    background-color: #eeeeee;\n}\n.to-do-item-expand-collapse-button:active,\n.to-do-item-confirm-button:active,\n.to-do-item-completed-item-button:active,\n.to-do-item-delete-button:active {\n    color: rgb(110, 110, 110);\n    background-color: #cfcfcf;\n}\n\n.to-do-item-top-bar-information {\n    grid-area: 1 / 2 / 2 / -1;\n    align-items: center;\n    display: grid;\n    grid-template-columns: 1fr repeat(3, auto);\n    background-color: #ffffff;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    height: 2.4rem;\n    gap: 10px;\n    padding: 0.0rem 0.4rem;\n}\n\n.to-do-item-edit-name {\n    color: rgb(122, 122, 122);\n    align-self: center;\n    vertical-align: middle;\n    width: 100%;\n    height: 1.7rem;\n    line-height: 1.7rem;\n}\n\n.to-do-item-name {\n    vertical-align: middle;\n    font-family: var(--nunito-font-family);\n    font-size: 1.2rem;\n    color: rgb(50, 50, 50);\n    background-color: transparent;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    border: none;\n    border-radius: 0.2rem;\n    width: min(500px, calc(100% - 2rem));\n    margin-left: 0.3rem;\n}\n.to-do-item-name:hover {\n    outline: 1px solid rgb(128, 128, 128);\n}\n.to-do-item-name:focus {\n    outline: 2px solid rgb(70, 70, 70);\n}\n.to-do-item-name:placeholder-shown {\n    font-size: 0.9rem;\n}\n\n.to-do-item-due-date {\n    grid-area: 1 / 2 / 2 / 3;\n    justify-self: end;\n    text-align: right;\n    font-size: 0.8rem;\n    font-weight: normal;\n    color: rgb(70, 70, 70);\n    white-space: nowrap;\n}\n::-webkit-datetime-edit {\n    display: none;\n}\n::-webkit-calendar-picker-indicator {\n    font-size: 1rem;\n    appearance: none;\n    border: none;\n    outline: none;\n    padding: 0px;\n    margin: 0px;\n}\n.to-do-item-due-date-picker {\n    grid-area: 1 / 3 / 2 / 4;\n    border: none;\n    outline: none;\n    padding: 0.1rem;\n    margin: 0px;\n    background-color: transparent;\n}\n.to-do-item-due-date-picker:hover {\n    outline: 1px solid rgb(128, 128, 128);\n    border-radius: 0.2rem;\n}\n.to-do-item-due-date-picker:focus {\n    outline: 2px solid rgb(70, 70, 70);\n    border-radius: 0.2rem;\n}\n\n.to-do-item-priority {\n    grid-area: 1 / 4 / 2 / 5;\n    justify-self: end;\n    display: flex;\n    flex-wrap: nowrap;\n}\n.to-do-item-priority-star {\n    color: rgb(70, 70, 70);\n    font-size: 1.0rem;\n}\n/* Using sibling selectors to access all 5 priority stars */\n.to-do-item-priority:not(:hover) .to-do-item-priority-star-on,\n.to-do-item-priority-star:hover,\n.to-do-item-priority-star:hover + .to-do-item-priority-star,\n.to-do-item-priority-star:hover + .to-do-item-priority-star + .to-do-item-priority-star,\n.to-do-item-priority-star:hover + .to-do-item-priority-star + .to-do-item-priority-star + .to-do-item-priority-star,\n.to-do-item-priority-star:hover + .to-do-item-priority-star + .to-do-item-priority-star + .to-do-item-priority-star + .to-do-item-priority-star {\n    color: rgb(255, 202, 56);\n}\n\n.to-do-item-expanded-information {\n    margin-top: -0.4rem;\n    grid-area: 2 / 2 / 5 / -1;\n    display: grid;\n    grid-template-rows: auto;\n    grid-template-columns: repeat(2, 50%);\n    background-color: #ffffff;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    padding: 0.0rem 0.4rem 0.4rem 0.4rem;\n}\n\n.to-do-item-description {\n    grid-area: 1 / 1 / 2 / -1;\n    width: 100%;\n}\n.to-do-item-description-label {\n    font-size: 0.8rem;\n    color: rgb(66, 66, 66);\n    align-items: end;\n}\n.to-do-item-description-input {\n    resize: none;\n    font-family: var(--nunito-font-family);\n    font-size: 0.8rem;\n    font-style: italic;\n    color: rgb(50, 50, 50);\n    background-color: transparent;\n    border: none;\n    border-radius: 0.2rem;\n    width: calc(100% - 0.3rem);\n}\n.to-do-item-description-input:hover {\n    outline: 1px solid rgb(128, 128, 128);\n    border-radius: 0.2rem;\n}\n.to-do-item-description-input:focus {\n    outline: 2px solid rgb(70, 70, 70);\n    border-radius: 0.2rem;\n}\n\n.to-do-item-notes::before {\n    content: "Notes";\n    font-size: 0.8rem;\n    color: rgb(66, 66, 66);\n}\n.to-do-item-notes {\n    display: grid;\n    grid-template-rows: repeat(2, auto);\n}\n.to-do-item-notes-list {\n    display: grid;\n    grid-template-rows: auto;\n    list-style: none;\n    padding: 0px;\n    margin: 0px;\n}\n.to-do-item-notes-list-item {\n    display: grid;\n    grid-template-columns: 1fr auto;\n    gap: 0.2rem;\n    margin-bottom: 0.3rem;\n}\n.to-do-item-notes-list-item-input {\n    font-family: var(--nunito-font-family);\n    font-size: 0.8rem;\n    color: rgb(50, 50, 50);\n    background-color: transparent;\n    outline: 1px solid rgb(70, 70, 70);\n    border: none;\n    border-radius: 0.2rem;\n}\n\n\n\n.to-do-item-notes-list-item-delete-button {\n    color: rgb(66, 66, 66);\n    background-color: #8f8f8f;\n    font-size: 0.8rem;\n    font-weight: normal;\n    border: none;\n    border-radius: 0.2rem;\n    width: auto;\n    height: 100%;\n}\n',"",{version:3,sources:["webpack://./src/styles/styles-tab-project.lazy.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,2BAA2B;IAC3B,uBAAuB;AAC3B;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;AACtB;AACA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,mBAAmB;IACnB,kBAAkB;IAClB,mBAAmB;IACnB,mBAAmB;IACnB,WAAW;AACf;AACA;IACI,kBAAkB;IAClB,sBAAsB;IACtB,sCAAsC;IACtC,iBAAiB;IACjB,sBAAsB;IACtB,6BAA6B;IAC7B,mBAAmB;IACnB,gBAAgB;IAChB,uBAAuB;IACvB,kCAAkC;IAClC,YAAY;IACZ,qBAAqB;IACrB,oCAAoC;IACpC,mBAAmB;AACvB;AACA;IACI,kCAAkC;AACtC;AACA;IACI,qCAAqC;IACrC,kCAAkC;AACtC;AACA;;;IAGI,kBAAkB;IAClB,2CAA2C;IAC3C,iBAAiB;AACrB;AACA;IACI,UAAU;AACd;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,iCAAiC;IACjC,4CAA4C;IAC5C,SAAS;AACb;;AAEA;IACI,aAAa;IACb,0CAA0C;IAC1C,SAAS;AACb;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;IAClB,aAAa;IACb,cAAc;IACd,YAAY;IACZ,qBAAqB;IACrB,yBAAyB;IACzB,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;IACzB,yBAAyB;IACzB,qDAAqD;AACzD;AACA;IACI,yBAAyB;IACzB,yBAAyB;AAC7B;AACA;IACI,yBAAyB;IACzB,yBAAyB;IACzB,qDAAqD;AACzD;AACA;IACI,yBAAyB;IACzB,yBAAyB;AAC7B;AACA;IACI,yBAAyB;IACzB,yBAAyB;IACzB,qDAAqD;AACzD;AACA;IACI,yBAAyB;IACzB,yBAAyB;AAC7B;AACA;IACI,yBAAyB;IACzB,yBAAyB;IACzB,qDAAqD;AACzD;AACA;IACI,yBAAyB;IACzB,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,wBAAwB;IACxB,oBAAoB;IACpB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,wBAAwB;IACxB,+BAA+B;IAC/B,kBAAkB;AACtB;;AAEA;;IAEI,yBAAyB;AAC7B;AACA;;IAEI,yBAAyB;AAC7B;AACA;;IAEI,yBAAyB;AAC7B;;AAEA;;IAEI,wBAAwB;AAC5B;AACA;IACI,wBAAwB;AAC5B;AACA;IACI,wBAAwB;AAC5B;AACA;;;;IAII,iBAAiB;IACjB,aAAa;IACb,cAAc;IACd,YAAY;IACZ,yBAAyB;IACzB,yBAAyB;IACzB,qDAAqD;IACrD,WAAW;IACX,YAAY;AAChB;AACA;;;;IAII,yBAAyB;IACzB,yBAAyB;AAC7B;AACA;;;;IAII,yBAAyB;IACzB,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;IACzB,mBAAmB;IACnB,aAAa;IACb,0CAA0C;IAC1C,yBAAyB;IACzB,qDAAqD;IACrD,cAAc;IACd,SAAS;IACT,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;IACzB,kBAAkB;IAClB,sBAAsB;IACtB,WAAW;IACX,cAAc;IACd,mBAAmB;AACvB;;AAEA;IACI,sBAAsB;IACtB,sCAAsC;IACtC,iBAAiB;IACjB,sBAAsB;IACtB,6BAA6B;IAC7B,mBAAmB;IACnB,gBAAgB;IAChB,uBAAuB;IACvB,YAAY;IACZ,qBAAqB;IACrB,oCAAoC;IACpC,mBAAmB;AACvB;AACA;IACI,qCAAqC;AACzC;AACA;IACI,kCAAkC;AACtC;AACA;IACI,iBAAiB;AACrB;;AAEA;IACI,wBAAwB;IACxB,iBAAiB;IACjB,iBAAiB;IACjB,iBAAiB;IACjB,mBAAmB;IACnB,sBAAsB;IACtB,mBAAmB;AACvB;AACA;IACI,aAAa;AACjB;AACA;IACI,eAAe;IACf,gBAAgB;IAChB,YAAY;IACZ,aAAa;IACb,YAAY;IACZ,WAAW;AACf;AACA;IACI,wBAAwB;IACxB,YAAY;IACZ,aAAa;IACb,eAAe;IACf,WAAW;IACX,6BAA6B;AACjC;AACA;IACI,qCAAqC;IACrC,qBAAqB;AACzB;AACA;IACI,kCAAkC;IAClC,qBAAqB;AACzB;;AAEA;IACI,wBAAwB;IACxB,iBAAiB;IACjB,aAAa;IACb,iBAAiB;AACrB;AACA;IACI,sBAAsB;IACtB,iBAAiB;AACrB;AACA,2DAA2D;AAC3D;;;;;;IAMI,wBAAwB;AAC5B;;AAEA;IACI,mBAAmB;IACnB,yBAAyB;IACzB,aAAa;IACb,wBAAwB;IACxB,qCAAqC;IACrC,yBAAyB;IACzB,qDAAqD;IACrD,oCAAoC;AACxC;;AAEA;IACI,yBAAyB;IACzB,WAAW;AACf;AACA;IACI,iBAAiB;IACjB,sBAAsB;IACtB,gBAAgB;AACpB;AACA;IACI,YAAY;IACZ,sCAAsC;IACtC,iBAAiB;IACjB,kBAAkB;IAClB,sBAAsB;IACtB,6BAA6B;IAC7B,YAAY;IACZ,qBAAqB;IACrB,0BAA0B;AAC9B;AACA;IACI,qCAAqC;IACrC,qBAAqB;AACzB;AACA;IACI,kCAAkC;IAClC,qBAAqB;AACzB;;AAEA;IACI,gBAAgB;IAChB,iBAAiB;IACjB,sBAAsB;AAC1B;AACA;IACI,aAAa;IACb,mCAAmC;AACvC;AACA;IACI,aAAa;IACb,wBAAwB;IACxB,gBAAgB;IAChB,YAAY;IACZ,WAAW;AACf;AACA;IACI,aAAa;IACb,+BAA+B;IAC/B,WAAW;IACX,qBAAqB;AACzB;AACA;IACI,sCAAsC;IACtC,iBAAiB;IACjB,sBAAsB;IACtB,6BAA6B;IAC7B,kCAAkC;IAClC,YAAY;IACZ,qBAAqB;AACzB;;;;AAIA;IACI,sBAAsB;IACtB,yBAAyB;IACzB,iBAAiB;IACjB,mBAAmB;IACnB,YAAY;IACZ,qBAAqB;IACrB,WAAW;IACX,YAAY;AAChB",sourcesContent:['.header {\n    display: flex;\n    flex-direction: row-reverse;\n    justify-content: center;\n}\n\n.project-name-label {\n    font-size: 1.8rem;\n    align-self: center;\n}\n.project-name-label::before {\n    position: absolute;\n    font-size: 0.6rem;\n    white-space: nowrap;\n    color: transparent;\n    content: attr(help);\n    font-weight: normal;\n    top: 1.4rem;\n}\n.project-name-input {\n    text-align: center;\n    vertical-align: middle;\n    font-family: var(--nunito-font-family);\n    font-size: 1.2rem;\n    color: rgb(50, 50, 50);\n    background-color: transparent;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    outline: 1px solid rgb(70, 70, 70);\n    border: none;\n    border-radius: 0.2rem;\n    width: min(500px, calc(100% - 2rem));\n    margin-left: 0.3rem;\n}\n.project-name-input:hover {\n    outline: 2px solid rgb(70, 70, 70);\n}\n.project-name-input:focus {\n    background-color: rgba(0, 0, 0, 0.04);\n    outline: 2px solid rgb(70, 70, 70);\n}\n.project-name-input:focus:invalid,\n.project-name-input:not(:placeholder-shown):invalid,\n.project-name-input.name-taken {\n    outline-color: red;\n    background-color: rgba(255, 106, 106, 0.18);\n    border-color: red;\n}\n.project-name-input:not(:placeholder-shown).name-taken + .project-name-label::before {\n    color: red;\n}\n\n.to-do-list-container {\n    display: grid;\n    justify-content: center;\n    grid-template-rows: auto 1fr auto;\n    grid-template-columns: minmax(900px, 1280px);\n    gap: 20px;\n}\n\n.project-buttons-container {\n    display: grid;\n    grid-template-columns: 1fr repeat(3, auto);\n    gap: 10px;\n}\n\n.project-buttons-container > button {\n    font-size: 1.4rem;\n    text-align: center;\n    width: 2.4rem;\n    height: 2.4rem;\n    border: none;\n    border-radius: 9999px;\n    color: rgb(122, 122, 122);\n    background-color: #ffffff;\n}\n\n.project-buttons-return-to-list:hover {\n    color: rgb(236, 236, 236);\n    background-color: #3ea4d3;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-return-to-list:active {\n    color: rgb(236, 236, 236);\n    background-color: #2082af;\n}\n.project-buttons-new-to-do-item:hover {\n    color: rgb(236, 236, 236);\n    background-color: #47d147;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-new-to-do-item:active {\n    color: rgb(236, 236, 236);\n    background-color: #22ad22;\n}\n.project-buttons-sort-to-do-items:hover {\n    color: rgb(236, 236, 236);\n    background-color: #ecc825;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-sort-to-do-items:active {\n    color: rgb(236, 236, 236);\n    background-color: #d1af15;\n}\n.project-buttons-refresh-to-do-items:hover {\n    color: rgb(236, 236, 236);\n    background-color: #fa8bde;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-refresh-to-do-items:active {\n    color: rgb(236, 236, 236);\n    background-color: #d64ab3;\n}\n\n.project-to-do-items-container {\n    display: grid;\n    grid-template-rows: auto;\n    align-content: start;\n    gap: 10px;\n}\n\n.to-do-item {\n    display: grid;\n    grid-template-rows: auto;\n    grid-template-columns: auto 1fr;\n    gap: 0.4rem 0.4rem;\n}\n\n.overdue > .to-do-item-top-bar-information,\n.overdue > .to-do-item-expanded-information {\n    background-color: #f8d2d2;\n}\n.to-do-item.newly-created-item > .to-do-item-top-bar-information,\n.to-do-item.newly-created-item > .to-do-item-expanded-information {\n    background-color: #e1f3c4;\n}\n.completed-item > .to-do-item-top-bar-information,\n.completed-item > .to-do-item-expanded-information {\n    background-color: #eeeeee;\n}\n\n.to-do-item-expand-collapse-button,\n.to-do-item-confirm-button {\n    grid-area: 1 / 1 / 2 / 2;\n}\n.to-do-item-completed-item-button {\n    grid-area: 2 / 1 / 3 / 2;\n}\n.to-do-item-delete-button {\n    grid-area: 3 / 1 / 4 / 2;\n}\n.to-do-item-expand-collapse-button,\n.to-do-item-confirm-button,\n.to-do-item-completed-item-button,\n.to-do-item-delete-button {\n    font-size: 1.9rem;\n    width: 2.4rem;\n    height: 2.4rem;\n    border: none;\n    color: rgb(160, 160, 160);\n    background-color: #ffffff;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    margin: 0px;\n    padding: 0px;\n}\n.to-do-item-expand-collapse-button:hover,\n.to-do-item-confirm-button:hover,\n.to-do-item-completed-item-button:hover,\n.to-do-item-delete-button:hover {\n    color: rgb(146, 146, 146);\n    background-color: #eeeeee;\n}\n.to-do-item-expand-collapse-button:active,\n.to-do-item-confirm-button:active,\n.to-do-item-completed-item-button:active,\n.to-do-item-delete-button:active {\n    color: rgb(110, 110, 110);\n    background-color: #cfcfcf;\n}\n\n.to-do-item-top-bar-information {\n    grid-area: 1 / 2 / 2 / -1;\n    align-items: center;\n    display: grid;\n    grid-template-columns: 1fr repeat(3, auto);\n    background-color: #ffffff;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    height: 2.4rem;\n    gap: 10px;\n    padding: 0.0rem 0.4rem;\n}\n\n.to-do-item-edit-name {\n    color: rgb(122, 122, 122);\n    align-self: center;\n    vertical-align: middle;\n    width: 100%;\n    height: 1.7rem;\n    line-height: 1.7rem;\n}\n\n.to-do-item-name {\n    vertical-align: middle;\n    font-family: var(--nunito-font-family);\n    font-size: 1.2rem;\n    color: rgb(50, 50, 50);\n    background-color: transparent;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    border: none;\n    border-radius: 0.2rem;\n    width: min(500px, calc(100% - 2rem));\n    margin-left: 0.3rem;\n}\n.to-do-item-name:hover {\n    outline: 1px solid rgb(128, 128, 128);\n}\n.to-do-item-name:focus {\n    outline: 2px solid rgb(70, 70, 70);\n}\n.to-do-item-name:placeholder-shown {\n    font-size: 0.9rem;\n}\n\n.to-do-item-due-date {\n    grid-area: 1 / 2 / 2 / 3;\n    justify-self: end;\n    text-align: right;\n    font-size: 0.8rem;\n    font-weight: normal;\n    color: rgb(70, 70, 70);\n    white-space: nowrap;\n}\n::-webkit-datetime-edit {\n    display: none;\n}\n::-webkit-calendar-picker-indicator {\n    font-size: 1rem;\n    appearance: none;\n    border: none;\n    outline: none;\n    padding: 0px;\n    margin: 0px;\n}\n.to-do-item-due-date-picker {\n    grid-area: 1 / 3 / 2 / 4;\n    border: none;\n    outline: none;\n    padding: 0.1rem;\n    margin: 0px;\n    background-color: transparent;\n}\n.to-do-item-due-date-picker:hover {\n    outline: 1px solid rgb(128, 128, 128);\n    border-radius: 0.2rem;\n}\n.to-do-item-due-date-picker:focus {\n    outline: 2px solid rgb(70, 70, 70);\n    border-radius: 0.2rem;\n}\n\n.to-do-item-priority {\n    grid-area: 1 / 4 / 2 / 5;\n    justify-self: end;\n    display: flex;\n    flex-wrap: nowrap;\n}\n.to-do-item-priority-star {\n    color: rgb(70, 70, 70);\n    font-size: 1.0rem;\n}\n/* Using sibling selectors to access all 5 priority stars */\n.to-do-item-priority:not(:hover) .to-do-item-priority-star-on,\n.to-do-item-priority-star:hover,\n.to-do-item-priority-star:hover + .to-do-item-priority-star,\n.to-do-item-priority-star:hover + .to-do-item-priority-star + .to-do-item-priority-star,\n.to-do-item-priority-star:hover + .to-do-item-priority-star + .to-do-item-priority-star + .to-do-item-priority-star,\n.to-do-item-priority-star:hover + .to-do-item-priority-star + .to-do-item-priority-star + .to-do-item-priority-star + .to-do-item-priority-star {\n    color: rgb(255, 202, 56);\n}\n\n.to-do-item-expanded-information {\n    margin-top: -0.4rem;\n    grid-area: 2 / 2 / 5 / -1;\n    display: grid;\n    grid-template-rows: auto;\n    grid-template-columns: repeat(2, 50%);\n    background-color: #ffffff;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    padding: 0.0rem 0.4rem 0.4rem 0.4rem;\n}\n\n.to-do-item-description {\n    grid-area: 1 / 1 / 2 / -1;\n    width: 100%;\n}\n.to-do-item-description-label {\n    font-size: 0.8rem;\n    color: rgb(66, 66, 66);\n    align-items: end;\n}\n.to-do-item-description-input {\n    resize: none;\n    font-family: var(--nunito-font-family);\n    font-size: 0.8rem;\n    font-style: italic;\n    color: rgb(50, 50, 50);\n    background-color: transparent;\n    border: none;\n    border-radius: 0.2rem;\n    width: calc(100% - 0.3rem);\n}\n.to-do-item-description-input:hover {\n    outline: 1px solid rgb(128, 128, 128);\n    border-radius: 0.2rem;\n}\n.to-do-item-description-input:focus {\n    outline: 2px solid rgb(70, 70, 70);\n    border-radius: 0.2rem;\n}\n\n.to-do-item-notes::before {\n    content: "Notes";\n    font-size: 0.8rem;\n    color: rgb(66, 66, 66);\n}\n.to-do-item-notes {\n    display: grid;\n    grid-template-rows: repeat(2, auto);\n}\n.to-do-item-notes-list {\n    display: grid;\n    grid-template-rows: auto;\n    list-style: none;\n    padding: 0px;\n    margin: 0px;\n}\n.to-do-item-notes-list-item {\n    display: grid;\n    grid-template-columns: 1fr auto;\n    gap: 0.2rem;\n    margin-bottom: 0.3rem;\n}\n.to-do-item-notes-list-item-input {\n    font-family: var(--nunito-font-family);\n    font-size: 0.8rem;\n    color: rgb(50, 50, 50);\n    background-color: transparent;\n    outline: 1px solid rgb(70, 70, 70);\n    border: none;\n    border-radius: 0.2rem;\n}\n\n\n\n.to-do-item-notes-list-item-delete-button {\n    color: rgb(66, 66, 66);\n    background-color: #8f8f8f;\n    font-size: 0.8rem;\n    font-weight: normal;\n    border: none;\n    border-radius: 0.2rem;\n    width: auto;\n    height: 100%;\n}\n'],sourceRoot:""}]);const d=i},806:(e,t,n)=>{n.d(t,{Z:()=>d});var o=n(537),r=n.n(o),a=n(645),i=n.n(a)()(r());i.push([e.id,".header {\n    display: flex;\n    justify-content: center;\n}\n\n.title {\n    align-self: center;\n    font-size: 1.7rem;\n    font-weight: bold;\n    white-space: nowrap;\n}\n\n.content .project-container {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 240px);\n    justify-content: center;\n    align-content: start;\n    gap: 20px;\n    padding: 20px;\n}\n\n.content .project-panel,\n.content .new-project-panel {\n    display: grid;\n    grid-template-rows: 1fr repeat(2, auto);\n    text-align: center;\n    border-radius: 0.6rem;\n    height: 280px;\n    padding: 16px 18px 14px 18px;\n    gap: 6px;\n}\n.content .project-panel {\n    outline: 1px solid #6d6d6d;\n    grid-template-rows: 1fr repeat(2, auto);\n    background-image: linear-gradient(180deg, rgb(30, 148, 216), rgb(30, 148, 216) 8px, rgb(255, 255, 255) 8px);\n}\n.content .new-project-panel {\n    grid-template-rows: auto 1fr;\n    background-color: transparent;\n    outline: 2px dashed #6d6d6d;\n}\n.content .project-panel:hover {\n    background-image: linear-gradient(180deg, rgb(30, 148, 216), rgb(30, 148, 216) 8px, rgb(255, 255, 255) 8px);\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.content .new-project-panel:hover {\n    outline: 2px dashed #080808;\n}\n.content .new-project-panel:active {\n    background-color: rgba(128, 128, 128, 0.07);\n}\n.content .new-project-panel-name,\n.content .project-panel-name {\n    font-size: 1.4rem;\n}\n.content .project-panel-number-of-items {\n    font-size: 0.6rem;\n}\n.content .project-panel-date-created {\n    font-size: 0.8rem;\n}\n.content .new-project-panel-plus {\n    align-self: center;\n    color: rgb(46, 46, 46);\n    font-size: 5rem;\n    font-weight: normal;\n}\n.content .project-panel-separator {\n    justify-self: center;\n    border-radius: 9999px;\n    width: 104%;\n    height: 2px;\n    background-color: #dadada;\n    margin-bottom: 6px;\n}\n.content .project-panel-buttons-container {\n    display: flex;\n    justify-content: space-between;\n    flex-wrap: wrap;\n    gap: 6px;\n}\n.content .project-panel-buttons-edit,\n.content .project-panel-buttons-delete {\n    width: 40px;\n    height: 40px;\n    border: none;\n    border-radius: 9999px;\n    color: white;\n    text-align: center;\n}\n.content .project-panel-buttons-edit {\n    background-color: #31c22c;\n}\n.content .project-panel-buttons-edit:hover {\n    background-color: #4bdb46;\n}\n.content .project-panel-buttons-edit:active {\n    background-color: #23aa1f;\n}\n.content .project-panel-buttons-delete {\n    background-color: #e73333;\n}\n.content .project-panel-buttons-delete:hover {\n    background-color: #f54e4e;\n}\n.content .project-panel-buttons-delete:active {\n    background-color: #c51717;\n}\n\n.new-project-form-cover {\n    display: grid;\n    place-content: center;\n    position: fixed;\n    top: 0px;\n    left: 0px;\n    width: 100vw;\n    height: 100vh;\n    background-color: rgba(0, 0, 0, 0.6);\n}\n\n.new-project-form {\n    display: grid;\n    grid-template-rows: auto;\n    border-radius: 1.2rem;\n    background-color: #fff;\n    padding: 14px;\n    gap: 10px;\n}\n\n.new-project-form-close-button,\n.new-project-form-create-project-button {\n    width: 30px;\n    height: 30px;\n    border: none;\n    border-radius: 9999px;\n    color: white;\n    text-align: center;\n    font-size: 1rem;\n    padding: 0px;\n}\n.new-project-form-close-button {\n    justify-self: end;\n    background-color: #e73333;\n    margin-bottom: 1rem;\n}\n.new-project-form-close-button:hover {\n    background-color: #f54e4e;\n}\n.new-project-form-close-button:active {\n    background-color: #c51717;\n}\n.new-project-form-create-project-button {\n    justify-self: center;\n    background-color: #31c22c;\n    margin-top: 1rem;\n}\n.new-project-form-create-project-button:hover {\n    background-color: #4bdb46;\n}\n.new-project-form-create-project-button:active {\n    background-color: #23aa1f;\n}\n\n.new-project-form > li {\n    display: flex;\n    justify-content: space-between;\n    flex-direction: row-reverse;\n    gap: 10px;\n}\n.new-project-form > li > input[required]:valid {\n    outline-color: rgb(31, 187, 0);\n    background-color: rgba(123, 255, 106, 0.18);\n    border-color: rgb(31, 187, 0);\n}\n.new-project-form > li > input[required]:focus:invalid,\n.new-project-form > li > input[required]:not(:placeholder-shown):invalid,\n.new-project-form > li > input[required].name-taken {\n    outline-color: red;\n    background-color: rgba(255, 106, 106, 0.18);\n    border-color: red;\n}\n\n.new-project-form-name > label {\n    position: relative;\n    font-size: 0.9rem;\n    white-space: nowrap;\n}\n.new-project-form > li > label::before {\n    position: absolute;\n    font-size: 0.6rem;\n    white-space: nowrap;\n    color: transparent;\n    content: attr(help);\n    font-weight: normal;\n    top: 1.4rem;\n}\n.new-project-form-name > input:not(:placeholder-shown).name-taken + label::before {\n    color: red;\n}\n\n.new-project-form-name > input {\n    font-size: 0.7rem;\n    border-radius: 6px;\n    border: 1px solid #000;\n    min-width: 80px;\n    width: 320px;\n}","",{version:3,sources:["webpack://./src/styles/styles-tab-projectlist.lazy.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,iBAAiB;IACjB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,8CAA8C;IAC9C,uBAAuB;IACvB,oBAAoB;IACpB,SAAS;IACT,aAAa;AACjB;;AAEA;;IAEI,aAAa;IACb,uCAAuC;IACvC,kBAAkB;IAClB,qBAAqB;IACrB,aAAa;IACb,4BAA4B;IAC5B,QAAQ;AACZ;AACA;IACI,0BAA0B;IAC1B,uCAAuC;IACvC,2GAA2G;AAC/G;AACA;IACI,4BAA4B;IAC5B,6BAA6B;IAC7B,2BAA2B;AAC/B;AACA;IACI,2GAA2G;IAC3G,qDAAqD;AACzD;AACA;IACI,2BAA2B;AAC/B;AACA;IACI,2CAA2C;AAC/C;AACA;;IAEI,iBAAiB;AACrB;AACA;IACI,iBAAiB;AACrB;AACA;IACI,iBAAiB;AACrB;AACA;IACI,kBAAkB;IAClB,sBAAsB;IACtB,eAAe;IACf,mBAAmB;AACvB;AACA;IACI,oBAAoB;IACpB,qBAAqB;IACrB,WAAW;IACX,WAAW;IACX,yBAAyB;IACzB,kBAAkB;AACtB;AACA;IACI,aAAa;IACb,8BAA8B;IAC9B,eAAe;IACf,QAAQ;AACZ;AACA;;IAEI,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,qBAAqB;IACrB,YAAY;IACZ,kBAAkB;AACtB;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,qBAAqB;IACrB,eAAe;IACf,QAAQ;IACR,SAAS;IACT,YAAY;IACZ,aAAa;IACb,oCAAoC;AACxC;;AAEA;IACI,aAAa;IACb,wBAAwB;IACxB,qBAAqB;IACrB,sBAAsB;IACtB,aAAa;IACb,SAAS;AACb;;AAEA;;IAEI,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,qBAAqB;IACrB,YAAY;IACZ,kBAAkB;IAClB,eAAe;IACf,YAAY;AAChB;AACA;IACI,iBAAiB;IACjB,yBAAyB;IACzB,mBAAmB;AACvB;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,oBAAoB;IACpB,yBAAyB;IACzB,gBAAgB;AACpB;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,2BAA2B;IAC3B,SAAS;AACb;AACA;IACI,8BAA8B;IAC9B,2CAA2C;IAC3C,6BAA6B;AACjC;AACA;;;IAGI,kBAAkB;IAClB,2CAA2C;IAC3C,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,mBAAmB;AACvB;AACA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,mBAAmB;IACnB,kBAAkB;IAClB,mBAAmB;IACnB,mBAAmB;IACnB,WAAW;AACf;AACA;IACI,UAAU;AACd;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;IAClB,sBAAsB;IACtB,eAAe;IACf,YAAY;AAChB",sourcesContent:[".header {\n    display: flex;\n    justify-content: center;\n}\n\n.title {\n    align-self: center;\n    font-size: 1.7rem;\n    font-weight: bold;\n    white-space: nowrap;\n}\n\n.content .project-container {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 240px);\n    justify-content: center;\n    align-content: start;\n    gap: 20px;\n    padding: 20px;\n}\n\n.content .project-panel,\n.content .new-project-panel {\n    display: grid;\n    grid-template-rows: 1fr repeat(2, auto);\n    text-align: center;\n    border-radius: 0.6rem;\n    height: 280px;\n    padding: 16px 18px 14px 18px;\n    gap: 6px;\n}\n.content .project-panel {\n    outline: 1px solid #6d6d6d;\n    grid-template-rows: 1fr repeat(2, auto);\n    background-image: linear-gradient(180deg, rgb(30, 148, 216), rgb(30, 148, 216) 8px, rgb(255, 255, 255) 8px);\n}\n.content .new-project-panel {\n    grid-template-rows: auto 1fr;\n    background-color: transparent;\n    outline: 2px dashed #6d6d6d;\n}\n.content .project-panel:hover {\n    background-image: linear-gradient(180deg, rgb(30, 148, 216), rgb(30, 148, 216) 8px, rgb(255, 255, 255) 8px);\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.content .new-project-panel:hover {\n    outline: 2px dashed #080808;\n}\n.content .new-project-panel:active {\n    background-color: rgba(128, 128, 128, 0.07);\n}\n.content .new-project-panel-name,\n.content .project-panel-name {\n    font-size: 1.4rem;\n}\n.content .project-panel-number-of-items {\n    font-size: 0.6rem;\n}\n.content .project-panel-date-created {\n    font-size: 0.8rem;\n}\n.content .new-project-panel-plus {\n    align-self: center;\n    color: rgb(46, 46, 46);\n    font-size: 5rem;\n    font-weight: normal;\n}\n.content .project-panel-separator {\n    justify-self: center;\n    border-radius: 9999px;\n    width: 104%;\n    height: 2px;\n    background-color: #dadada;\n    margin-bottom: 6px;\n}\n.content .project-panel-buttons-container {\n    display: flex;\n    justify-content: space-between;\n    flex-wrap: wrap;\n    gap: 6px;\n}\n.content .project-panel-buttons-edit,\n.content .project-panel-buttons-delete {\n    width: 40px;\n    height: 40px;\n    border: none;\n    border-radius: 9999px;\n    color: white;\n    text-align: center;\n}\n.content .project-panel-buttons-edit {\n    background-color: #31c22c;\n}\n.content .project-panel-buttons-edit:hover {\n    background-color: #4bdb46;\n}\n.content .project-panel-buttons-edit:active {\n    background-color: #23aa1f;\n}\n.content .project-panel-buttons-delete {\n    background-color: #e73333;\n}\n.content .project-panel-buttons-delete:hover {\n    background-color: #f54e4e;\n}\n.content .project-panel-buttons-delete:active {\n    background-color: #c51717;\n}\n\n.new-project-form-cover {\n    display: grid;\n    place-content: center;\n    position: fixed;\n    top: 0px;\n    left: 0px;\n    width: 100vw;\n    height: 100vh;\n    background-color: rgba(0, 0, 0, 0.6);\n}\n\n.new-project-form {\n    display: grid;\n    grid-template-rows: auto;\n    border-radius: 1.2rem;\n    background-color: #fff;\n    padding: 14px;\n    gap: 10px;\n}\n\n.new-project-form-close-button,\n.new-project-form-create-project-button {\n    width: 30px;\n    height: 30px;\n    border: none;\n    border-radius: 9999px;\n    color: white;\n    text-align: center;\n    font-size: 1rem;\n    padding: 0px;\n}\n.new-project-form-close-button {\n    justify-self: end;\n    background-color: #e73333;\n    margin-bottom: 1rem;\n}\n.new-project-form-close-button:hover {\n    background-color: #f54e4e;\n}\n.new-project-form-close-button:active {\n    background-color: #c51717;\n}\n.new-project-form-create-project-button {\n    justify-self: center;\n    background-color: #31c22c;\n    margin-top: 1rem;\n}\n.new-project-form-create-project-button:hover {\n    background-color: #4bdb46;\n}\n.new-project-form-create-project-button:active {\n    background-color: #23aa1f;\n}\n\n.new-project-form > li {\n    display: flex;\n    justify-content: space-between;\n    flex-direction: row-reverse;\n    gap: 10px;\n}\n.new-project-form > li > input[required]:valid {\n    outline-color: rgb(31, 187, 0);\n    background-color: rgba(123, 255, 106, 0.18);\n    border-color: rgb(31, 187, 0);\n}\n.new-project-form > li > input[required]:focus:invalid,\n.new-project-form > li > input[required]:not(:placeholder-shown):invalid,\n.new-project-form > li > input[required].name-taken {\n    outline-color: red;\n    background-color: rgba(255, 106, 106, 0.18);\n    border-color: red;\n}\n\n.new-project-form-name > label {\n    position: relative;\n    font-size: 0.9rem;\n    white-space: nowrap;\n}\n.new-project-form > li > label::before {\n    position: absolute;\n    font-size: 0.6rem;\n    white-space: nowrap;\n    color: transparent;\n    content: attr(help);\n    font-weight: normal;\n    top: 1.4rem;\n}\n.new-project-form-name > input:not(:placeholder-shown).name-taken + label::before {\n    color: red;\n}\n\n.new-project-form-name > input {\n    font-size: 0.7rem;\n    border-radius: 6px;\n    border: 1px solid #000;\n    min-width: 80px;\n    width: 320px;\n}"],sourceRoot:""}]);const d=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var d=0;d<this.length;d++){var s=this[d][0];null!=s&&(i[s]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);o&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),t.push(c))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},i=[],d=0;d<e.length;d++){var s=e[d],l=o.base?s[0]+o.base:s[0],c=a[l]||0,A="".concat(l," ").concat(c);a[l]=c+1;var u=n(A),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var p=r(m,o);o.byIndex=d,t.splice(d,0,{identifier:A,updater:p,references:1})}i.push(A)}return i}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var d=n(a[i]);t[d].references--}for(var s=o(e,r),l=0;l<a.length;l++){var c=n(a[l]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}a=s}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),o=n(795),r=n.n(o),a=n(569),i=n.n(a),d=n(565),s=n.n(d),l=n(216),c=n.n(l),A=n(589),u=n.n(A),m=n(28),p={};p.styleTagTransform=u(),p.setAttributes=s(),p.insert=i().bind(null,"head"),p.domAPI=r(),p.insertStyleElement=c(),t()(m.Z,p),m.Z&&m.Z.locals&&m.Z.locals;const f=(e,t,n)=>Math.max(Math.min(e,Math.max(t,n)),Math.min(t,n)),g=()=>{let e="New Item",t="",n=new Date,o=new Date,r=0,a=[],i=[],d=!1;return n.setDate(n.getDate()+1),{setName:t=>{"string"==typeof t&&(t.length>75&&(t=t.slice(0,75)),e=t)},getName:()=>e,setDescription:e=>{"string"==typeof e&&(e.length>500&&(e=e.slice(0,500)),t=e)},getDescription:()=>t,setDueDateYear:e=>{"number"==typeof e&&(new Date,n.setFullYear(Math.floor(e)))},setDueDateMonth:e=>{"number"==typeof e&&(e=f(e,1,12),n.setMonth(Math.floor(e-1)))},setDueDateDay:e=>{"number"==typeof e&&(e=((e,t,n)=>{if("number"!=typeof t||"number"!=typeof n)return 1;switch(t){case 1:case 3:case 5:case 7:case 8:case 10:case 12:return f(n,1,31);case 4:case 6:case 9:case 11:return f(n,1,30);case 2:return f(n,1,e%400==0?29:e%100==0?28:e%4==0?29:28);default:return 1}})(n.getFullYear(),n.getMonth()+1,e),n.setDate(Math.floor(e)))},setDueDateHour:e=>{"number"==typeof e&&(e=f(e,0,23),n.setHours(Math.floor(e)))},setDueDateMinute:e=>{"number"==typeof e&&(e=f(e,0,59),n.setMinutes(Math.floor(e)))},getDueDate:()=>n,getDateCreated:()=>o,setPriority:e=>{"number"==typeof e&&(e=f(e,0,5),r=Math.floor(e))},getPriority:()=>r,newNote:e=>{"string"==typeof e&&(e.length>500&&(e=e.slice(0,500)),a.push(e))},setNote:(e,t)=>{"number"!=typeof e||e<0||e>=a.length||"string"==typeof t&&(t.length>500&&(t=t.slice(0,500)),a[e]=t)},getNotes:()=>a,removeNote:e=>{"number"!=typeof e||e<0||e>=a.length||a.splice(e,1)},addChecklistItem:(e,t)=>{i.push(((e="Checklist Item",t=!1)=>{let n="Checklist Item";"string"==typeof e&&(n=e);let o=!1;return"boolean"==typeof t&&(o=t),{setName:e=>{"string"==typeof e&&(e.length>75&&(e=e.slice(0,75)),n=e)},getName:()=>n,setState:e=>{"boolean"==typeof e&&(o=e)},getState:()=>o}})()),i[i.length-1].setName(e),i[i.length-1].setState(t)},getChecklist:()=>i,setCompleted:e=>{"boolean"==typeof e&&(d=e)},getCompleted:()=>d}};function h(e){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},h(e)}function C(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function b(e){C(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===h(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function B(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function v(e){C(1,arguments);var t=b(e),n=t.getUTCDay(),o=(n<1?7:0)+n-1;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function y(e){C(1,arguments);var t=b(e),n=t.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(n+1,0,4),o.setUTCHours(0,0,0,0);var r=v(o),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var i=v(a);return t.getTime()>=r.getTime()?n+1:t.getTime()>=i.getTime()?n:n-1}var w={};function I(){return w}function x(e,t){var n,o,r,a,i,d,s,l;C(1,arguments);var c=I(),A=B(null!==(n=null!==(o=null!==(r=null!==(a=null==t?void 0:t.weekStartsOn)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==r?r:c.weekStartsOn)&&void 0!==o?o:null===(s=c.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==n?n:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=b(e),m=u.getUTCDay(),p=(m<A?7:0)+m-A;return u.setUTCDate(u.getUTCDate()-p),u.setUTCHours(0,0,0,0),u}function j(e,t){var n,o,r,a,i,d,s,l;C(1,arguments);var c=b(e),A=c.getUTCFullYear(),u=I(),m=B(null!==(n=null!==(o=null!==(r=null!==(a=null==t?void 0:t.firstWeekContainsDate)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==r?r:u.firstWeekContainsDate)&&void 0!==o?o:null===(s=u.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==n?n:1);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var p=new Date(0);p.setUTCFullYear(A+1,0,m),p.setUTCHours(0,0,0,0);var f=x(p,t),g=new Date(0);g.setUTCFullYear(A,0,m),g.setUTCHours(0,0,0,0);var h=x(g,t);return c.getTime()>=f.getTime()?A+1:c.getTime()>=h.getTime()?A:A-1}function k(e,t){for(var n=e<0?"-":"",o=Math.abs(e).toString();o.length<t;)o="0"+o;return n+o}const D=function(e,t){var n=e.getUTCFullYear(),o=n>0?n:1-n;return k("yy"===t?o%100:o,t.length)},E=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):k(n+1,2)},M=function(e,t){return k(e.getUTCDate(),t.length)},T=function(e,t){return k(e.getUTCHours()%12||12,t.length)},S=function(e,t){return k(e.getUTCHours(),t.length)},L=function(e,t){return k(e.getUTCMinutes(),t.length)},z=function(e,t){return k(e.getUTCSeconds(),t.length)},Y=function(e,t){var n=t.length,o=e.getUTCMilliseconds();return k(Math.floor(o*Math.pow(10,n-3)),t.length)};var q={G:function(e,t,n){var o=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(o,{width:"abbreviated"});case"GGGGG":return n.era(o,{width:"narrow"});default:return n.era(o,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var o=e.getUTCFullYear(),r=o>0?o:1-o;return n.ordinalNumber(r,{unit:"year"})}return D(e,t)},Y:function(e,t,n,o){var r=j(e,o),a=r>0?r:1-r;return"YY"===t?k(a%100,2):"Yo"===t?n.ordinalNumber(a,{unit:"year"}):k(a,t.length)},R:function(e,t){return k(y(e),t.length)},u:function(e,t){return k(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var o=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(o);case"QQ":return k(o,2);case"Qo":return n.ordinalNumber(o,{unit:"quarter"});case"QQQ":return n.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(o,{width:"narrow",context:"formatting"});default:return n.quarter(o,{width:"wide",context:"formatting"})}},q:function(e,t,n){var o=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(o);case"qq":return k(o,2);case"qo":return n.ordinalNumber(o,{unit:"quarter"});case"qqq":return n.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(o,{width:"narrow",context:"standalone"});default:return n.quarter(o,{width:"wide",context:"standalone"})}},M:function(e,t,n){var o=e.getUTCMonth();switch(t){case"M":case"MM":return E(e,t);case"Mo":return n.ordinalNumber(o+1,{unit:"month"});case"MMM":return n.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(o,{width:"narrow",context:"formatting"});default:return n.month(o,{width:"wide",context:"formatting"})}},L:function(e,t,n){var o=e.getUTCMonth();switch(t){case"L":return String(o+1);case"LL":return k(o+1,2);case"Lo":return n.ordinalNumber(o+1,{unit:"month"});case"LLL":return n.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(o,{width:"narrow",context:"standalone"});default:return n.month(o,{width:"wide",context:"standalone"})}},w:function(e,t,n,o){var r=function(e,t){C(1,arguments);var n=b(e),o=x(n,t).getTime()-function(e,t){var n,o,r,a,i,d,s,l;C(1,arguments);var c=I(),A=B(null!==(n=null!==(o=null!==(r=null!==(a=null==t?void 0:t.firstWeekContainsDate)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==r?r:c.firstWeekContainsDate)&&void 0!==o?o:null===(s=c.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==n?n:1),u=j(e,t),m=new Date(0);return m.setUTCFullYear(u,0,A),m.setUTCHours(0,0,0,0),x(m,t)}(n,t).getTime();return Math.round(o/6048e5)+1}(e,o);return"wo"===t?n.ordinalNumber(r,{unit:"week"}):k(r,t.length)},I:function(e,t,n){var o=function(e){C(1,arguments);var t=b(e),n=v(t).getTime()-function(e){C(1,arguments);var t=y(e),n=new Date(0);return n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0),v(n)}(t).getTime();return Math.round(n/6048e5)+1}(e);return"Io"===t?n.ordinalNumber(o,{unit:"week"}):k(o,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):M(e,t)},D:function(e,t,n){var o=function(e){C(1,arguments);var t=b(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var o=n-t.getTime();return Math.floor(o/864e5)+1}(e);return"Do"===t?n.ordinalNumber(o,{unit:"dayOfYear"}):k(o,t.length)},E:function(e,t,n){var o=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},e:function(e,t,n,o){var r=e.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(t){case"e":return String(a);case"ee":return k(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(e,t,n,o){var r=e.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(t){case"c":return String(a);case"cc":return k(a,t.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(e,t,n){var o=e.getUTCDay(),r=0===o?7:o;switch(t){case"i":return String(r);case"ii":return k(r,t.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},a:function(e,t,n){var o=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(e,t,n){var o,r=e.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(e,t,n){var o,r=e.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var o=e.getUTCHours()%12;return 0===o&&(o=12),n.ordinalNumber(o,{unit:"hour"})}return T(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):S(e,t)},K:function(e,t,n){var o=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(o,{unit:"hour"}):k(o,t.length)},k:function(e,t,n){var o=e.getUTCHours();return 0===o&&(o=24),"ko"===t?n.ordinalNumber(o,{unit:"hour"}):k(o,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):L(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):z(e,t)},S:function(e,t){return Y(e,t)},X:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return U(r);case"XXXX":case"XX":return P(r);default:return P(r,":")}},x:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();switch(t){case"x":return U(r);case"xxxx":case"xx":return P(r);default:return P(r,":")}},O:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+N(r,":");default:return"GMT"+P(r,":")}},z:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+N(r,":");default:return"GMT"+P(r,":")}},t:function(e,t,n,o){var r=o._originalDate||e;return k(Math.floor(r.getTime()/1e3),t.length)},T:function(e,t,n,o){return k((o._originalDate||e).getTime(),t.length)}};function N(e,t){var n=e>0?"-":"+",o=Math.abs(e),r=Math.floor(o/60),a=o%60;if(0===a)return n+String(r);var i=t||"";return n+String(r)+i+k(a,2)}function U(e,t){return e%60==0?(e>0?"-":"+")+k(Math.abs(e)/60,2):P(e,t)}function P(e,t){var n=t||"",o=e>0?"-":"+",r=Math.abs(e);return o+k(Math.floor(r/60),2)+n+k(r%60,2)}const W=q;var F=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},O=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const H={p:O,P:function(e,t){var n,o=e.match(/(P+)(p+)?/)||[],r=o[1],a=o[2];if(!a)return F(e,t);switch(r){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",F(r,t)).replace("{{time}}",O(a,t))}};function R(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var Z=["D","DD"],G=["YY","YYYY"];function Q(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var X={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function _(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}const J={date:_({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:_({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:_({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var $={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function K(e){return function(t,n){var o;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,a=null!=n&&n.width?String(n.width):r;o=e.formattingValues[a]||e.formattingValues[r]}else{var i=e.defaultWidth,d=null!=n&&n.width?String(n.width):e.defaultWidth;o=e.values[d]||e.values[i]}return o[e.argumentCallback?e.argumentCallback(t):t]}}const V={ordinalNumber:function(e,t){var n=Number(e),o=n%100;if(o>20||o<10)switch(o%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:K({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:K({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:K({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:K({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:K({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function ee(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=n.width,r=o&&e.matchPatterns[o]||e.matchPatterns[e.defaultMatchWidth],a=t.match(r);if(!a)return null;var i,d=a[0],s=o&&e.parsePatterns[o]||e.parsePatterns[e.defaultParseWidth],l=Array.isArray(s)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(d))return n}(s):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(d))return n}(s);return i=e.valueCallback?e.valueCallback(l):l,{value:i=n.valueCallback?n.valueCallback(i):i,rest:t.slice(d.length)}}}var te,ne={ordinalNumber:(te={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(te.matchPattern);if(!n)return null;var o=n[0],r=e.match(te.parsePattern);if(!r)return null;var a=te.valueCallback?te.valueCallback(r[0]):r[0];return{value:a=t.valueCallback?t.valueCallback(a):a,rest:e.slice(o.length)}}),era:ee({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:ee({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:ee({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:ee({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:ee({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const oe={code:"en-US",formatDistance:function(e,t,n){var o,r=X[e];return o="string"==typeof r?r:1===t?r.one:r.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+o:o+" ago":o},formatLong:J,formatRelative:function(e,t,n,o){return $[e]},localize:V,match:ne,options:{weekStartsOn:0,firstWeekContainsDate:1}};var re=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ae=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ie=/^'([^]*?)'?$/,de=/''/g,se=/[a-zA-Z]/;function le(e,t,n){var o,r,a,i,d,s,l,c,A,u,m,p,f,g,v,y,w,x;C(2,arguments);var j=String(t),k=I(),D=null!==(o=null!==(r=null==n?void 0:n.locale)&&void 0!==r?r:k.locale)&&void 0!==o?o:oe,E=B(null!==(a=null!==(i=null!==(d=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(l=n.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==d?d:k.firstWeekContainsDate)&&void 0!==i?i:null===(A=k.locale)||void 0===A||null===(u=A.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:1);if(!(E>=1&&E<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var M=B(null!==(m=null!==(p=null!==(f=null!==(g=null==n?void 0:n.weekStartsOn)&&void 0!==g?g:null==n||null===(v=n.locale)||void 0===v||null===(y=v.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==f?f:k.weekStartsOn)&&void 0!==p?p:null===(w=k.locale)||void 0===w||null===(x=w.options)||void 0===x?void 0:x.weekStartsOn)&&void 0!==m?m:0);if(!(M>=0&&M<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!D.localize)throw new RangeError("locale must contain localize property");if(!D.formatLong)throw new RangeError("locale must contain formatLong property");var T=b(e);if(!function(e){if(C(1,arguments),!function(e){return C(1,arguments),e instanceof Date||"object"===h(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var t=b(e);return!isNaN(Number(t))}(T))throw new RangeError("Invalid time value");var S=function(e,t){return C(2,arguments),function(e,t){C(2,arguments);var n=b(e).getTime(),o=B(t);return new Date(n+o)}(e,-B(t))}(T,R(T)),L={firstWeekContainsDate:E,weekStartsOn:M,locale:D,_originalDate:T};return j.match(ae).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,H[t])(e,D.formatLong):e})).join("").match(re).map((function(o){if("''"===o)return"'";var r,a,i=o[0];if("'"===i)return(a=(r=o).match(ie))?a[1].replace(de,"'"):r;var d,s=W[i];if(s)return null!=n&&n.useAdditionalWeekYearTokens||(d=o,-1===G.indexOf(d))||Q(o,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!function(e){return-1!==Z.indexOf(e)}(o)||Q(o,t,String(e)),s(S,o,D.localize,L);if(i.match(se))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return o})).join("")}const ce=e=>{const t=e.getToDoItems();let n=document.createElement("div");n.classList.add("project-panel");let o=document.createElement("h2");o.classList.add("project-panel-name","no-select"),o.textContent=e.getName(),n.appendChild(o);let r=document.createElement("h6");r.classList.add("project-panel-number-of-items","no-select"),r.textContent=`Number of Items: ${t.length}`,n.appendChild(r);let a=document.createElement("h4");a.classList.add("project-panel-date-created","no-select"),a.textContent=`Created ${le(e.getDateCreated(),"do MMMM yyyy")}`,n.appendChild(a);let i=document.createElement("div");i.classList.add("project-panel-separator"),n.appendChild(i);let d=document.createElement("div");d.classList.add("project-panel-buttons-container");let s=document.createElement("button");s.classList.add("project-panel-buttons-edit","material-symbols-rounded","no-select"),s.textContent="Edit",d.appendChild(s);let l=document.createElement("button");return l.classList.add("project-panel-buttons-delete","material-symbols-rounded","no-select"),l.textContent="Delete",d.appendChild(l),n.appendChild(d),{panel:n,editButton:s,deleteButton:l}};function Ae(e,t){C(2,arguments);var n=b(e),o=b(t),r=n.getTime()-o.getTime();return r<0?-1:r>0?1:r}function ue(e,t){if(C(2,arguments),!t||"object"!==h(t))return new Date(NaN);var n=t.years?B(t.years):0,o=t.months?B(t.months):0,r=t.weeks?B(t.weeks):0,a=t.days?B(t.days):0,i=t.hours?B(t.hours):0,d=t.minutes?B(t.minutes):0,s=t.seconds?B(t.seconds):0,l=b(e),c=o||n?function(e,t){C(2,arguments);var n=b(e),o=B(t);if(isNaN(o))return new Date(NaN);if(!o)return n;var r=n.getDate(),a=new Date(n.getTime());return a.setMonth(n.getMonth()+o+1,0),r>=a.getDate()?a:(n.setFullYear(a.getFullYear(),a.getMonth(),r),n)}(l,o+12*n):l,A=a||r?function(e,t){C(2,arguments);var n=b(e),o=B(t);return isNaN(o)?new Date(NaN):o?(n.setDate(n.getDate()+o),n):n}(c,a+7*r):c,u=1e3*(s+60*(d+60*i));return new Date(A.getTime()+u)}function me(e){C(1,arguments);var t=b(e);return t.setHours(0,0,0,0),t}var pe=864e5;function fe(e,t){var n=e.getFullYear()-t.getFullYear()||e.getMonth()-t.getMonth()||e.getDate()-t.getDate()||e.getHours()-t.getHours()||e.getMinutes()-t.getMinutes()||e.getSeconds()-t.getSeconds()||e.getMilliseconds()-t.getMilliseconds();return n<0?-1:n>0?1:n}Math.pow(10,8);function ge(e,t){return C(2,arguments),b(e).getTime()-b(t).getTime()}var he={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(e){return e<0?Math.ceil(e):Math.floor(e)}},Ce="trunc";function be(e){return e?he[e]:he[Ce]}function Be(e,t){C(2,arguments);var n,o=b(e),r=b(t),a=Ae(o,r),i=Math.abs(function(e,t){C(2,arguments);var n=b(e),o=b(t);return 12*(n.getFullYear()-o.getFullYear())+(n.getMonth()-o.getMonth())}(o,r));if(i<1)n=0;else{1===o.getMonth()&&o.getDate()>27&&o.setDate(30),o.setMonth(o.getMonth()-a*i);var d=Ae(o,r)===-a;(function(e){C(1,arguments);var t=b(e);return function(e){C(1,arguments);var t=b(e);return t.setHours(23,59,59,999),t}(t).getTime()===function(e){C(1,arguments);var t=b(e),n=t.getMonth();return t.setFullYear(t.getFullYear(),n+1,0),t.setHours(23,59,59,999),t}(t).getTime()})(b(e))&&1===i&&1===Ae(e,r)&&(d=!1),n=a*(i-Number(d))}return 0===n?0:n}function ve(e){C(1,arguments);var t=b(e.start),n=b(e.end);if(isNaN(t.getTime()))throw new RangeError("Start Date is invalid");if(isNaN(n.getTime()))throw new RangeError("End Date is invalid");var o={};o.years=Math.abs(function(e,t){C(2,arguments);var n=b(e),o=b(t),r=Ae(n,o),a=Math.abs(function(e,t){C(2,arguments);var n=b(e),o=b(t);return n.getFullYear()-o.getFullYear()}(n,o));n.setFullYear(1584),o.setFullYear(1584);var i=Ae(n,o)===-r,d=r*(a-Number(i));return 0===d?0:d}(n,t));var r=Ae(n,t),a=ue(t,{years:r*o.years});o.months=Math.abs(Be(n,a));var i=ue(a,{months:r*o.months});o.days=Math.abs(function(e,t){C(2,arguments);var n=b(e),o=b(t),r=fe(n,o),a=Math.abs(function(e,t){C(2,arguments);var n=me(e),o=me(t),r=n.getTime()-R(n),a=o.getTime()-R(o);return Math.round((r-a)/pe)}(n,o));n.setDate(n.getDate()-r*a);var i=r*(a-Number(fe(n,o)===-r));return 0===i?0:i}(n,i));var d=ue(i,{days:r*o.days});o.hours=Math.abs(function(e,t,n){C(2,arguments);var o=ge(e,t)/36e5;return be(null==n?void 0:n.roundingMethod)(o)}(n,d));var s=ue(d,{hours:r*o.hours});o.minutes=Math.abs(function(e,t,n){C(2,arguments);var o=ge(e,t)/6e4;return be(null==n?void 0:n.roundingMethod)(o)}(n,s));var l=ue(s,{minutes:r*o.minutes});return o.seconds=Math.abs(function(e,t,n){C(2,arguments);var o=ge(e,t)/1e3;return be(null==n?void 0:n.roundingMethod)(o)}(n,l)),o}var ye=["years","months","weeks","days","hours","minutes","seconds"];const we=e=>{let t,n,o,r,a,i,d,s,l,c,A,u,m,p,f=e,g=!1,h=document.createElement("div");h.classList.add("to-do-item");const C=()=>{for(;h.firstChild;)h.lastChild.remove();g?h.classList.add("expanded"):h.classList.add("collapsed"),b(),o=document.createElement("div"),o.classList.add("to-do-item-top-bar-information"),h.appendChild(o),B(),v(),y(),g&&(w(),x(),A=document.createElement("div"),A.classList.add("to-do-item-expanded-information"),h.appendChild(A),j(),k(),D())},b=()=>{n&&n.remove(),n=document.createElement("button"),n.classList.add("to-do-item-expand-collapse-button","material-symbols-rounded"),n.textContent=g?"Expand_Circle_Up":"Expand_Circle_Down",h.appendChild(n),n.addEventListener("click",(()=>{g=!g,C()}))},B=()=>{r&&r.remove(),r=document.createElement("label"),r.classList.add("to-do-item-edit-name","material-symbols-rounded"),r.textContent="Edit",o.appendChild(r),a&&a.remove(),a=document.createElement("input"),a.classList.add("to-do-item-name"),a.setAttribute("type","text"),a.setAttribute("minlength",1),a.setAttribute("maxlength",75),a.setAttribute("title","Please enter a name for your to-do item."),a.setAttribute("placeholder","Please Enter a Name"),a.value=f.getName(),a.addEventListener("input",(()=>f.setName(a.value))),r.appendChild(a)},v=()=>{i&&i.remove(),i=document.createElement("h4"),i.classList.add("to-do-item-due-date","no-select");const e=()=>{if(f.getCompleted())return void(i.textContent="Completed");let e=ve({start:new Date,end:f.getDueDate()});const t=Object.entries(e).filter((([e,t])=>t||!1)).map((([e,t])=>e)),n=function(e,t){var n,o,r,a,i;if(arguments.length<1)throw new TypeError("1 argument required, but only ".concat(arguments.length," present"));var d=I(),s=null!==(n=null!==(o=null==t?void 0:t.locale)&&void 0!==o?o:d.locale)&&void 0!==n?n:oe,l=null!==(r=null==t?void 0:t.format)&&void 0!==r?r:ye,c=null!==(a=null==t?void 0:t.zero)&&void 0!==a&&a,A=null!==(i=null==t?void 0:t.delimiter)&&void 0!==i?i:" ";return s.formatDistance?l.reduce((function(t,n){var o="x".concat(n.replace(/(^.)/,(function(e){return e.toUpperCase()}))),r=e[n];return"number"==typeof r&&(c||e[n])?t.concat(s.formatDistance(o,r)):t}),[]).join(A):""}(e,{format:["years","months","weeks","days","hours","minutes","seconds"].filter((e=>new Set(t).has(e))).slice(0,2),delimiter:", "});let o="";f.getDueDate()>new Date?(h.classList.remove("overdue"),o=0===n.length?" right now":` in ${n}`,i.textContent=`Due on ${le(f.getDueDate(),"do MMMM yyyy")}`+o):(h.classList.add("overdue"),n.length>0&&(o=` for ${n}`),i.textContent="Overdue"+o)};e(),o.appendChild(i),d&&d.remove(),d=document.createElement("input"),d.classList.add("to-do-item-due-date-picker"),d.setAttribute("type","datetime-local"),d.value=f.getDueDate().toISOString().slice(0,16),d.addEventListener("input",(()=>{f.setDueDateYear(parseInt(d.value.slice(0,4))),f.setDueDateMonth(parseInt(d.value.slice(5,7))),f.setDueDateDay(parseInt(d.value.slice(8,10))),f.setDueDateHour(parseInt(d.value.slice(11,13))),f.setDueDateMinute(parseInt(d.value.slice(14,16))),e()})),o.appendChild(d)},y=()=>{if(s&&s.remove(),s=document.createElement("div"),s.classList.add("to-do-item-priority"),f)for(let e=4;e>=0;e--){let t=document.createElement("h4");t.classList.add("to-do-item-priority-star","material-symbols-sharp","no-select"),t.textContent="Star",e>=f.getPriority()?t.classList.add("to-do-item-priority-star-off"):t.classList.add("to-do-item-priority-star-on"),t.addEventListener("click",(()=>{f.setPriority(e+1),y()})),s.appendChild(t)}o.appendChild(s)},w=()=>{l&&l.remove(),f.getCompleted()&&h.classList.add("completed-item"),l=document.createElement("button"),l.classList.add("to-do-item-completed-item-button","material-symbols-rounded"),l.textContent="Done",l.addEventListener("click",(()=>{f.getCompleted()?(f.setCompleted(!1),h.classList.remove("completed-item")):(f.setCompleted(!0),h.classList.add("completed-item")),v()})),h.appendChild(l)},x=()=>{c&&c.remove(),c=document.createElement("button"),c.classList.add("to-do-item-delete-button","material-symbols-rounded"),c.textContent="Delete",c.addEventListener("click",t),h.appendChild(c)},j=()=>{u&&u.remove(),u=document.createElement("div"),u.classList.add("to-do-item-description"),A.appendChild(u);let e=document.createElement("label");e.classList.add("to-do-item-description-label"),e.textContent="Description",u.appendChild(e);let t=document.createElement("textarea");t.classList.add("to-do-item-description-input"),t.setAttribute("placeholder","No description."),t.value=f.getDescription(),t.addEventListener("input",(()=>{f.setDescription(t.value),t.value=f.getDescription(),t.style.height="5px",t.style.height=t.scrollHeight+"px"})),e.appendChild(t),t.style.height="0px",t.style.height=t.scrollHeight+"px",""===t.value&&(t.style.height="0px",t.value="a",t.style.height=t.scrollHeight+"px",t.value="")},k=()=>{m&&m.remove(),m=document.createElement("div"),m.classList.add("to-do-item-notes"),A.appendChild(m);const e=document.createElement("ul");e.classList.add("to-do-item-notes-list"),m.appendChild(e);const t=(t="")=>{const n=document.createElement("li");n.classList.add("to-do-item-notes-list-item"),e.appendChild(n);const o=document.createElement("input");o.classList.add("to-do-item-notes-list-item-input"),o.setAttribute("type","text"),o.setAttribute("placeholder","New Item"),o.value=t,o.addEventListener("input",(()=>{const t=Array.prototype.indexOf.call(e.children,n);f.setNote(t,o.value)})),n.appendChild(o);const r=document.createElement("button");r.classList.add("to-do-item-notes-list-item-delete-button","material-symbols-rounded"),r.textContent="Delete",r.addEventListener("click",(()=>{const t=Array.prototype.indexOf.call(e.children,n);f.removeNote(t),n.remove()})),n.appendChild(r)};f.getNotes().forEach((e=>t(e)));const n=document.createElement("button");n.classList.add("to-do-item-notes-new-note-button","material-symbols-rounded"),n.textContent="Add",n.addEventListener("click",(()=>{f.newNote(""),t()})),m.appendChild(n)},D=()=>{p&&p.remove(),p=document.createElement("div"),p.classList.add("to-do-item-checklist"),A.appendChild(p)};return C(),{e:h,setExpanded:e=>{"boolean"==typeof e&&(g=e),C()},setDeleteButtonFunction:e=>{t=e,c&&x()},refresh:()=>{v()}}};var Ie=n(806),xe={};Ie.Z&&Ie.Z.locals&&(xe.locals=Ie.Z.locals);var je,ke=0,De={};De.styleTagTransform=u(),De.setAttributes=s(),De.insert=i().bind(null,"head"),De.domAPI=r(),De.insertStyleElement=c(),xe.use=function(e){return De.options=e||{},ke++||(je=t()(Ie.Z,De)),xe},xe.unuse=function(){ke>0&&!--ke&&(je(),je=null)};const Ee=xe;var Me=n(719),Te={};Me.Z&&Me.Z.locals&&(Te.locals=Me.Z.locals);var Se,Le=0,ze={};ze.styleTagTransform=u(),ze.setAttributes=s(),ze.insert=i().bind(null,"head"),ze.domAPI=r(),ze.insertStyleElement=c(),Te.use=function(e){return ze.options=e||{},Le++||(Se=t()(Me.Z,ze)),Te},Te.unuse=function(){Le>0&&!--Le&&(Se(),Se=null)};const Ye=Te;(()=>{let e,t,n,o,r,a,i,d=0;e=document.createElement("div"),e.classList.add("page"),document.querySelector("body").appendChild(e),t=document.createElement("div"),t.classList.add("header"),e.appendChild(t),a=document.createElement("div"),a.classList.add("content"),e.appendChild(a);const s=(()=>{let e=[];return{newProject:t=>{for(let n=0;n<e.length;n++)if(e[n].getName()===t)return console.log("This project name is already taken."),null;const n=((e="Project Name")=>{let t="Project Name";"string"==typeof e&&(t=e);let n="NO_SORT",o=[],r=new Date;return{setName:e=>{"string"==typeof e&&(e.length>75&&(e=e.slice(0,75)),t=e)},getName:()=>t,setSort:e=>{"string"==typeof e&&(n=e)},getSort:()=>n,addToDoItem:()=>{let e=g();return o.push(e),e},removeToDoItem:e=>{"number"==typeof e&&(e<0||e>=o.length||o.splice(e,1))},getToDoItem:e=>{if("number"==typeof e&&!(e<0||e>=o.length))return o[e]},getToDoItems:()=>o,getDateCreated:()=>r}})(t);return e.push(n),n},getProjects:()=>e,removeProject:t=>{for(let n=0;n<e.length;n++)e[n].getName()===t&&e.splice(n,1)}}})(),l=s.newProject("test-project-1"),c=l.addToDoItem();c.setName("test-item-1"),c.setDueDateYear(2024),c.setDueDateMonth(11),c.setPriority(3);const A=l.addToDoItem();A.setName("test-item-2"),A.setDueDateYear(2025),A.setDueDateMonth(3);const u=l.addToDoItem();u.setName("test-item-3"),u.setDueDateYear(2027),u.setDueDateMonth(1),s.newProject("test-project-2"),s.newProject("test-project-3"),s.newProject("test-project-4");const m=()=>{if(a){for(;a.firstChild;)a.lastChild.remove();n&&n.remove(),o&&o.remove(),r&&r.remove(),h(),Ee.unuse(),Ye.unuse(),-1===d?(Ee.use(),p()):(Ye.use(),b())}},p=()=>{n=document.createElement("h1"),n.classList.add("title"),n.textContent="My Projects",t.appendChild(n);const e=document.createElement("div");e.classList.add("project-container"),a.appendChild(e);const o=s.getProjects();for(let t=0;t<o.length;t++){const n=ce(o[t]);n.panel.setAttribute("index",t),e.appendChild(n.panel),n.editButton.addEventListener("click",(()=>{d=n.panel.getAttribute("index"),m()})),n.deleteButton.addEventListener("click",(()=>{const t=s.getProjects();s.removeProject(t[n.panel.getAttribute("index")].getName()),n.panel.remove();for(let t=0;t<e.children.length;t++)e.children[t].setAttribute("index",t)}))}let r=document.createElement("div");r.classList.add("new-project-panel"),e.appendChild(r),r.addEventListener("click",f);let i=document.createElement("h2");i.classList.add("new-project-panel-name","no-select"),i.textContent="New Project",r.appendChild(i);let l=document.createElement("h2");l.classList.add("new-project-panel-plus","no-select"),l.textContent="+",r.appendChild(l)},f=()=>{i=document.createElement("div"),i.classList.add("new-project-form-cover"),a.appendChild(i);const e=document.createElement("form");e.classList.add("new-project-form"),e.addEventListener("submit",C),i.appendChild(e);const t=document.createElement("button");t.classList.add("new-project-form-close-button","material-symbols-rounded"),t.textContent="Close",t.addEventListener("click",h),e.appendChild(t);let n=document.createElement("li");n.classList.add("new-project-form-name"),B(),r.addEventListener("input",(()=>{v(r.value)?r.classList.remove("name-taken"):r.classList.add("name-taken")})),n.appendChild(r),n.appendChild(o),e.appendChild(n);const d=document.createElement("button");d.classList.add("new-project-form-create-project-button","material-symbols-rounded"),d.setAttribute("type","submit"),d.textContent="Done",e.appendChild(d)},h=()=>{i&&i.remove()},C=e=>{e.preventDefault();const t=Object.fromEntries(new FormData(e.target).entries());v(t["project-name"])&&(s.newProject(t["project-name"]),m())},b=()=>{const e=s.getProjects()[d],n=e.getToDoItems();B(),r.value=e.getName(),r.addEventListener("input",(()=>{v(r.value)||r.value===e.getName()?r.classList.remove("name-taken"):r.classList.add("name-taken")})),r.addEventListener("focusout",(()=>{v(r.value)&&r.checkValidity()&&e.setName(r.value)})),t.appendChild(r),o.classList.add("material-symbols-rounded"),o.textContent="Edit",t.appendChild(o);let i=document.createElement("div");i.classList.add("to-do-list-container"),a.appendChild(i);let l=document.createElement("div");l.classList.add("project-buttons-container"),i.appendChild(l);let c=document.createElement("button");c.classList.add("project-buttons-return-to-list","material-symbols-rounded","no-select"),c.textContent="Format_List_Bulleted",l.appendChild(c),c.addEventListener("click",(()=>{d=-1,m()}));let A=document.createElement("button");A.classList.add("project-buttons-new-to-do-item","material-symbols-rounded","no-select"),A.textContent="Add",A.addEventListener("click",(()=>{let e=g(),t=we(e);f.insertBefore(t.e,f.childNodes[0]),t.e.classList.add("newly-created-item");const n=()=>t.refresh();t.setExpanded(!0),t.setDeleteButtonFunction((()=>{u.removeEventListener("click",n),t.e.remove()}));let o=document.createElement("button");o.classList.add("to-do-item-confirm-button","material-symbols-rounded"),o.textContent="Add",t.e.appendChild(o),u.addEventListener("click",n)})),l.appendChild(A);let u=document.createElement("button");u.classList.add("project-buttons-refresh-to-do-items","material-symbols-rounded","no-select"),u.textContent="Refresh",l.appendChild(u);let p=document.createElement("button");p.classList.add("project-buttons-sort-to-do-items","material-symbols-rounded","no-select"),p.textContent="Sort",l.appendChild(p);let f=document.createElement("div");f.classList.add("project-to-do-items-container"),i.appendChild(f),n.forEach((e=>{let t=we(e);const n=()=>t.refresh();u.addEventListener("click",n),t.setDeleteButtonFunction((()=>{u.removeEventListener("click",n)})),f.appendChild(t.e)}))},B=()=>{o=document.createElement("label"),o.classList.add("project-name-label"),o.setAttribute("for","project-name"),o.setAttribute("help","This name is already taken."),o.textContent="Project Name",r=document.createElement("input"),r.classList.add("project-name-input"),r.setAttribute("type","text"),r.setAttribute("name","project-name"),r.setAttribute("id","project-name"),r.setAttribute("minlength",1),r.setAttribute("maxlength",75),r.setAttribute("title","Please enter a name for your project using only alphanumeric characters, hyphens, underscores and spaces."),r.setAttribute("required",!0),r.setAttribute("placeholder"," "),r.setAttribute("pattern","[A-Za-z0-9 _\\-']+")},v=e=>{const t=s.getProjects();for(let n=0;n<t.length;n++)if(t[n].getName()===e)return!1;return!0};m()})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,