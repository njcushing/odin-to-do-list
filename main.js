(()=>{var t={28:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var o=n(537),r=n.n(o),a=n(645),i=n.n(a)()(r());i.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Nunito:wght@300&family=Righteous&family=Staatliches&display=swap);"]),i.push([t.id,'/* Fonts */\n\n:root {\n    --nunito-font-family: Nunito, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    --righteous-font-family: Righteous, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    font-size: 20px;\n}\n\n.no-select {\n    -webkit-touch-callout: none;    /* iOS Safari */\n    -webkit-user-select: none;      /* Safari */\n    -khtml-user-select: none;       /* Konqueror HTML */\n    -moz-user-select: none;         /* Old versions of Firefox */\n    -ms-user-select: none;          /* Internet Explorer/Edge */\n    user-select: none;              /* Non-prefixed version, currently\n                                       supported by Chrome, Edge, Opera and Firefox */\n}\n\nh1, h2, h3, h4, h5, h6 {\n    padding: 0px;\n    margin: 0px;\n}\n\nbody {\n    font-family: Nunito, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    font-family: var(--nunito-font-family);\n    margin: 0;\n    justify-content: center;\n    min-width: 100vw;\n    min-height: 100vh;\n    height: 100vh;\n}\n\n.page {\n    display: grid;\n    grid-template-rows: auto 1fr;\n    width: inherit;\n    height: 100vh;\n}\n\n.header {\n    grid-area: 1 / 1 / 2 / -1;\n    background-color: #ffffff;\n    padding: 30px 10px;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    z-index: 0;\n}\n.header > .title {\n    text-align: center;\n    font-size: 1.7rem;\n    font-weight: bold;\n    white-space: nowrap;\n}\n\n.content {\n    grid-area: 2 / 1 / -1 / -1;\n    padding: 20px;\n    background-color: #e4e4e4;\n}\n\n.new-project-form-cover {\n    display: grid;\n    place-content: center;\n    position: fixed;\n    top: 0px;\n    left: 0px;\n    width: 100vw;\n    height: 100vh;\n    background-color: rgba(0, 0, 0, 0.6);\n}\n\n.new-project-form {\n    display: grid;\n    grid-template-rows: auto;\n    border-radius: 1.2rem;\n    background-color: #fff;\n    padding: 14px;\n    gap: 10px;\n}\n\n.new-project-form-close-button,\n.new-project-form-create-project-button {\n    width: 30px;\n    height: 30px;\n    border: none;\n    border-radius: 9999px;\n    color: white;\n    text-align: center;\n    font-size: 1rem;\n    padding: 0px;\n}\n.new-project-form-close-button {\n    justify-self: end;\n    background-color: #e73333;\n    margin-bottom: 1rem;\n}\n.new-project-form-close-button:hover {\n    background-color: #f54e4e;\n}\n.new-project-form-close-button:active {\n    background-color: #c51717;\n}\n.new-project-form-create-project-button {\n    justify-self: center;\n    background-color: #31c22c;\n    margin-top: 1rem;\n}\n.new-project-form-create-project-button:hover {\n    background-color: #4bdb46;\n}\n.new-project-form-create-project-button:active {\n    background-color: #23aa1f;\n}\n\n.new-project-form > li {\n    display: flex;\n    justify-content: space-between;\n    gap: 10px;\n}\n.new-project-form > li > input[required]:valid {\n    outline-color: rgb(31, 187, 0);\n    background-color: rgba(123, 255, 106, 0.18);\n    border-color: rgb(31, 187, 0);\n}\n.new-project-form > li > input[required]:focus:invalid,\n.new-project-form > li > input[required]:not(:placeholder-shown):invalid,\n.new-project-form > li > input[required].name-taken {\n    outline-color: red;\n    background-color: rgba(255, 106, 106, 0.18);\n    border-color: red;\n}\n\n.new-project-form-name > label {\n    font-size: 0.9rem;\n    white-space: nowrap;\n}\n.new-project-form-name > input {\n    font-size: 0.7rem;\n    border-radius: 6px;\n    border: 1px solid #000;\n    min-width: 80px;\n    width: 320px;\n}',"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA,UAAU;;AAGV;IACI;4EACwE;IACxE;4EACwE;IACxE,eAAe;AACnB;;AAEA;IACI,2BAA2B,KAAK,eAAe;IAC/C,yBAAyB,OAAO,WAAW;IAC3C,wBAAwB,QAAQ,mBAAmB;IACnD,sBAAsB,UAAU,4BAA4B;IAC5D,qBAAqB,WAAW,2BAA2B;IAC3D,iBAAiB,eAAe;qFACiD;AACrF;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI;4EACwE;IACxE,sCAAsC;IACtC,SAAS;IACT,uBAAuB;IACvB,gBAAgB;IAChB,iBAAiB;IACjB,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,4BAA4B;IAC5B,cAAc;IACd,aAAa;AACjB;;AAEA;IACI,yBAAyB;IACzB,yBAAyB;IACzB,kBAAkB;IAClB,qDAAqD;IACrD,UAAU;AACd;AACA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,iBAAiB;IACjB,mBAAmB;AACvB;;AAEA;IACI,0BAA0B;IAC1B,aAAa;IACb,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,qBAAqB;IACrB,eAAe;IACf,QAAQ;IACR,SAAS;IACT,YAAY;IACZ,aAAa;IACb,oCAAoC;AACxC;;AAEA;IACI,aAAa;IACb,wBAAwB;IACxB,qBAAqB;IACrB,sBAAsB;IACtB,aAAa;IACb,SAAS;AACb;;AAEA;;IAEI,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,qBAAqB;IACrB,YAAY;IACZ,kBAAkB;IAClB,eAAe;IACf,YAAY;AAChB;AACA;IACI,iBAAiB;IACjB,yBAAyB;IACzB,mBAAmB;AACvB;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,oBAAoB;IACpB,yBAAyB;IACzB,gBAAgB;AACpB;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,SAAS;AACb;AACA;IACI,8BAA8B;IAC9B,2CAA2C;IAC3C,6BAA6B;AACjC;AACA;;;IAGI,kBAAkB;IAClB,2CAA2C;IAC3C,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;IACjB,mBAAmB;AACvB;AACA;IACI,iBAAiB;IACjB,kBAAkB;IAClB,sBAAsB;IACtB,eAAe;IACf,YAAY;AAChB",sourcesContent:['/* Fonts */\n@import url(\'https://fonts.googleapis.com/css2?family=Nunito:wght@300&family=Righteous&family=Staatliches&display=swap\');\n\n:root {\n    --nunito-font-family: Nunito, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    --righteous-font-family: Righteous, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    font-size: 20px;\n}\n\n.no-select {\n    -webkit-touch-callout: none;    /* iOS Safari */\n    -webkit-user-select: none;      /* Safari */\n    -khtml-user-select: none;       /* Konqueror HTML */\n    -moz-user-select: none;         /* Old versions of Firefox */\n    -ms-user-select: none;          /* Internet Explorer/Edge */\n    user-select: none;              /* Non-prefixed version, currently\n                                       supported by Chrome, Edge, Opera and Firefox */\n}\n\nh1, h2, h3, h4, h5, h6 {\n    padding: 0px;\n    margin: 0px;\n}\n\nbody {\n    font-family: Nunito, system-ui, "Segoe UI", Roboto, Helvetica, Arial,\n        sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n    font-family: var(--nunito-font-family);\n    margin: 0;\n    justify-content: center;\n    min-width: 100vw;\n    min-height: 100vh;\n    height: 100vh;\n}\n\n.page {\n    display: grid;\n    grid-template-rows: auto 1fr;\n    width: inherit;\n    height: 100vh;\n}\n\n.header {\n    grid-area: 1 / 1 / 2 / -1;\n    background-color: #ffffff;\n    padding: 30px 10px;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    z-index: 0;\n}\n.header > .title {\n    text-align: center;\n    font-size: 1.7rem;\n    font-weight: bold;\n    white-space: nowrap;\n}\n\n.content {\n    grid-area: 2 / 1 / -1 / -1;\n    padding: 20px;\n    background-color: #e4e4e4;\n}\n\n.new-project-form-cover {\n    display: grid;\n    place-content: center;\n    position: fixed;\n    top: 0px;\n    left: 0px;\n    width: 100vw;\n    height: 100vh;\n    background-color: rgba(0, 0, 0, 0.6);\n}\n\n.new-project-form {\n    display: grid;\n    grid-template-rows: auto;\n    border-radius: 1.2rem;\n    background-color: #fff;\n    padding: 14px;\n    gap: 10px;\n}\n\n.new-project-form-close-button,\n.new-project-form-create-project-button {\n    width: 30px;\n    height: 30px;\n    border: none;\n    border-radius: 9999px;\n    color: white;\n    text-align: center;\n    font-size: 1rem;\n    padding: 0px;\n}\n.new-project-form-close-button {\n    justify-self: end;\n    background-color: #e73333;\n    margin-bottom: 1rem;\n}\n.new-project-form-close-button:hover {\n    background-color: #f54e4e;\n}\n.new-project-form-close-button:active {\n    background-color: #c51717;\n}\n.new-project-form-create-project-button {\n    justify-self: center;\n    background-color: #31c22c;\n    margin-top: 1rem;\n}\n.new-project-form-create-project-button:hover {\n    background-color: #4bdb46;\n}\n.new-project-form-create-project-button:active {\n    background-color: #23aa1f;\n}\n\n.new-project-form > li {\n    display: flex;\n    justify-content: space-between;\n    gap: 10px;\n}\n.new-project-form > li > input[required]:valid {\n    outline-color: rgb(31, 187, 0);\n    background-color: rgba(123, 255, 106, 0.18);\n    border-color: rgb(31, 187, 0);\n}\n.new-project-form > li > input[required]:focus:invalid,\n.new-project-form > li > input[required]:not(:placeholder-shown):invalid,\n.new-project-form > li > input[required].name-taken {\n    outline-color: red;\n    background-color: rgba(255, 106, 106, 0.18);\n    border-color: red;\n}\n\n.new-project-form-name > label {\n    font-size: 0.9rem;\n    white-space: nowrap;\n}\n.new-project-form-name > input {\n    font-size: 0.7rem;\n    border-radius: 6px;\n    border: 1px solid #000;\n    min-width: 80px;\n    width: 320px;\n}'],sourceRoot:""}]);const s=i},719:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var o=n(537),r=n.n(o),a=n(645),i=n.n(a)()(r());i.push([t.id,".to-do-list-container {\n    display: grid;\n    justify-content: center;\n    grid-template-rows: auto 1fr auto;\n    grid-template-columns: minmax(900px, 1280px);\n    gap: 20px;\n}\n\n.project-buttons-container {\n    display: grid;\n    grid-template-columns: 1fr repeat(2, auto);\n    gap: 10px;\n}\n\n.project-buttons-container > button {\n    font-size: 1.4rem;\n    text-align: center;\n    width: 2.4rem;\n    height: 2.4rem;\n    border: none;\n    border-radius: 9999px;\n    color: rgb(160, 160, 160);\n    background-color: #ffffff;\n}\n\n.project-buttons-return-to-list:hover {\n    color: rgb(236, 236, 236);\n    background-color: #3ea4d3;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-return-to-list:active {\n    background-color: #2082af;\n}\n.project-buttons-new-to-do-item:hover {\n    color: rgb(236, 236, 236);\n    background-color: #47d147;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-new-to-do-item:active {\n    background-color: #22ad22;\n}\n.project-buttons-sort-to-do-items:hover {\n    color: rgb(236, 236, 236);\n    background-color: #d3b221;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-sort-to-do-items:active {\n    background-color: #bb9c13;\n}\n\n.project-to-do-items-container {\n    display: grid;\n    grid-template-rows: auto;\n    align-content: start;\n    gap: 10px;\n}\n\n.to-do-item {\n    display: grid;\n    grid-template-rows: repeat(2, auto);\n    grid-template-columns: auto 1fr;\n    gap: 0.0rem 0.4rem;\n}\n\n.to-do-item-expand-collapse-button {\n    grid-area: 1 / 1 / 2 / 2;\n}\n.to-do-item-edit-button {\n    grid-area: 1 / 3 / 2 / -1;\n}\n.to-do-item-expand-collapse-button,\n.to-do-item-edit-button {\n    font-size: 1.9rem;\n    width: 2.4rem;\n    height: 2.4rem;\n    border: none;\n    color: rgb(160, 160, 160);\n    background-color: #ffffff;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    margin: 0px;\n    padding: 0px;\n}\n.to-do-item-expand-collapse-button:hover,\n.to-do-item-edit-button:hover {\n    color: rgb(146, 146, 146);\n    background-color: #eeeeee;\n}\n.to-do-item-expand-collapse-button:active,\n.to-do-item-edit-button:active {\n    color: rgb(110, 110, 110);\n    background-color: #cfcfcf;\n}\n\n.to-do-item-top-bar-information {\n    grid-area: 1 / 2 / 2 / 3;\n    align-items: center;\n    display: grid;\n    grid-template-columns: 1fr repeat(2, auto);\n    background-color: #ffffff;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    height: 2.4rem;\n    padding: 0.0rem 0.4rem;\n    gap: 10px;\n}\n\n.to-do-item-name {\n    justify-self: start;\n    font-size: 1.2rem;\n    color: rgb(50, 50, 50);\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.to-do-item-due-date {\n    justify-self: end;\n    text-align: right;\n    font-size: 0.8rem;\n    color: rgb(70, 70, 70);\n    white-space: nowrap;\n}\n\n.to-do-item-priority {\n    justify-self: end;\n    display: flex;\n    flex-wrap: nowrap;\n}\n.to-do-item-priority-star {\n    /*  Annoyingly, have to use negative margin here to get stars to align.\n        This causes an overlap zone where the cursor will not highlight the left-most\n        star until it is a certain distance over the right-hand side of the star icon. */\n    color: rgb(70, 70, 70);\n    font-size: 1.2rem;\n    margin: 0rem -0.2rem;\n}\n/* Using sibling selectors to access all 5 priority stars */\n.to-do-item-priority:not(:hover) .to-do-item-priority-star-on,\n.to-do-item-priority-star:hover,\n.to-do-item-priority-star:hover + .to-do-item-priority-star,\n.to-do-item-priority-star:hover + .to-do-item-priority-star + .to-do-item-priority-star,\n.to-do-item-priority-star:hover + .to-do-item-priority-star + .to-do-item-priority-star + .to-do-item-priority-star,\n.to-do-item-priority-star:hover + .to-do-item-priority-star + .to-do-item-priority-star + .to-do-item-priority-star + .to-do-item-priority-star {\n    color: gold;\n}\n\n.to-do-item-expanded-information {\n    grid-area: 2 / 2 / -1 / 3;\n    height: 200px;\n    background-color: #ffffff;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n","",{version:3,sources:["webpack://./src/styles/styles-tab-project.lazy.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,uBAAuB;IACvB,iCAAiC;IACjC,4CAA4C;IAC5C,SAAS;AACb;;AAEA;IACI,aAAa;IACb,0CAA0C;IAC1C,SAAS;AACb;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;IAClB,aAAa;IACb,cAAc;IACd,YAAY;IACZ,qBAAqB;IACrB,yBAAyB;IACzB,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;IACzB,yBAAyB;IACzB,qDAAqD;AACzD;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;IACzB,yBAAyB;IACzB,qDAAqD;AACzD;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;IACzB,yBAAyB;IACzB,qDAAqD;AACzD;AACA;IACI,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,wBAAwB;IACxB,oBAAoB;IACpB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,mCAAmC;IACnC,+BAA+B;IAC/B,kBAAkB;AACtB;;AAEA;IACI,wBAAwB;AAC5B;AACA;IACI,yBAAyB;AAC7B;AACA;;IAEI,iBAAiB;IACjB,aAAa;IACb,cAAc;IACd,YAAY;IACZ,yBAAyB;IACzB,yBAAyB;IACzB,qDAAqD;IACrD,WAAW;IACX,YAAY;AAChB;AACA;;IAEI,yBAAyB;IACzB,yBAAyB;AAC7B;AACA;;IAEI,yBAAyB;IACzB,yBAAyB;AAC7B;;AAEA;IACI,wBAAwB;IACxB,mBAAmB;IACnB,aAAa;IACb,0CAA0C;IAC1C,yBAAyB;IACzB,qDAAqD;IACrD,cAAc;IACd,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,mBAAmB;IACnB,iBAAiB;IACjB,sBAAsB;IACtB,mBAAmB;IACnB,gBAAgB;IAChB,uBAAuB;AAC3B;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;IACjB,iBAAiB;IACjB,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;IACjB,aAAa;IACb,iBAAiB;AACrB;AACA;IACI;;wFAEoF;IACpF,sBAAsB;IACtB,iBAAiB;IACjB,oBAAoB;AACxB;AACA,2DAA2D;AAC3D;;;;;;IAMI,WAAW;AACf;;AAEA;IACI,yBAAyB;IACzB,aAAa;IACb,yBAAyB;IACzB,qDAAqD;AACzD",sourcesContent:[".to-do-list-container {\n    display: grid;\n    justify-content: center;\n    grid-template-rows: auto 1fr auto;\n    grid-template-columns: minmax(900px, 1280px);\n    gap: 20px;\n}\n\n.project-buttons-container {\n    display: grid;\n    grid-template-columns: 1fr repeat(2, auto);\n    gap: 10px;\n}\n\n.project-buttons-container > button {\n    font-size: 1.4rem;\n    text-align: center;\n    width: 2.4rem;\n    height: 2.4rem;\n    border: none;\n    border-radius: 9999px;\n    color: rgb(160, 160, 160);\n    background-color: #ffffff;\n}\n\n.project-buttons-return-to-list:hover {\n    color: rgb(236, 236, 236);\n    background-color: #3ea4d3;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-return-to-list:active {\n    background-color: #2082af;\n}\n.project-buttons-new-to-do-item:hover {\n    color: rgb(236, 236, 236);\n    background-color: #47d147;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-new-to-do-item:active {\n    background-color: #22ad22;\n}\n.project-buttons-sort-to-do-items:hover {\n    color: rgb(236, 236, 236);\n    background-color: #d3b221;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.project-buttons-sort-to-do-items:active {\n    background-color: #bb9c13;\n}\n\n.project-to-do-items-container {\n    display: grid;\n    grid-template-rows: auto;\n    align-content: start;\n    gap: 10px;\n}\n\n.to-do-item {\n    display: grid;\n    grid-template-rows: repeat(2, auto);\n    grid-template-columns: auto 1fr;\n    gap: 0.0rem 0.4rem;\n}\n\n.to-do-item-expand-collapse-button {\n    grid-area: 1 / 1 / 2 / 2;\n}\n.to-do-item-edit-button {\n    grid-area: 1 / 3 / 2 / -1;\n}\n.to-do-item-expand-collapse-button,\n.to-do-item-edit-button {\n    font-size: 1.9rem;\n    width: 2.4rem;\n    height: 2.4rem;\n    border: none;\n    color: rgb(160, 160, 160);\n    background-color: #ffffff;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    margin: 0px;\n    padding: 0px;\n}\n.to-do-item-expand-collapse-button:hover,\n.to-do-item-edit-button:hover {\n    color: rgb(146, 146, 146);\n    background-color: #eeeeee;\n}\n.to-do-item-expand-collapse-button:active,\n.to-do-item-edit-button:active {\n    color: rgb(110, 110, 110);\n    background-color: #cfcfcf;\n}\n\n.to-do-item-top-bar-information {\n    grid-area: 1 / 2 / 2 / 3;\n    align-items: center;\n    display: grid;\n    grid-template-columns: 1fr repeat(2, auto);\n    background-color: #ffffff;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n    height: 2.4rem;\n    padding: 0.0rem 0.4rem;\n    gap: 10px;\n}\n\n.to-do-item-name {\n    justify-self: start;\n    font-size: 1.2rem;\n    color: rgb(50, 50, 50);\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.to-do-item-due-date {\n    justify-self: end;\n    text-align: right;\n    font-size: 0.8rem;\n    color: rgb(70, 70, 70);\n    white-space: nowrap;\n}\n\n.to-do-item-priority {\n    justify-self: end;\n    display: flex;\n    flex-wrap: nowrap;\n}\n.to-do-item-priority-star {\n    /*  Annoyingly, have to use negative margin here to get stars to align.\n        This causes an overlap zone where the cursor will not highlight the left-most\n        star until it is a certain distance over the right-hand side of the star icon. */\n    color: rgb(70, 70, 70);\n    font-size: 1.2rem;\n    margin: 0rem -0.2rem;\n}\n/* Using sibling selectors to access all 5 priority stars */\n.to-do-item-priority:not(:hover) .to-do-item-priority-star-on,\n.to-do-item-priority-star:hover,\n.to-do-item-priority-star:hover + .to-do-item-priority-star,\n.to-do-item-priority-star:hover + .to-do-item-priority-star + .to-do-item-priority-star,\n.to-do-item-priority-star:hover + .to-do-item-priority-star + .to-do-item-priority-star + .to-do-item-priority-star,\n.to-do-item-priority-star:hover + .to-do-item-priority-star + .to-do-item-priority-star + .to-do-item-priority-star + .to-do-item-priority-star {\n    color: gold;\n}\n\n.to-do-item-expanded-information {\n    grid-area: 2 / 2 / -1 / 3;\n    height: 200px;\n    background-color: #ffffff;\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n"],sourceRoot:""}]);const s=i},806:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var o=n(537),r=n.n(o),a=n(645),i=n.n(a)()(r());i.push([t.id,".content .project-container {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 240px);\n    justify-content: center;\n    align-content: start;\n    gap: 20px;\n    padding: 20px;\n}\n.content .project-panel,\n.content .new-project-panel {\n    display: grid;\n    grid-template-rows: 1fr repeat(2, auto);\n    text-align: center;\n    border-radius: 0.6rem;\n    height: 280px;\n    padding: 16px 18px 14px 18px;\n    gap: 6px;\n}\n.content .project-panel {\n    outline: 1px solid #6d6d6d;\n    grid-template-rows: 1fr repeat(2, auto);\n    background-image: linear-gradient(180deg, rgb(30, 148, 216), rgb(30, 148, 216) 8px, rgb(255, 255, 255) 8px);\n}\n.content .new-project-panel {\n    grid-template-rows: auto 1fr;\n    background-color: transparent;\n    outline: 2px dashed #6d6d6d;\n}\n.content .project-panel:hover {\n    background-image: linear-gradient(180deg, rgb(30, 148, 216), rgb(30, 148, 216) 8px, rgb(255, 255, 255) 8px);\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.content .new-project-panel:hover {\n    outline: 2px dashed #080808;\n}\n.content .new-project-panel:active {\n    background-color: rgba(128, 128, 128, 0.07);\n}\n.content .new-project-panel-name,\n.content .project-panel-name {\n    font-size: 1.4rem;\n}\n.content .project-panel-number-of-items {\n    font-size: 0.6rem;\n}\n.content .project-panel-date-created {\n    font-size: 0.8rem;\n}\n.content .new-project-panel-plus {\n    align-self: center;\n    color: rgb(46, 46, 46);\n    font-size: 5rem;\n    font-weight: normal;\n}\n.content .project-panel-separator {\n    justify-self: center;\n    border-radius: 9999px;\n    width: 104%;\n    height: 2px;\n    background-color: #dadada;\n    margin-bottom: 6px;\n}\n.content .project-panel-buttons-container {\n    display: flex;\n    justify-content: space-between;\n    flex-wrap: wrap;\n    gap: 6px;\n}\n.content .project-panel-buttons-edit,\n.content .project-panel-buttons-delete {\n    width: 40px;\n    height: 40px;\n    border: none;\n    border-radius: 9999px;\n    color: white;\n    text-align: center;\n}\n.content .project-panel-buttons-edit {\n    background-color: #31c22c;\n}\n.content .project-panel-buttons-edit:hover {\n    background-color: #4bdb46;\n}\n.content .project-panel-buttons-edit:active {\n    background-color: #23aa1f;\n}\n.content .project-panel-buttons-delete {\n    background-color: #e73333;\n}\n.content .project-panel-buttons-delete:hover {\n    background-color: #f54e4e;\n}\n.content .project-panel-buttons-delete:active {\n    background-color: #c51717;\n}","",{version:3,sources:["webpack://./src/styles/styles-tab-projectlist.lazy.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,8CAA8C;IAC9C,uBAAuB;IACvB,oBAAoB;IACpB,SAAS;IACT,aAAa;AACjB;AACA;;IAEI,aAAa;IACb,uCAAuC;IACvC,kBAAkB;IAClB,qBAAqB;IACrB,aAAa;IACb,4BAA4B;IAC5B,QAAQ;AACZ;AACA;IACI,0BAA0B;IAC1B,uCAAuC;IACvC,2GAA2G;AAC/G;AACA;IACI,4BAA4B;IAC5B,6BAA6B;IAC7B,2BAA2B;AAC/B;AACA;IACI,2GAA2G;IAC3G,qDAAqD;AACzD;AACA;IACI,2BAA2B;AAC/B;AACA;IACI,2CAA2C;AAC/C;AACA;;IAEI,iBAAiB;AACrB;AACA;IACI,iBAAiB;AACrB;AACA;IACI,iBAAiB;AACrB;AACA;IACI,kBAAkB;IAClB,sBAAsB;IACtB,eAAe;IACf,mBAAmB;AACvB;AACA;IACI,oBAAoB;IACpB,qBAAqB;IACrB,WAAW;IACX,WAAW;IACX,yBAAyB;IACzB,kBAAkB;AACtB;AACA;IACI,aAAa;IACb,8BAA8B;IAC9B,eAAe;IACf,QAAQ;AACZ;AACA;;IAEI,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,qBAAqB;IACrB,YAAY;IACZ,kBAAkB;AACtB;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B",sourcesContent:[".content .project-container {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 240px);\n    justify-content: center;\n    align-content: start;\n    gap: 20px;\n    padding: 20px;\n}\n.content .project-panel,\n.content .new-project-panel {\n    display: grid;\n    grid-template-rows: 1fr repeat(2, auto);\n    text-align: center;\n    border-radius: 0.6rem;\n    height: 280px;\n    padding: 16px 18px 14px 18px;\n    gap: 6px;\n}\n.content .project-panel {\n    outline: 1px solid #6d6d6d;\n    grid-template-rows: 1fr repeat(2, auto);\n    background-image: linear-gradient(180deg, rgb(30, 148, 216), rgb(30, 148, 216) 8px, rgb(255, 255, 255) 8px);\n}\n.content .new-project-panel {\n    grid-template-rows: auto 1fr;\n    background-color: transparent;\n    outline: 2px dashed #6d6d6d;\n}\n.content .project-panel:hover {\n    background-image: linear-gradient(180deg, rgb(30, 148, 216), rgb(30, 148, 216) 8px, rgb(255, 255, 255) 8px);\n    box-shadow: 0px 4px 5px -0px rgba(128, 128, 128, 0.3);\n}\n.content .new-project-panel:hover {\n    outline: 2px dashed #080808;\n}\n.content .new-project-panel:active {\n    background-color: rgba(128, 128, 128, 0.07);\n}\n.content .new-project-panel-name,\n.content .project-panel-name {\n    font-size: 1.4rem;\n}\n.content .project-panel-number-of-items {\n    font-size: 0.6rem;\n}\n.content .project-panel-date-created {\n    font-size: 0.8rem;\n}\n.content .new-project-panel-plus {\n    align-self: center;\n    color: rgb(46, 46, 46);\n    font-size: 5rem;\n    font-weight: normal;\n}\n.content .project-panel-separator {\n    justify-self: center;\n    border-radius: 9999px;\n    width: 104%;\n    height: 2px;\n    background-color: #dadada;\n    margin-bottom: 6px;\n}\n.content .project-panel-buttons-container {\n    display: flex;\n    justify-content: space-between;\n    flex-wrap: wrap;\n    gap: 6px;\n}\n.content .project-panel-buttons-edit,\n.content .project-panel-buttons-delete {\n    width: 40px;\n    height: 40px;\n    border: none;\n    border-radius: 9999px;\n    color: white;\n    text-align: center;\n}\n.content .project-panel-buttons-edit {\n    background-color: #31c22c;\n}\n.content .project-panel-buttons-edit:hover {\n    background-color: #4bdb46;\n}\n.content .project-panel-buttons-edit:active {\n    background-color: #23aa1f;\n}\n.content .project-panel-buttons-delete {\n    background-color: #e73333;\n}\n.content .project-panel-buttons-delete:hover {\n    background-color: #f54e4e;\n}\n.content .project-panel-buttons-delete:active {\n    background-color: #c51717;\n}"],sourceRoot:""}]);const s=i},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",o=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),o&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),o&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,o,r,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<t.length;l++){var u=[].concat(t[l]);o&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),e.push(u))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,o=0;o<e.length;o++)if(e[o].identifier===t){n=o;break}return n}function o(t,o){for(var a={},i=[],s=0;s<t.length;s++){var c=t[s],l=o.base?c[0]+o.base:c[0],u=a[l]||0,d="".concat(l," ").concat(u);a[l]=u+1;var p=n(d),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(f);else{var A=r(f,o);o.byIndex=s,e.splice(s,0,{identifier:d,updater:A,references:1})}i.push(d)}return i}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var a=o(t=t||[],r=r||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var s=n(a[i]);e[s].references--}for(var c=o(t,r),l=0;l<a.length;l++){var u=n(a[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}a=c}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var o=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},933:(t,e,n)=>{var o;!function(){function r(t,e,n){return t.call.apply(t.bind,arguments)}function a(t,e,n){if(!t)throw Error();if(2<arguments.length){var o=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,o),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function i(t,e,n){return(i=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?r:a).apply(null,arguments)}var s=Date.now||function(){return+new Date};function c(t,e){this.a=t,this.o=e||t,this.c=this.o.document}var l=!!window.FontFace;function u(t,e,n,o){if(e=t.c.createElement(e),n)for(var r in n)n.hasOwnProperty(r)&&("style"==r?e.style.cssText=n[r]:e.setAttribute(r,n[r]));return o&&e.appendChild(t.c.createTextNode(o)),e}function d(t,e,n){(t=t.c.getElementsByTagName(e)[0])||(t=document.documentElement),t.insertBefore(n,t.lastChild)}function p(t){t.parentNode&&t.parentNode.removeChild(t)}function f(t,e,n){e=e||[],n=n||[];for(var o=t.className.split(/\s+/),r=0;r<e.length;r+=1){for(var a=!1,i=0;i<o.length;i+=1)if(e[r]===o[i]){a=!0;break}a||o.push(e[r])}for(e=[],r=0;r<o.length;r+=1){for(a=!1,i=0;i<n.length;i+=1)if(o[r]===n[i]){a=!0;break}a||e.push(o[r])}t.className=e.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function A(t,e){for(var n=t.className.split(/\s+/),o=0,r=n.length;o<r;o++)if(n[o]==e)return!0;return!1}function h(t,e,n){function o(){s&&r&&a&&(s(i),s=null)}e=u(t,"link",{rel:"stylesheet",href:e,media:"all"});var r=!1,a=!0,i=null,s=n||null;l?(e.onload=function(){r=!0,o()},e.onerror=function(){r=!0,i=Error("Stylesheet failed to load"),o()}):setTimeout((function(){r=!0,o()}),0),d(t,"head",e)}function m(t,e,n,o){var r=t.c.getElementsByTagName("head")[0];if(r){var a=u(t,"script",{src:e}),i=!1;return a.onload=a.onreadystatechange=function(){i||this.readyState&&"loaded"!=this.readyState&&"complete"!=this.readyState||(i=!0,n&&n(null),a.onload=a.onreadystatechange=null,"HEAD"==a.parentNode.tagName&&r.removeChild(a))},r.appendChild(a),setTimeout((function(){i||(i=!0,n&&n(Error("Script load timeout")))}),o||5e3),a}return null}function g(){this.a=0,this.c=null}function b(t){return t.a++,function(){t.a--,C(t)}}function v(t,e){t.c=e,C(t)}function C(t){0==t.a&&t.c&&(t.c(),t.c=null)}function y(t){this.a=t||"-"}function w(t,e){this.c=t,this.f=4,this.a="n";var n=(e||"n4").match(/^([nio])([1-9])$/i);n&&(this.a=n[1],this.f=parseInt(n[2],10))}function B(t){var e=[];t=t.split(/,\s*/);for(var n=0;n<t.length;n++){var o=t[n].replace(/['"]/g,"");-1!=o.indexOf(" ")||/^\d/.test(o)?e.push("'"+o+"'"):e.push(o)}return e.join(",")}function x(t){return t.a+t.f}function I(t){var e="normal";return"o"===t.a?e="oblique":"i"===t.a&&(e="italic"),e}function j(t){var e=4,n="n",o=null;return t&&((o=t.match(/(normal|oblique|italic)/i))&&o[1]&&(n=o[1].substr(0,1).toLowerCase()),(o=t.match(/([1-9]00|normal|bold)/i))&&o[1]&&(/bold/i.test(o[1])?e=7:/[1-9]00/.test(o[1])&&(e=parseInt(o[1].substr(0,1),10)))),n+e}function k(t,e){this.c=t,this.f=t.o.document.documentElement,this.h=e,this.a=new y("-"),this.j=!1!==e.events,this.g=!1!==e.classes}function D(t){if(t.g){var e=A(t.f,t.a.c("wf","active")),n=[],o=[t.a.c("wf","loading")];e||n.push(t.a.c("wf","inactive")),f(t.f,n,o)}T(t,"inactive")}function T(t,e,n){t.j&&t.h[e]&&(n?t.h[e](n.c,x(n)):t.h[e]())}function E(){this.c={}}function M(t,e){this.c=t,this.f=e,this.a=u(this.c,"span",{"aria-hidden":"true"},this.f)}function S(t){d(t.c,"body",t.a)}function N(t){return"display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:"+B(t.c)+";font-style:"+I(t)+";font-weight:"+t.f+"00;"}function P(t,e,n,o,r,a){this.g=t,this.j=e,this.a=o,this.c=n,this.f=r||3e3,this.h=a||void 0}function U(t,e,n,o,r,a,i){this.v=t,this.B=e,this.c=n,this.a=o,this.s=i||"BESbswy",this.f={},this.w=r||3e3,this.u=a||null,this.m=this.j=this.h=this.g=null,this.g=new M(this.c,this.s),this.h=new M(this.c,this.s),this.j=new M(this.c,this.s),this.m=new M(this.c,this.s),t=N(t=new w(this.a.c+",serif",x(this.a))),this.g.a.style.cssText=t,t=N(t=new w(this.a.c+",sans-serif",x(this.a))),this.h.a.style.cssText=t,t=N(t=new w("serif",x(this.a))),this.j.a.style.cssText=t,t=N(t=new w("sans-serif",x(this.a))),this.m.a.style.cssText=t,S(this.g),S(this.h),S(this.j),S(this.m)}y.prototype.c=function(t){for(var e=[],n=0;n<arguments.length;n++)e.push(arguments[n].replace(/[\W_]+/g,"").toLowerCase());return e.join(this.a)},P.prototype.start=function(){var t=this.c.o.document,e=this,n=s(),o=new Promise((function(o,r){!function a(){s()-n>=e.f?r():t.fonts.load(function(t){return I(t)+" "+t.f+"00 300px "+B(t.c)}(e.a),e.h).then((function(t){1<=t.length?o():setTimeout(a,25)}),(function(){r()}))}()})),r=null,a=new Promise((function(t,n){r=setTimeout(n,e.f)}));Promise.race([a,o]).then((function(){r&&(clearTimeout(r),r=null),e.g(e.a)}),(function(){e.j(e.a)}))};var Y={D:"serif",C:"sans-serif"},L=null;function z(){if(null===L){var t=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent);L=!!t&&(536>parseInt(t[1],10)||536===parseInt(t[1],10)&&11>=parseInt(t[2],10))}return L}function q(t,e,n){for(var o in Y)if(Y.hasOwnProperty(o)&&e===t.f[Y[o]]&&n===t.f[Y[o]])return!0;return!1}function W(t){var e,n=t.g.a.offsetWidth,o=t.h.a.offsetWidth;(e=n===t.f.serif&&o===t.f["sans-serif"])||(e=z()&&q(t,n,o)),e?s()-t.A>=t.w?z()&&q(t,n,o)&&(null===t.u||t.u.hasOwnProperty(t.a.c))?F(t,t.v):F(t,t.B):function(t){setTimeout(i((function(){W(this)}),t),50)}(t):F(t,t.v)}function F(t,e){setTimeout(i((function(){p(this.g.a),p(this.h.a),p(this.j.a),p(this.m.a),e(this.a)}),t),0)}function O(t,e,n){this.c=t,this.a=e,this.f=0,this.m=this.j=!1,this.s=n}U.prototype.start=function(){this.f.serif=this.j.a.offsetWidth,this.f["sans-serif"]=this.m.a.offsetWidth,this.A=s(),W(this)};var _=null;function H(t){0==--t.f&&t.j&&(t.m?((t=t.a).g&&f(t.f,[t.a.c("wf","active")],[t.a.c("wf","loading"),t.a.c("wf","inactive")]),T(t,"active")):D(t.a))}function R(t){this.j=t,this.a=new E,this.h=0,this.f=this.g=!0}function Z(t,e,n,o,r){var a=0==--t.h;(t.f||t.g)&&setTimeout((function(){var t=r||null,s=o||{};if(0===n.length&&a)D(e.a);else{e.f+=n.length,a&&(e.j=a);var c,l=[];for(c=0;c<n.length;c++){var u=n[c],d=s[u.c],p=e.a,A=u;if(p.g&&f(p.f,[p.a.c("wf",A.c,x(A).toString(),"loading")]),T(p,"fontloading",A),p=null,null===_)if(window.FontFace){A=/Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent);var h=/OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent)&&/Apple/.exec(window.navigator.vendor);_=A?42<parseInt(A[1],10):!h}else _=!1;p=_?new P(i(e.g,e),i(e.h,e),e.c,u,e.s,d):new U(i(e.g,e),i(e.h,e),e.c,u,e.s,t,d),l.push(p)}for(c=0;c<l.length;c++)l[c].start()}}),0)}function G(t,e){this.c=t,this.a=e}function Q(t,e){this.c=t,this.a=e}function X(t,e){this.c=t||J,this.a=[],this.f=[],this.g=e||""}O.prototype.g=function(t){var e=this.a;e.g&&f(e.f,[e.a.c("wf",t.c,x(t).toString(),"active")],[e.a.c("wf",t.c,x(t).toString(),"loading"),e.a.c("wf",t.c,x(t).toString(),"inactive")]),T(e,"fontactive",t),this.m=!0,H(this)},O.prototype.h=function(t){var e=this.a;if(e.g){var n=A(e.f,e.a.c("wf",t.c,x(t).toString(),"active")),o=[],r=[e.a.c("wf",t.c,x(t).toString(),"loading")];n||o.push(e.a.c("wf",t.c,x(t).toString(),"inactive")),f(e.f,o,r)}T(e,"fontinactive",t),H(this)},R.prototype.load=function(t){this.c=new c(this.j,t.context||this.j),this.g=!1!==t.events,this.f=!1!==t.classes,function(t,e,n){var o=[],r=n.timeout;!function(t){t.g&&f(t.f,[t.a.c("wf","loading")]),T(t,"loading")}(e),o=function(t,e,n){var o,r=[];for(o in e)if(e.hasOwnProperty(o)){var a=t.c[o];a&&r.push(a(e[o],n))}return r}(t.a,n,t.c);var a=new O(t.c,e,r);for(t.h=o.length,e=0,n=o.length;e<n;e++)o[e].load((function(e,n,o){Z(t,a,e,n,o)}))}(this,new k(this.c,t),t)},G.prototype.load=function(t){function e(){if(a["__mti_fntLst"+o]){var n,r=a["__mti_fntLst"+o](),i=[];if(r)for(var s=0;s<r.length;s++){var c=r[s].fontfamily;null!=r[s].fontStyle&&null!=r[s].fontWeight?(n=r[s].fontStyle+r[s].fontWeight,i.push(new w(c,n))):i.push(new w(c))}t(i)}else setTimeout((function(){e()}),50)}var n=this,o=n.a.projectId,r=n.a.version;if(o){var a=n.c.o;m(this.c,(n.a.api||"https://fast.fonts.net/jsapi")+"/"+o+".js"+(r?"?v="+r:""),(function(r){r?t([]):(a["__MonotypeConfiguration__"+o]=function(){return n.a},e())})).id="__MonotypeAPIScript__"+o}else t([])},Q.prototype.load=function(t){var e,n,o=this.a.urls||[],r=this.a.families||[],a=this.a.testStrings||{},i=new g;for(e=0,n=o.length;e<n;e++)h(this.c,o[e],b(i));var s=[];for(e=0,n=r.length;e<n;e++)if((o=r[e].split(":"))[1])for(var c=o[1].split(","),l=0;l<c.length;l+=1)s.push(new w(o[0],c[l]));else s.push(new w(o[0]));v(i,(function(){t(s,a)}))};var J="https://fonts.googleapis.com/css";function $(t){this.f=t,this.a=[],this.c={}}var K={latin:"BESbswy","latin-ext":"çöüğş",cyrillic:"йяЖ",greek:"αβΣ",khmer:"កខគ",Hanuman:"កខគ"},V={thin:"1",extralight:"2","extra-light":"2",ultralight:"2","ultra-light":"2",light:"3",regular:"4",book:"4",medium:"5","semi-bold":"6",semibold:"6","demi-bold":"6",demibold:"6",bold:"7","extra-bold":"8",extrabold:"8","ultra-bold":"8",ultrabold:"8",black:"9",heavy:"9",l:"3",r:"4",b:"7"},tt={i:"i",italic:"i",n:"n",normal:"n"},et=/^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;function nt(t,e){this.c=t,this.a=e}var ot={Arimo:!0,Cousine:!0,Tinos:!0};function rt(t,e){this.c=t,this.a=e}function at(t,e){this.c=t,this.f=e,this.a=[]}nt.prototype.load=function(t){var e=new g,n=this.c,o=new X(this.a.api,this.a.text),r=this.a.families;!function(t,e){for(var n=e.length,o=0;o<n;o++){var r=e[o].split(":");3==r.length&&t.f.push(r.pop());var a="";2==r.length&&""!=r[1]&&(a=":"),t.a.push(r.join(a))}}(o,r);var a=new $(r);!function(t){for(var e=t.f.length,n=0;n<e;n++){var o=t.f[n].split(":"),r=o[0].replace(/\+/g," "),a=["n4"];if(2<=o.length){var i;if(i=[],s=o[1])for(var s,c=(s=s.split(",")).length,l=0;l<c;l++){var u;if((u=s[l]).match(/^[\w-]+$/))if(null==(d=et.exec(u.toLowerCase())))u="";else{if(u=null==(u=d[2])||""==u?"n":tt[u],null==(d=d[1])||""==d)d="4";else var d=V[d]||(isNaN(d)?"4":d.substr(0,1));u=[u,d].join("")}else u="";u&&i.push(u)}0<i.length&&(a=i),3==o.length&&(i=[],0<(o=(o=o[2])?o.split(","):i).length&&(o=K[o[0]])&&(t.c[r]=o))}for(t.c[r]||(o=K[r])&&(t.c[r]=o),o=0;o<a.length;o+=1)t.a.push(new w(r,a[o]))}}(a),h(n,function(t){if(0==t.a.length)throw Error("No fonts to load!");if(-1!=t.c.indexOf("kit="))return t.c;for(var e=t.a.length,n=[],o=0;o<e;o++)n.push(t.a[o].replace(/ /g,"+"));return e=t.c+"?family="+n.join("%7C"),0<t.f.length&&(e+="&subset="+t.f.join(",")),0<t.g.length&&(e+="&text="+encodeURIComponent(t.g)),e}(o),b(e)),v(e,(function(){t(a.a,a.c,ot)}))},rt.prototype.load=function(t){var e=this.a.id,n=this.c.o;e?m(this.c,(this.a.api||"https://use.typekit.net")+"/"+e+".js",(function(e){if(e)t([]);else if(n.Typekit&&n.Typekit.config&&n.Typekit.config.fn){e=n.Typekit.config.fn;for(var o=[],r=0;r<e.length;r+=2)for(var a=e[r],i=e[r+1],s=0;s<i.length;s++)o.push(new w(a,i[s]));try{n.Typekit.load({events:!1,classes:!1,async:!0})}catch(t){}t(o)}}),2e3):t([])},at.prototype.load=function(t){var e=this.f.id,n=this.c.o,o=this;e?(n.__webfontfontdeckmodule__||(n.__webfontfontdeckmodule__={}),n.__webfontfontdeckmodule__[e]=function(e,n){for(var r=0,a=n.fonts.length;r<a;++r){var i=n.fonts[r];o.a.push(new w(i.name,j("font-weight:"+i.weight+";font-style:"+i.style)))}t(o.a)},m(this.c,(this.f.api||"https://f.fontdeck.com/s/css/js/")+function(t){return t.o.location.hostname||t.a.location.hostname}(this.c)+"/"+e+".js",(function(e){e&&t([])}))):t([])};var it=new R(window);it.a.c.custom=function(t,e){return new Q(e,t)},it.a.c.fontdeck=function(t,e){return new at(e,t)},it.a.c.monotype=function(t,e){return new G(e,t)},it.a.c.typekit=function(t,e){return new rt(e,t)},it.a.c.google=function(t,e){return new nt(e,t)};var st={load:i(it.load,it)};void 0===(o=function(){return st}.call(e,n,e,t))||(t.exports=o)}()}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return t[o](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{"use strict";var t=n(379),e=n.n(t),o=n(795),r=n.n(o),a=n(569),i=n.n(a),s=n(565),c=n.n(s),l=n(216),u=n.n(l),d=n(589),p=n.n(d),f=n(28),A={};A.styleTagTransform=p(),A.setAttributes=c(),A.insert=i().bind(null,"head"),A.domAPI=r(),A.insertStyleElement=u(),e()(f.Z,A),f.Z&&f.Z.locals&&f.Z.locals;const h=(t,e,n)=>Math.max(Math.min(t,Math.max(e,n)),Math.min(e,n)),m=(t="Project Name")=>{let e="Project Name";"string"==typeof t&&(e=t);let n="NO_SORT",o=[],r=new Date;return{setName:t=>{"string"==typeof t&&(t.length>75&&(t=t.slice(0,75)),e=t)},getName:()=>e,setSort:t=>{"string"==typeof t&&(n=t)},getSort:()=>n,addToDoItem:()=>{let t=(()=>{let t="Default Name",e="Empty",n=new Date,o=0,r=[],a="Empty",i=!1;return{setName:e=>{"string"==typeof e&&(e.length>75&&(e=e.slice(0,75)),t=e)},getName:()=>t,setDescription:t=>{"string"==typeof t&&(t.length>500&&(t=t.slice(0,500)),e=t)},getDescription:()=>e,setDueDateYear:t=>{if("number"!=typeof t)return;const e=new Date;t=h(t,e.getFullYear(),e.getFullYear()+100),n.setFullYear(Math.floor(t))},setDueDateMonth:t=>{"number"==typeof t&&(t=h(t,1,12),n.setMonth(Math.floor(t-1)))},setDueDateDay:t=>{"number"==typeof t&&(t=((t,e,n)=>{if("number"!=typeof e||"number"!=typeof n)return 1;switch(e){case 1:case 3:case 5:case 7:case 8:case 10:case 12:return h(n,1,31);case 4:case 6:case 9:case 11:return h(n,1,30);case 2:return h(n,1,t%400==0?29:t%100==0?28:t%4==0?29:28);default:return 1}})(n.getFullYear(),n.getMonth()+1,t),n.setDate(Math.floor(t)))},setDueDateHour:t=>{"number"==typeof t&&(t=h(t,0,23),n.setHours(Math.floor(t)))},setDueDateMinute:t=>{"number"==typeof t&&(t=h(t,0,59),n.setMinutes(Math.floor(t)))},getDueDate:()=>n,setPriority:t=>{"number"==typeof t&&(t=h(t,0,5),o=Math.floor(t))},getPriority:()=>o,addChecklistItem:(t,e)=>{r.push(((t="Checklist Item",e=!1)=>{let n="Checklist Item";"string"==typeof t&&(n=t);let o=!1;return"boolean"==typeof e&&(o=e),{setName:t=>{"string"==typeof t&&(t.length>75&&(t=t.slice(0,75)),n=t)},getName:()=>n,setState:t=>{"boolean"==typeof t&&(o=t)},getState:()=>o}})()),r[r.length-1].setName(t),r[r.length-1].setState(e)},getChecklist:()=>r,setNotes:t=>{"string"==typeof t&&(t.length>500&&(t=t.slice(0,500)),a=t)},getNotes:()=>a,setCompleted:t=>{"boolean"==typeof t&&(i=t)},getCompleted:()=>i}})();return o.push(t),t},removeToDoItem:t=>{"number"==typeof t&&(t<0||t>=o.length||o.splice(t,1))},getToDoItem:t=>{if("number"==typeof t&&!(t<0||t>=o.length))return o[t]},getToDoItems:()=>o,getDateCreated:()=>r}};function g(t){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},g(t)}function b(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function v(t){b(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===g(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function C(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function y(t){b(1,arguments);var e=v(t),n=e.getUTCDay(),o=(n<1?7:0)+n-1;return e.setUTCDate(e.getUTCDate()-o),e.setUTCHours(0,0,0,0),e}function w(t){b(1,arguments);var e=v(t),n=e.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(n+1,0,4),o.setUTCHours(0,0,0,0);var r=y(o),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var i=y(a);return e.getTime()>=r.getTime()?n+1:e.getTime()>=i.getTime()?n:n-1}var B={};function x(){return B}function I(t,e){var n,o,r,a,i,s,c,l;b(1,arguments);var u=x(),d=C(null!==(n=null!==(o=null!==(r=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==r?r:u.weekStartsOn)&&void 0!==o?o:null===(c=u.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==n?n:0);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=v(t),f=p.getUTCDay(),A=(f<d?7:0)+f-d;return p.setUTCDate(p.getUTCDate()-A),p.setUTCHours(0,0,0,0),p}function j(t,e){var n,o,r,a,i,s,c,l;b(1,arguments);var u=v(t),d=u.getUTCFullYear(),p=x(),f=C(null!==(n=null!==(o=null!==(r=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==r?r:p.firstWeekContainsDate)&&void 0!==o?o:null===(c=p.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==n?n:1);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var A=new Date(0);A.setUTCFullYear(d+1,0,f),A.setUTCHours(0,0,0,0);var h=I(A,e),m=new Date(0);m.setUTCFullYear(d,0,f),m.setUTCHours(0,0,0,0);var g=I(m,e);return u.getTime()>=h.getTime()?d+1:u.getTime()>=g.getTime()?d:d-1}function k(t,e){for(var n=t<0?"-":"",o=Math.abs(t).toString();o.length<e;)o="0"+o;return n+o}const D=function(t,e){var n=t.getUTCFullYear(),o=n>0?n:1-n;return k("yy"===e?o%100:o,e.length)},T=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):k(n+1,2)},E=function(t,e){return k(t.getUTCDate(),e.length)},M=function(t,e){return k(t.getUTCHours()%12||12,e.length)},S=function(t,e){return k(t.getUTCHours(),e.length)},N=function(t,e){return k(t.getUTCMinutes(),e.length)},P=function(t,e){return k(t.getUTCSeconds(),e.length)},U=function(t,e){var n=e.length,o=t.getUTCMilliseconds();return k(Math.floor(o*Math.pow(10,n-3)),e.length)};var Y={G:function(t,e,n){var o=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(o,{width:"abbreviated"});case"GGGGG":return n.era(o,{width:"narrow"});default:return n.era(o,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var o=t.getUTCFullYear(),r=o>0?o:1-o;return n.ordinalNumber(r,{unit:"year"})}return D(t,e)},Y:function(t,e,n,o){var r=j(t,o),a=r>0?r:1-r;return"YY"===e?k(a%100,2):"Yo"===e?n.ordinalNumber(a,{unit:"year"}):k(a,e.length)},R:function(t,e){return k(w(t),e.length)},u:function(t,e){return k(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var o=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(o);case"QQ":return k(o,2);case"Qo":return n.ordinalNumber(o,{unit:"quarter"});case"QQQ":return n.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(o,{width:"narrow",context:"formatting"});default:return n.quarter(o,{width:"wide",context:"formatting"})}},q:function(t,e,n){var o=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(o);case"qq":return k(o,2);case"qo":return n.ordinalNumber(o,{unit:"quarter"});case"qqq":return n.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(o,{width:"narrow",context:"standalone"});default:return n.quarter(o,{width:"wide",context:"standalone"})}},M:function(t,e,n){var o=t.getUTCMonth();switch(e){case"M":case"MM":return T(t,e);case"Mo":return n.ordinalNumber(o+1,{unit:"month"});case"MMM":return n.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(o,{width:"narrow",context:"formatting"});default:return n.month(o,{width:"wide",context:"formatting"})}},L:function(t,e,n){var o=t.getUTCMonth();switch(e){case"L":return String(o+1);case"LL":return k(o+1,2);case"Lo":return n.ordinalNumber(o+1,{unit:"month"});case"LLL":return n.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(o,{width:"narrow",context:"standalone"});default:return n.month(o,{width:"wide",context:"standalone"})}},w:function(t,e,n,o){var r=function(t,e){b(1,arguments);var n=v(t),o=I(n,e).getTime()-function(t,e){var n,o,r,a,i,s,c,l;b(1,arguments);var u=x(),d=C(null!==(n=null!==(o=null!==(r=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==r?r:u.firstWeekContainsDate)&&void 0!==o?o:null===(c=u.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==n?n:1),p=j(t,e),f=new Date(0);return f.setUTCFullYear(p,0,d),f.setUTCHours(0,0,0,0),I(f,e)}(n,e).getTime();return Math.round(o/6048e5)+1}(t,o);return"wo"===e?n.ordinalNumber(r,{unit:"week"}):k(r,e.length)},I:function(t,e,n){var o=function(t){b(1,arguments);var e=v(t),n=y(e).getTime()-function(t){b(1,arguments);var e=w(t),n=new Date(0);return n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0),y(n)}(e).getTime();return Math.round(n/6048e5)+1}(t);return"Io"===e?n.ordinalNumber(o,{unit:"week"}):k(o,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):E(t,e)},D:function(t,e,n){var o=function(t){b(1,arguments);var e=v(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var o=n-e.getTime();return Math.floor(o/864e5)+1}(t);return"Do"===e?n.ordinalNumber(o,{unit:"dayOfYear"}):k(o,e.length)},E:function(t,e,n){var o=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},e:function(t,e,n,o){var r=t.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return k(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(t,e,n,o){var r=t.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return k(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(t,e,n){var o=t.getUTCDay(),r=0===o?7:o;switch(e){case"i":return String(r);case"ii":return k(r,e.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},a:function(t,e,n){var o=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(t,e,n){var o,r=t.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(t,e,n){var o,r=t.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var o=t.getUTCHours()%12;return 0===o&&(o=12),n.ordinalNumber(o,{unit:"hour"})}return M(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):S(t,e)},K:function(t,e,n){var o=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(o,{unit:"hour"}):k(o,e.length)},k:function(t,e,n){var o=t.getUTCHours();return 0===o&&(o=24),"ko"===e?n.ordinalNumber(o,{unit:"hour"}):k(o,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):N(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):P(t,e)},S:function(t,e){return U(t,e)},X:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return z(r);case"XXXX":case"XX":return q(r);default:return q(r,":")}},x:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();switch(e){case"x":return z(r);case"xxxx":case"xx":return q(r);default:return q(r,":")}},O:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+L(r,":");default:return"GMT"+q(r,":")}},z:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+L(r,":");default:return"GMT"+q(r,":")}},t:function(t,e,n,o){var r=o._originalDate||t;return k(Math.floor(r.getTime()/1e3),e.length)},T:function(t,e,n,o){return k((o._originalDate||t).getTime(),e.length)}};function L(t,e){var n=t>0?"-":"+",o=Math.abs(t),r=Math.floor(o/60),a=o%60;if(0===a)return n+String(r);var i=e||"";return n+String(r)+i+k(a,2)}function z(t,e){return t%60==0?(t>0?"-":"+")+k(Math.abs(t)/60,2):q(t,e)}function q(t,e){var n=e||"",o=t>0?"-":"+",r=Math.abs(t);return o+k(Math.floor(r/60),2)+n+k(r%60,2)}const W=Y;var F=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},O=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const _={p:O,P:function(t,e){var n,o=t.match(/(P+)(p+)?/)||[],r=o[1],a=o[2];if(!a)return F(t,e);switch(r){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",F(r,e)).replace("{{time}}",O(a,e))}};function H(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var R=["D","DD"],Z=["YY","YYYY"];function G(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var Q={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function X(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const J={date:X({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:X({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:X({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var $={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function K(t){return function(e,n){var o;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var r=t.defaultFormattingWidth||t.defaultWidth,a=null!=n&&n.width?String(n.width):r;o=t.formattingValues[a]||t.formattingValues[r]}else{var i=t.defaultWidth,s=null!=n&&n.width?String(n.width):t.defaultWidth;o=t.values[s]||t.values[i]}return o[t.argumentCallback?t.argumentCallback(e):e]}}const V={ordinalNumber:function(t,e){var n=Number(t),o=n%100;if(o>20||o<10)switch(o%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:K({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:K({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:K({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:K({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:K({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function tt(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=n.width,r=o&&t.matchPatterns[o]||t.matchPatterns[t.defaultMatchWidth],a=e.match(r);if(!a)return null;var i,s=a[0],c=o&&t.parsePatterns[o]||t.parsePatterns[t.defaultParseWidth],l=Array.isArray(c)?function(t,e){for(var n=0;n<t.length;n++)if(t[n].test(s))return n}(c):function(t,e){for(var n in t)if(t.hasOwnProperty(n)&&t[n].test(s))return n}(c);return i=t.valueCallback?t.valueCallback(l):l,{value:i=n.valueCallback?n.valueCallback(i):i,rest:e.slice(s.length)}}}var et,nt={ordinalNumber:(et={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(et.matchPattern);if(!n)return null;var o=n[0],r=t.match(et.parsePattern);if(!r)return null;var a=et.valueCallback?et.valueCallback(r[0]):r[0];return{value:a=e.valueCallback?e.valueCallback(a):a,rest:t.slice(o.length)}}),era:tt({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:tt({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:tt({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:tt({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:tt({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const ot={code:"en-US",formatDistance:function(t,e,n){var o,r=Q[t];return o="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+o:o+" ago":o},formatLong:J,formatRelative:function(t,e,n,o){return $[t]},localize:V,match:nt,options:{weekStartsOn:0,firstWeekContainsDate:1}};var rt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,at=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,it=/^'([^]*?)'?$/,st=/''/g,ct=/[a-zA-Z]/;function lt(t,e,n){var o,r,a,i,s,c,l,u,d,p,f,A,h,m,y,w,B,I;b(2,arguments);var j=String(e),k=x(),D=null!==(o=null!==(r=null==n?void 0:n.locale)&&void 0!==r?r:k.locale)&&void 0!==o?o:ot,T=C(null!==(a=null!==(i=null!==(s=null!==(c=null==n?void 0:n.firstWeekContainsDate)&&void 0!==c?c:null==n||null===(l=n.locale)||void 0===l||null===(u=l.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==s?s:k.firstWeekContainsDate)&&void 0!==i?i:null===(d=k.locale)||void 0===d||null===(p=d.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==a?a:1);if(!(T>=1&&T<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var E=C(null!==(f=null!==(A=null!==(h=null!==(m=null==n?void 0:n.weekStartsOn)&&void 0!==m?m:null==n||null===(y=n.locale)||void 0===y||null===(w=y.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==h?h:k.weekStartsOn)&&void 0!==A?A:null===(B=k.locale)||void 0===B||null===(I=B.options)||void 0===I?void 0:I.weekStartsOn)&&void 0!==f?f:0);if(!(E>=0&&E<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!D.localize)throw new RangeError("locale must contain localize property");if(!D.formatLong)throw new RangeError("locale must contain formatLong property");var M=v(t);if(!function(t){if(b(1,arguments),!function(t){return b(1,arguments),t instanceof Date||"object"===g(t)&&"[object Date]"===Object.prototype.toString.call(t)}(t)&&"number"!=typeof t)return!1;var e=v(t);return!isNaN(Number(e))}(M))throw new RangeError("Invalid time value");var S=function(t,e){return b(2,arguments),function(t,e){b(2,arguments);var n=v(t).getTime(),o=C(e);return new Date(n+o)}(t,-C(e))}(M,H(M)),N={firstWeekContainsDate:T,weekStartsOn:E,locale:D,_originalDate:M};return j.match(at).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,_[e])(t,D.formatLong):t})).join("").match(rt).map((function(o){if("''"===o)return"'";var r,a,i=o[0];if("'"===i)return(a=(r=o).match(it))?a[1].replace(st,"'"):r;var s,c=W[i];if(c)return null!=n&&n.useAdditionalWeekYearTokens||(s=o,-1===Z.indexOf(s))||G(o,e,String(t)),null!=n&&n.useAdditionalDayOfYearTokens||!function(t){return-1!==R.indexOf(t)}(o)||G(o,e,String(t)),c(S,o,D.localize,N);if(i.match(ct))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return o})).join("")}var ut=n(933),dt=n.n(ut);dt().load({google:{families:["Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,0,0"]}});const pt=t=>{const e=t.getToDoItems();let n=document.createElement("div");n.classList.add("project-panel");let o=document.createElement("h2");o.classList.add("project-panel-name","no-select"),o.textContent=t.getName(),n.appendChild(o);let r=document.createElement("h6");r.classList.add("project-panel-number-of-items","no-select"),r.textContent=`Number of Items: ${e.length}`,n.appendChild(r);let a=document.createElement("h4");a.classList.add("project-panel-date-created","no-select"),a.textContent=`Created ${lt(t.getDateCreated(),"do MMMM yyyy")}`,n.appendChild(a);let i=document.createElement("div");i.classList.add("project-panel-separator"),n.appendChild(i);let s=document.createElement("div");s.classList.add("project-panel-buttons-container");let c=document.createElement("button");c.classList.add("project-panel-buttons-edit","material-symbols-rounded","no-select"),c.textContent="Edit",s.appendChild(c);let l=document.createElement("button");return l.classList.add("project-panel-buttons-delete","material-symbols-rounded","no-select"),l.textContent="Delete",s.appendChild(l),n.appendChild(s),{panel:n,editButton:c,deleteButton:l}};function ft(t,e){b(2,arguments);var n=v(t),o=v(e),r=n.getTime()-o.getTime();return r<0?-1:r>0?1:r}function At(t,e){if(b(2,arguments),!e||"object"!==g(e))return new Date(NaN);var n=e.years?C(e.years):0,o=e.months?C(e.months):0,r=e.weeks?C(e.weeks):0,a=e.days?C(e.days):0,i=e.hours?C(e.hours):0,s=e.minutes?C(e.minutes):0,c=e.seconds?C(e.seconds):0,l=v(t),u=o||n?function(t,e){b(2,arguments);var n=v(t),o=C(e);if(isNaN(o))return new Date(NaN);if(!o)return n;var r=n.getDate(),a=new Date(n.getTime());return a.setMonth(n.getMonth()+o+1,0),r>=a.getDate()?a:(n.setFullYear(a.getFullYear(),a.getMonth(),r),n)}(l,o+12*n):l,d=a||r?function(t,e){b(2,arguments);var n=v(t),o=C(e);return isNaN(o)?new Date(NaN):o?(n.setDate(n.getDate()+o),n):n}(u,a+7*r):u,p=1e3*(c+60*(s+60*i));return new Date(d.getTime()+p)}function ht(t){b(1,arguments);var e=v(t);return e.setHours(0,0,0,0),e}var mt=864e5;function gt(t,e){var n=t.getFullYear()-e.getFullYear()||t.getMonth()-e.getMonth()||t.getDate()-e.getDate()||t.getHours()-e.getHours()||t.getMinutes()-e.getMinutes()||t.getSeconds()-e.getSeconds()||t.getMilliseconds()-e.getMilliseconds();return n<0?-1:n>0?1:n}Math.pow(10,8);function bt(t,e){return b(2,arguments),v(t).getTime()-v(e).getTime()}var vt={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(t){return t<0?Math.ceil(t):Math.floor(t)}},Ct="trunc";function yt(t){return t?vt[t]:vt[Ct]}function wt(t,e){b(2,arguments);var n,o=v(t),r=v(e),a=ft(o,r),i=Math.abs(function(t,e){b(2,arguments);var n=v(t),o=v(e);return 12*(n.getFullYear()-o.getFullYear())+(n.getMonth()-o.getMonth())}(o,r));if(i<1)n=0;else{1===o.getMonth()&&o.getDate()>27&&o.setDate(30),o.setMonth(o.getMonth()-a*i);var s=ft(o,r)===-a;(function(t){b(1,arguments);var e=v(t);return function(t){b(1,arguments);var e=v(t);return e.setHours(23,59,59,999),e}(e).getTime()===function(t){b(1,arguments);var e=v(t),n=e.getMonth();return e.setFullYear(e.getFullYear(),n+1,0),e.setHours(23,59,59,999),e}(e).getTime()})(v(t))&&1===i&&1===ft(t,r)&&(s=!1),n=a*(i-Number(s))}return 0===n?0:n}function Bt(t){b(1,arguments);var e=v(t.start),n=v(t.end);if(isNaN(e.getTime()))throw new RangeError("Start Date is invalid");if(isNaN(n.getTime()))throw new RangeError("End Date is invalid");var o={};o.years=Math.abs(function(t,e){b(2,arguments);var n=v(t),o=v(e),r=ft(n,o),a=Math.abs(function(t,e){b(2,arguments);var n=v(t),o=v(e);return n.getFullYear()-o.getFullYear()}(n,o));n.setFullYear(1584),o.setFullYear(1584);var i=ft(n,o)===-r,s=r*(a-Number(i));return 0===s?0:s}(n,e));var r=ft(n,e),a=At(e,{years:r*o.years});o.months=Math.abs(wt(n,a));var i=At(a,{months:r*o.months});o.days=Math.abs(function(t,e){b(2,arguments);var n=v(t),o=v(e),r=gt(n,o),a=Math.abs(function(t,e){b(2,arguments);var n=ht(t),o=ht(e),r=n.getTime()-H(n),a=o.getTime()-H(o);return Math.round((r-a)/mt)}(n,o));n.setDate(n.getDate()-r*a);var i=r*(a-Number(gt(n,o)===-r));return 0===i?0:i}(n,i));var s=At(i,{days:r*o.days});o.hours=Math.abs(function(t,e,n){b(2,arguments);var o=bt(t,e)/36e5;return yt(null==n?void 0:n.roundingMethod)(o)}(n,s));var c=At(s,{hours:r*o.hours});o.minutes=Math.abs(function(t,e,n){b(2,arguments);var o=bt(t,e)/6e4;return yt(null==n?void 0:n.roundingMethod)(o)}(n,c));var l=At(c,{minutes:r*o.minutes});return o.seconds=Math.abs(function(t,e,n){b(2,arguments);var o=bt(t,e)/1e3;return yt(null==n?void 0:n.roundingMethod)(o)}(n,l)),o}var xt=["years","months","weeks","days","hours","minutes","seconds"];dt().load({google:{families:["Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,1,0"]}});var It=n(806),jt={};It.Z&&It.Z.locals&&(jt.locals=It.Z.locals);var kt,Dt=0,Tt={};Tt.styleTagTransform=p(),Tt.setAttributes=c(),Tt.insert=i().bind(null,"head"),Tt.domAPI=r(),Tt.insertStyleElement=u(),jt.use=function(t){return Tt.options=t||{},Dt++||(kt=e()(It.Z,Tt)),jt},jt.unuse=function(){Dt>0&&!--Dt&&(kt(),kt=null)};const Et=jt;var Mt=n(719),St={};Mt.Z&&Mt.Z.locals&&(St.locals=Mt.Z.locals);var Nt,Pt=0,Ut={};Ut.styleTagTransform=p(),Ut.setAttributes=c(),Ut.insert=i().bind(null,"head"),Ut.domAPI=r(),Ut.insertStyleElement=u(),St.use=function(t){return Ut.options=t||{},Pt++||(Nt=e()(Mt.Z,Ut)),St},St.unuse=function(){Pt>0&&!--Pt&&(Nt(),Nt=null)};const Yt=St;dt().load({google:{families:["Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,0,0"]}}),(()=>{let t,e,n,o,r,a=-1;t=document.createElement("div"),t.classList.add("page"),document.querySelector("body").appendChild(t),e=document.createElement("div"),e.classList.add("header"),t.appendChild(e),o=document.createElement("div"),o.classList.add("content"),t.appendChild(o),n=document.createElement("h1"),n.classList.add("title"),e.appendChild(n);const i=(()=>{let t=[];return{newProject:e=>{for(let n=0;n<t.length;n++)if(t[n].name===e)return console.log("This project name is already taken."),null;const n=m(e);return t.push({name:e,project:n}),n},getProjects:()=>t,removeProject:e=>{for(let n=0;n<t.length;n++)t[n].name===e&&t.splice(n,1)}}})(),s=i.newProject("test-project-1"),c=s.addToDoItem();c.setName("test-item-1"),c.setDueDateYear(2024),c.setDueDateMonth(11),c.setPriority(3);const l=s.addToDoItem();l.setName("test-item-2"),l.setDueDateYear(2025),l.setDueDateMonth(3);const u=s.addToDoItem();u.setName("test-item-3"),u.setDueDateYear(2027),u.setDueDateMonth(1),i.newProject("test-project-2"),i.newProject("test-project-3"),i.newProject("test-project-4");const d=()=>{if(o){for(;o.firstChild;)o.lastChild.remove();A(),Et.unuse(),Yt.unuse(),n.textContent="My Projects",-1===a?(Et.use(),p()):(Yt.use(),b())}},p=()=>{const t=document.createElement("div");t.classList.add("project-container"),o.appendChild(t);const e=i.getProjects();for(let n=0;n<e.length;n++){const o=pt(e[n].project);o.panel.setAttribute("index",n),t.appendChild(o.panel),o.editButton.addEventListener("click",(()=>{a=o.panel.getAttribute("index"),d()})),o.deleteButton.addEventListener("click",(()=>{const e=i.getProjects();i.removeProject(e[o.panel.getAttribute("index")].name),o.panel.remove();for(let e=0;e<t.children.length;e++)t.children[e].setAttribute("index",e)}))}let n=document.createElement("div");n.classList.add("new-project-panel"),t.appendChild(n),n.addEventListener("click",f);let r=document.createElement("h2");r.classList.add("new-project-panel-name","no-select"),r.textContent="New Project",n.appendChild(r);let s=document.createElement("h2");s.classList.add("new-project-panel-plus","no-select"),s.textContent="+",n.appendChild(s)},f=()=>{r=document.createElement("div"),r.classList.add("new-project-form-cover"),o.appendChild(r);const t=document.createElement("form");t.classList.add("new-project-form"),t.addEventListener("submit",h),r.appendChild(t);const e=document.createElement("button");e.classList.add("new-project-form-close-button","material-symbols-rounded"),e.textContent="Close",e.addEventListener("click",A),t.appendChild(e);const n=document.createElement("li");n.classList.add("new-project-form-name"),t.appendChild(n);const a=document.createElement("label");a.setAttribute("for","project-name"),a.setAttribute("help","This name is already taken."),a.textContent="Project Name",n.appendChild(a);const i=document.createElement("input");i.setAttribute("type","text"),i.setAttribute("name","project-name"),i.setAttribute("id","project-name"),i.setAttribute("minlength",1),i.setAttribute("maxlength",75),i.setAttribute("title","Please enter a name for your project using only alphanumeric characters, hyphens, underscores and spaces."),i.setAttribute("required",!0),i.setAttribute("placeholder"," "),i.setAttribute("pattern","[A-Za-z0-9 _\\-]+"),i.addEventListener("input",(()=>{const t=g(i.value);console.log(t),t?i.classList.remove("name-taken"):i.classList.add("name-taken")})),n.appendChild(i);const s=document.createElement("button");s.classList.add("new-project-form-create-project-button","material-symbols-rounded"),s.setAttribute("type","submit"),s.textContent="Done",t.appendChild(s)},A=()=>{r&&r.remove()},h=t=>{t.preventDefault();const e=Object.fromEntries(new FormData(t.target).entries());g(e["project-name"])&&(i.newProject(e["project-name"]),d())},g=t=>{const e=i.getProjects();for(let n=0;n<e.length;n++)if(e[n].name===t)return!1;return!0},b=()=>{const t=i.getProjects()[a],e=t.project.getToDoItems();n.textContent=t.name;let r=document.createElement("div");r.classList.add("to-do-list-container"),o.appendChild(r);let s=document.createElement("div");s.classList.add("project-buttons-container"),r.appendChild(s);let c=document.createElement("button");c.classList.add("project-buttons-return-to-list","material-symbols-rounded","no-select"),c.textContent="Format_List_Bulleted",s.appendChild(c),c.addEventListener("click",(()=>{a=-1,d()}));let l=document.createElement("button");l.classList.add("project-buttons-new-to-do-item","material-symbols-rounded","no-select"),l.textContent="Add",s.appendChild(l);let u=document.createElement("button");u.classList.add("project-buttons-sort-to-do-items","material-symbols-rounded","no-select"),u.textContent="Sort",s.appendChild(u);let p=document.createElement("div");p.classList.add("project-to-do-items-container"),r.appendChild(p),e.forEach((t=>{p.appendChild((t=>{let e=t,n=!1,o=document.createElement("div");o.classList.add("to-do-item");const r=()=>{for(;o.firstChild;)o.lastChild.remove();n?o.classList.add("expanded"):o.classList.add("collapsed");let t=document.createElement("button");t.classList.add("to-do-item-expand-collapse-button","material-symbols-rounded"),t.textContent=n?"Expand_Circle_Up":"Expand_Circle_Down",o.appendChild(t),t.addEventListener("click",(()=>{n=!n,r()}));let a=document.createElement("div");a.classList.add("to-do-item-top-bar-information"),o.appendChild(a);let i=document.createElement("h2");i.classList.add("to-do-item-name","no-select"),i.textContent=e.getName(),a.appendChild(i);let s=document.createElement("h4");s.classList.add("to-do-item-due-date","no-select");let c=Bt({start:new Date,end:e.getDueDate()});const l=Object.entries(c).filter((([t,e])=>e||!1)).map((([t,e])=>t));s.textContent=`Due on ${lt(e.getDueDate(),"do MMMM yyyy")} in \n        ${function(t,e){var n,o,r,a,i;if(arguments.length<1)throw new TypeError("1 argument required, but only ".concat(arguments.length," present"));var s=x(),c=null!==(n=null!==(o=null==e?void 0:e.locale)&&void 0!==o?o:s.locale)&&void 0!==n?n:ot,l=null!==(r=null==e?void 0:e.format)&&void 0!==r?r:xt,u=null!==(a=null==e?void 0:e.zero)&&void 0!==a&&a,d=null!==(i=null==e?void 0:e.delimiter)&&void 0!==i?i:" ";return c.formatDistance?l.reduce((function(e,n){var o="x".concat(n.replace(/(^.)/,(function(t){return t.toUpperCase()}))),r=t[n];return"number"==typeof r&&(u||t[n])?e.concat(c.formatDistance(o,r)):e}),[]).join(d):""}(c,{format:["years","months","weeks","days","hours","minutes","seconds"].filter((t=>new Set(l).has(t))).slice(0,2),delimiter:", "})}`,a.appendChild(s);let u=document.createElement("div");u.classList.add("to-do-item-priority");for(let t=4;t>=0;t--){let n=document.createElement("h4");n.classList.add("to-do-item-priority-star","material-symbols-rounded","no-select"),n.textContent="Star",t>=e.getPriority()?n.classList.add("to-do-item-priority-star-off"):n.classList.add("to-do-item-priority-star-on"),u.appendChild(n)}a.appendChild(u);let d=document.createElement("button");if(d.classList.add("to-do-item-edit-button","material-symbols-rounded"),d.textContent="Edit",o.appendChild(d),n){let t=document.createElement("div");t.classList.add("to-do-item-expanded-information"),o.appendChild(t)}};return r(),o})(t))}))};d()})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,